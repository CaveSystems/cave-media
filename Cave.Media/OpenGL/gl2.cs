#pragma warning disable 1591

namespace Cave.Media.OpenGL
{
	using System;
	using System.Reflection;
	using System.Runtime.InteropServices;

	[Obfuscation(ApplyToMembers = true, Exclude = true)]
	public static partial class gl2
	{
		public static void NewList(UInt32 list, GL mode)
		{
			Delegates.glNewList((UInt32)list, (int)mode);
		}

		public static void NewList(Int32 list, GL mode)
		{
			Delegates.glNewList((UInt32)list, (int)mode);
		}

		public static void EndList()
		{
			Delegates.glEndList();
		}

		public static void CallList(UInt32 list)
		{
			Delegates.glCallList((UInt32)list);
		}

		public static void CallList(Int32 list)
		{
			Delegates.glCallList((UInt32)list);
		}

		public static void CallLists(Int32 n, GL type, IntPtr lists)
		{
			unsafe
			{
				Delegates.glCallLists((Int32)n, (int)type, (IntPtr)lists);
			}
		}

		public static void CallLists(Int32 n, GL type, [In, Out] object lists)
		{
			unsafe
			{
				GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
				try
				{
					Delegates.glCallLists((Int32)n, (int)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
				}
				finally
				{
					lists_ptr.Free();
				}
			}
		}

		public static void DeleteLists(UInt32 list, Int32 range)
		{
			Delegates.glDeleteLists((UInt32)list, (Int32)range);
		}

		public static void DeleteLists(Int32 list, Int32 range)
		{
			Delegates.glDeleteLists((UInt32)list, (Int32)range);
		}

		public static Int32 GenLists(Int32 range)
		{
			return Delegates.glGenLists((Int32)range);
		}

		public static void ListBase(UInt32 @base)
		{
			Delegates.glListBase((UInt32)@base);
		}

		public static void ListBase(Int32 @base)
		{
			Delegates.glListBase((UInt32)@base);
		}

		public static void Begin(GL mode)
		{
			Delegates.glBegin((int)mode);
		}

		public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, IntPtr bitmap)
		{
			unsafe
			{
				Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
			}
		}

		public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap)
		{
			unsafe
			{
				fixed (Byte* bitmap_ptr = bitmap)
				{
					Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
				}
			}
		}

		public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap)
		{
			unsafe
			{
				fixed (Byte* bitmap_ptr = &bitmap)
				{
					Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
				}
			}
		}

		public static void Color3b(SByte red, SByte green, SByte blue)
		{
			Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void Color3b(Byte red, Byte green, Byte blue)
		{
			Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void Color3bv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3bv((SByte*)v);
			}
		}

		public static void Color3bv(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color3bv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color3bv(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color3bv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color3d(Double red, Double green, Double blue)
		{
			Delegates.glColor3d((Double)red, (Double)green, (Double)blue);
		}

		public static void Color3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3dv((Double*)v);
			}
		}

		public static void Color3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glColor3dv((Double*)v_ptr);
				}
			}
		}

		public static void Color3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glColor3dv((Double*)v_ptr);
				}
			}
		}

		public static void Color3f(Single red, Single green, Single blue)
		{
			Delegates.glColor3f((Single)red, (Single)green, (Single)blue);
		}

		public static void Color3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3fv((Single*)v);
			}
		}

		public static void Color3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor3fv((Single*)v_ptr);
				}
			}
		}

		public static void Color3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor3fv((Single*)v_ptr);
				}
			}
		}

		public static void Color3i(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glColor3i((Int32)red, (Int32)green, (Int32)blue);
		}

		public static void Color3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3iv((Int32*)v);
			}
		}

		public static void Color3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glColor3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Color3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glColor3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Color3s(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glColor3s((Int16)red, (Int16)green, (Int16)blue);
		}

		public static void Color3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3sv((Int16*)v);
			}
		}

		public static void Color3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor3sv((Int16*)v_ptr);
				}
			}
		}

		public static void Color3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor3sv((Int16*)v_ptr);
				}
			}
		}

		public static void Color3ub(Byte red, Byte green, Byte blue)
		{
			Delegates.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
		}

		public static void Color3ubv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3ubv((Byte*)v);
			}
		}

		public static void Color3ubv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glColor3ubv((Byte*)v_ptr);
				}
			}
		}

		public static void Color3ubv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glColor3ubv((Byte*)v_ptr);
				}
			}
		}

		public static void Color3ui(UInt32 red, UInt32 green, UInt32 blue)
		{
			Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void Color3ui(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void Color3uiv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3uiv((UInt32*)v);
			}
		}

		public static void Color3uiv(UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color3uiv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color3uiv(ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color3uiv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color3us(UInt16 red, UInt16 green, UInt16 blue)
		{
			Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void Color3us(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void Color3usv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3usv((UInt16*)v);
			}
		}

		public static void Color3usv(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3usv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3usv(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3usv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4b(SByte red, SByte green, SByte blue, SByte alpha)
		{
			Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
		}

		public static void Color4b(Byte red, Byte green, Byte blue, Byte alpha)
		{
			Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
		}

		public static void Color4bv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4bv((SByte*)v);
			}
		}

		public static void Color4bv(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color4bv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color4bv(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color4bv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}

		public static void Color4d(Double red, Double green, Double blue, Double alpha)
		{
			Delegates.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
		}

		public static void Color4dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4dv((Double*)v);
			}
		}

		public static void Color4dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glColor4dv((Double*)v_ptr);
				}
			}
		}

		public static void Color4dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glColor4dv((Double*)v_ptr);
				}
			}
		}

		public static void Color4f(Single red, Single green, Single blue, Single alpha)
		{
			Delegates.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		public static void Color4fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4fv((Single*)v);
			}
		}

		public static void Color4fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fv((Single*)v_ptr);
				}
			}
		}

		public static void Color4fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fv((Single*)v_ptr);
				}
			}
		}

		public static void Color4i(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
		}

		public static void Color4iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4iv((Int32*)v);
			}
		}

		public static void Color4iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glColor4iv((Int32*)v_ptr);
				}
			}
		}

		public static void Color4iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glColor4iv((Int32*)v_ptr);
				}
			}
		}

		public static void Color4s(Int16 red, Int16 green, Int16 blue, Int16 alpha)
		{
			Delegates.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
		}

		public static void Color4sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4sv((Int16*)v);
			}
		}

		public static void Color4sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor4sv((Int16*)v_ptr);
				}
			}
		}

		public static void Color4sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor4sv((Int16*)v_ptr);
				}
			}
		}

		public static void Color4ub(Byte red, Byte green, Byte blue, Byte alpha)
		{
			Delegates.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
		}

		public static void Color4ubv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4ubv((Byte*)v);
			}
		}

		public static void Color4ubv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glColor4ubv((Byte*)v_ptr);
				}
			}
		}

		public static void Color4ubv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glColor4ubv((Byte*)v_ptr);
				}
			}
		}

		public static void Color4ui(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
		{
			Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
		}

		public static void Color4ui(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
		}

		public static void Color4uiv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4uiv((UInt32*)v);
			}
		}

		public static void Color4uiv(UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color4uiv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color4uiv(ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color4uiv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void Color4us(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
		{
			Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
		}

		public static void Color4us(Int16 red, Int16 green, Int16 blue, Int16 alpha)
		{
			Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
		}

		public static void Color4usv(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4usv((UInt16*)v);
			}
		}

		public static void Color4usv(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4usv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4usv(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4usv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}

		public static void EdgeFlag(Int32 flag)
		{
			Delegates.glEdgeFlag((Int32)flag);
		}

		public static void EdgeFlagv(IntPtr flag)
		{
			unsafe
			{
				Delegates.glEdgeFlagv((Int32*)flag);
			}
		}

		public static void EdgeFlagv(Int32[] flag)
		{
			unsafe
			{
				fixed (Int32* flag_ptr = flag)
				{
					Delegates.glEdgeFlagv((Int32*)flag_ptr);
				}
			}
		}

		public static void EdgeFlagv(ref Int32 flag)
		{
			unsafe
			{
				fixed (Int32* flag_ptr = &flag)
				{
					Delegates.glEdgeFlagv((Int32*)flag_ptr);
				}
			}
		}

		public static void End()
		{
			Delegates.glEnd();
		}

		public static void Indexd(Double c)
		{
			Delegates.glIndexd((Double)c);
		}

		public static void Indexdv(IntPtr c)
		{
			unsafe
			{
				Delegates.glIndexdv((Double*)c);
			}
		}

		public static void Indexdv(Double[] c)
		{
			unsafe
			{
				fixed (Double* c_ptr = c)
				{
					Delegates.glIndexdv((Double*)c_ptr);
				}
			}
		}

		public static void Indexdv(ref Double c)
		{
			unsafe
			{
				fixed (Double* c_ptr = &c)
				{
					Delegates.glIndexdv((Double*)c_ptr);
				}
			}
		}

		public static void Indexf(Single c)
		{
			Delegates.glIndexf((Single)c);
		}

		public static void Indexfv(IntPtr c)
		{
			unsafe
			{
				Delegates.glIndexfv((Single*)c);
			}
		}

		public static void Indexfv(Single[] c)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glIndexfv((Single*)c_ptr);
				}
			}
		}

		public static void Indexfv(ref Single c)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glIndexfv((Single*)c_ptr);
				}
			}
		}

		public static void Indexi(Int32 c)
		{
			Delegates.glIndexi((Int32)c);
		}

		public static void Indexiv(IntPtr c)
		{
			unsafe
			{
				Delegates.glIndexiv((Int32*)c);
			}
		}

		public static void Indexiv(Int32[] c)
		{
			unsafe
			{
				fixed (Int32* c_ptr = c)
				{
					Delegates.glIndexiv((Int32*)c_ptr);
				}
			}
		}

		public static void Indexiv(ref Int32 c)
		{
			unsafe
			{
				fixed (Int32* c_ptr = &c)
				{
					Delegates.glIndexiv((Int32*)c_ptr);
				}
			}
		}

		public static void Indexs(Int16 c)
		{
			Delegates.glIndexs((Int16)c);
		}

		public static void Indexsv(IntPtr c)
		{
			unsafe
			{
				Delegates.glIndexsv((Int16*)c);
			}
		}

		public static void Indexsv(Int16[] c)
		{
			unsafe
			{
				fixed (Int16* c_ptr = c)
				{
					Delegates.glIndexsv((Int16*)c_ptr);
				}
			}
		}

		public static void Indexsv(ref Int16 c)
		{
			unsafe
			{
				fixed (Int16* c_ptr = &c)
				{
					Delegates.glIndexsv((Int16*)c_ptr);
				}
			}
		}

		public static void Normal3b(SByte nx, SByte ny, SByte nz)
		{
			Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
		}

		public static void Normal3b(Byte nx, Byte ny, Byte nz)
		{
			Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
		}

		public static void Normal3bv(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3bv((SByte*)v);
			}
		}

		public static void Normal3bv(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Normal3bv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Normal3bv(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Normal3bv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}

		public static void Normal3d(Double nx, Double ny, Double nz)
		{
			Delegates.glNormal3d((Double)nx, (Double)ny, (Double)nz);
		}

		public static void Normal3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3dv((Double*)v);
			}
		}

		public static void Normal3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glNormal3dv((Double*)v_ptr);
				}
			}
		}

		public static void Normal3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glNormal3dv((Double*)v_ptr);
				}
			}
		}

		public static void Normal3f(Single nx, Single ny, Single nz)
		{
			Delegates.glNormal3f((Single)nx, (Single)ny, (Single)nz);
		}

		public static void Normal3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3fv((Single*)v);
			}
		}

		public static void Normal3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glNormal3fv((Single*)v_ptr);
				}
			}
		}

		public static void Normal3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glNormal3fv((Single*)v_ptr);
				}
			}
		}

		public static void Normal3i(Int32 nx, Int32 ny, Int32 nz)
		{
			Delegates.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
		}

		public static void Normal3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3iv((Int32*)v);
			}
		}

		public static void Normal3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glNormal3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Normal3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glNormal3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Normal3s(Int16 nx, Int16 ny, Int16 nz)
		{
			Delegates.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
		}

		public static void Normal3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3sv((Int16*)v);
			}
		}

		public static void Normal3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glNormal3sv((Int16*)v_ptr);
				}
			}
		}

		public static void Normal3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glNormal3sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos2d(Double x, Double y)
		{
			Delegates.glRasterPos2d((Double)x, (Double)y);
		}

		public static void RasterPos2dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos2dv((Double*)v);
			}
		}

		public static void RasterPos2dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glRasterPos2dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos2dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glRasterPos2dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos2f(Single x, Single y)
		{
			Delegates.glRasterPos2f((Single)x, (Single)y);
		}

		public static void RasterPos2fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos2fv((Single*)v);
			}
		}

		public static void RasterPos2fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glRasterPos2fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos2fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glRasterPos2fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos2i(Int32 x, Int32 y)
		{
			Delegates.glRasterPos2i((Int32)x, (Int32)y);
		}

		public static void RasterPos2iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos2iv((Int32*)v);
			}
		}

		public static void RasterPos2iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glRasterPos2iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos2iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glRasterPos2iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos2s(Int16 x, Int16 y)
		{
			Delegates.glRasterPos2s((Int16)x, (Int16)y);
		}

		public static void RasterPos2sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos2sv((Int16*)v);
			}
		}

		public static void RasterPos2sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glRasterPos2sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos2sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glRasterPos2sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos3d(Double x, Double y, Double z)
		{
			Delegates.glRasterPos3d((Double)x, (Double)y, (Double)z);
		}

		public static void RasterPos3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos3dv((Double*)v);
			}
		}

		public static void RasterPos3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glRasterPos3dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glRasterPos3dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos3f(Single x, Single y, Single z)
		{
			Delegates.glRasterPos3f((Single)x, (Single)y, (Single)z);
		}

		public static void RasterPos3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos3fv((Single*)v);
			}
		}

		public static void RasterPos3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glRasterPos3fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glRasterPos3fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos3i(Int32 x, Int32 y, Int32 z)
		{
			Delegates.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
		}

		public static void RasterPos3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos3iv((Int32*)v);
			}
		}

		public static void RasterPos3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glRasterPos3iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glRasterPos3iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos3s(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
		}

		public static void RasterPos3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos3sv((Int16*)v);
			}
		}

		public static void RasterPos3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glRasterPos3sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glRasterPos3sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos4d(Double x, Double y, Double z, Double w)
		{
			Delegates.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void RasterPos4dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos4dv((Double*)v);
			}
		}

		public static void RasterPos4dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glRasterPos4dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos4dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glRasterPos4dv((Double*)v_ptr);
				}
			}
		}

		public static void RasterPos4f(Single x, Single y, Single z, Single w)
		{
			Delegates.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void RasterPos4fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos4fv((Single*)v);
			}
		}

		public static void RasterPos4fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glRasterPos4fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos4fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glRasterPos4fv((Single*)v_ptr);
				}
			}
		}

		public static void RasterPos4i(Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void RasterPos4iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos4iv((Int32*)v);
			}
		}

		public static void RasterPos4iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glRasterPos4iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos4iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glRasterPos4iv((Int32*)v_ptr);
				}
			}
		}

		public static void RasterPos4s(Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void RasterPos4sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glRasterPos4sv((Int16*)v);
			}
		}

		public static void RasterPos4sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glRasterPos4sv((Int16*)v_ptr);
				}
			}
		}

		public static void RasterPos4sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glRasterPos4sv((Int16*)v_ptr);
				}
			}
		}

		public static void Rectd(Double x1, Double y1, Double x2, Double y2)
		{
			Delegates.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
		}

		public static void Rectdv(IntPtr v1, IntPtr v2)
		{
			unsafe
			{
				Delegates.glRectdv((Double*)v1, (Double*)v2);
			}
		}

		public static void Rectdv(IntPtr v1, Double[] v2)
		{
			unsafe
			{
				fixed (Double* v2_ptr = v2)
				{
					Delegates.glRectdv((Double*)v1, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectdv(IntPtr v1, ref Double v2)
		{
			unsafe
			{
				fixed (Double* v2_ptr = &v2)
				{
					Delegates.glRectdv((Double*)v1, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectdv(Double[] v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = v1)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2);
				}
			}
		}

		public static void Rectdv(Double[] v1, Double[] v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = v1)
				fixed (Double* v2_ptr = v2)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectdv(Double[] v1, ref Double v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = v1)
				fixed (Double* v2_ptr = &v2)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectdv(ref Double v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = &v1)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2);
				}
			}
		}

		public static void Rectdv(ref Double v1, Double[] v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = &v1)
				fixed (Double* v2_ptr = v2)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectdv(ref Double v1, ref Double v2)
		{
			unsafe
			{
				fixed (Double* v1_ptr = &v1)
				fixed (Double* v2_ptr = &v2)
				{
					Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
				}
			}
		}

		public static void Rectf(Single x1, Single y1, Single x2, Single y2)
		{
			Delegates.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
		}

		public static void Rectfv(IntPtr v1, IntPtr v2)
		{
			unsafe
			{
				Delegates.glRectfv((Single*)v1, (Single*)v2);
			}
		}

		public static void Rectfv(IntPtr v1, Single[] v2)
		{
			unsafe
			{
				fixed (Single* v2_ptr = v2)
				{
					Delegates.glRectfv((Single*)v1, (Single*)v2_ptr);
				}
			}
		}

		public static void Rectfv(IntPtr v1, ref Single v2)
		{
			unsafe
			{
				fixed (Single* v2_ptr = &v2)
				{
					Delegates.glRectfv((Single*)v1, (Single*)v2_ptr);
				}
			}
		}

		public static void Rectfv(Single[] v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = v1)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2);
				}
			}
		}

		public static void Rectfv(Single[] v1, Single[] v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = v1)
				fixed (Single* v2_ptr = v2)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
				}
			}
		}

		public static void Rectfv(Single[] v1, ref Single v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = v1)
				fixed (Single* v2_ptr = &v2)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
				}
			}
		}

		public static void Rectfv(ref Single v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = &v1)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2);
				}
			}
		}

		public static void Rectfv(ref Single v1, Single[] v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = &v1)
				fixed (Single* v2_ptr = v2)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
				}
			}
		}

		public static void Rectfv(ref Single v1, ref Single v2)
		{
			unsafe
			{
				fixed (Single* v1_ptr = &v1)
				fixed (Single* v2_ptr = &v2)
				{
					Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
				}
			}
		}

		public static void Recti(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
		{
			Delegates.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
		}

		public static void Rectiv(IntPtr v1, IntPtr v2)
		{
			unsafe
			{
				Delegates.glRectiv((Int32*)v1, (Int32*)v2);
			}
		}

		public static void Rectiv(IntPtr v1, Int32[] v2)
		{
			unsafe
			{
				fixed (Int32* v2_ptr = v2)
				{
					Delegates.glRectiv((Int32*)v1, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rectiv(IntPtr v1, ref Int32 v2)
		{
			unsafe
			{
				fixed (Int32* v2_ptr = &v2)
				{
					Delegates.glRectiv((Int32*)v1, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rectiv(Int32[] v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = v1)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2);
				}
			}
		}

		public static void Rectiv(Int32[] v1, Int32[] v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = v1)
				fixed (Int32* v2_ptr = v2)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rectiv(Int32[] v1, ref Int32 v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = v1)
				fixed (Int32* v2_ptr = &v2)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rectiv(ref Int32 v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = &v1)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2);
				}
			}
		}

		public static void Rectiv(ref Int32 v1, Int32[] v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = &v1)
				fixed (Int32* v2_ptr = v2)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rectiv(ref Int32 v1, ref Int32 v2)
		{
			unsafe
			{
				fixed (Int32* v1_ptr = &v1)
				fixed (Int32* v2_ptr = &v2)
				{
					Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
				}
			}
		}

		public static void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2)
		{
			Delegates.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
		}

		public static void Rectsv(IntPtr v1, IntPtr v2)
		{
			unsafe
			{
				Delegates.glRectsv((Int16*)v1, (Int16*)v2);
			}
		}

		public static void Rectsv(IntPtr v1, Int16[] v2)
		{
			unsafe
			{
				fixed (Int16* v2_ptr = v2)
				{
					Delegates.glRectsv((Int16*)v1, (Int16*)v2_ptr);
				}
			}
		}

		public static void Rectsv(IntPtr v1, ref Int16 v2)
		{
			unsafe
			{
				fixed (Int16* v2_ptr = &v2)
				{
					Delegates.glRectsv((Int16*)v1, (Int16*)v2_ptr);
				}
			}
		}

		public static void Rectsv(Int16[] v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = v1)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2);
				}
			}
		}

		public static void Rectsv(Int16[] v1, Int16[] v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = v1)
				fixed (Int16* v2_ptr = v2)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
				}
			}
		}

		public static void Rectsv(Int16[] v1, ref Int16 v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = v1)
				fixed (Int16* v2_ptr = &v2)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
				}
			}
		}

		public static void Rectsv(ref Int16 v1, IntPtr v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = &v1)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2);
				}
			}
		}

		public static void Rectsv(ref Int16 v1, Int16[] v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = &v1)
				fixed (Int16* v2_ptr = v2)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
				}
			}
		}

		public static void Rectsv(ref Int16 v1, ref Int16 v2)
		{
			unsafe
			{
				fixed (Int16* v1_ptr = &v1)
				fixed (Int16* v2_ptr = &v2)
				{
					Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
				}
			}
		}

		public static void TexCoord1d(Double s)
		{
			Delegates.glTexCoord1d((Double)s);
		}

		public static void TexCoord1dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord1dv((Double*)v);
			}
		}

		public static void TexCoord1dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glTexCoord1dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord1dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glTexCoord1dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord1f(Single s)
		{
			Delegates.glTexCoord1f((Single)s);
		}

		public static void TexCoord1fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord1fv((Single*)v);
			}
		}

		public static void TexCoord1fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord1fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord1fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord1fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord1i(Int32 s)
		{
			Delegates.glTexCoord1i((Int32)s);
		}

		public static void TexCoord1iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord1iv((Int32*)v);
			}
		}

		public static void TexCoord1iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glTexCoord1iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord1iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glTexCoord1iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord1s(Int16 s)
		{
			Delegates.glTexCoord1s((Int16)s);
		}

		public static void TexCoord1sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord1sv((Int16*)v);
			}
		}

		public static void TexCoord1sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord1sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord1sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord1sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord2d(Double s, Double t)
		{
			Delegates.glTexCoord2d((Double)s, (Double)t);
		}

		public static void TexCoord2dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2dv((Double*)v);
			}
		}

		public static void TexCoord2dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glTexCoord2dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord2dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glTexCoord2dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord2f(Single s, Single t)
		{
			Delegates.glTexCoord2f((Single)s, (Single)t);
		}

		public static void TexCoord2fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fv((Single*)v);
			}
		}

		public static void TexCoord2fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2i(Int32 s, Int32 t)
		{
			Delegates.glTexCoord2i((Int32)s, (Int32)t);
		}

		public static void TexCoord2iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2iv((Int32*)v);
			}
		}

		public static void TexCoord2iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glTexCoord2iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord2iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glTexCoord2iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord2s(Int16 s, Int16 t)
		{
			Delegates.glTexCoord2s((Int16)s, (Int16)t);
		}

		public static void TexCoord2sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2sv((Int16*)v);
			}
		}

		public static void TexCoord2sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord2sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord2sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord2sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord3d(Double s, Double t, Double r)
		{
			Delegates.glTexCoord3d((Double)s, (Double)t, (Double)r);
		}

		public static void TexCoord3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord3dv((Double*)v);
			}
		}

		public static void TexCoord3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glTexCoord3dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glTexCoord3dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord3f(Single s, Single t, Single r)
		{
			Delegates.glTexCoord3f((Single)s, (Single)t, (Single)r);
		}

		public static void TexCoord3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord3fv((Single*)v);
			}
		}

		public static void TexCoord3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord3fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord3fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord3i(Int32 s, Int32 t, Int32 r)
		{
			Delegates.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
		}

		public static void TexCoord3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord3iv((Int32*)v);
			}
		}

		public static void TexCoord3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glTexCoord3iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glTexCoord3iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord3s(Int16 s, Int16 t, Int16 r)
		{
			Delegates.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
		}

		public static void TexCoord3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord3sv((Int16*)v);
			}
		}

		public static void TexCoord3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord3sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord3sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord4d(Double s, Double t, Double r, Double q)
		{
			Delegates.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
		}

		public static void TexCoord4dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4dv((Double*)v);
			}
		}

		public static void TexCoord4dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glTexCoord4dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord4dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glTexCoord4dv((Double*)v_ptr);
				}
			}
		}

		public static void TexCoord4f(Single s, Single t, Single r, Single q)
		{
			Delegates.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
		}

		public static void TexCoord4fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4fv((Single*)v);
			}
		}

		public static void TexCoord4fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fv((Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4i(Int32 s, Int32 t, Int32 r, Int32 q)
		{
			Delegates.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
		}

		public static void TexCoord4iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4iv((Int32*)v);
			}
		}

		public static void TexCoord4iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glTexCoord4iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord4iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glTexCoord4iv((Int32*)v_ptr);
				}
			}
		}

		public static void TexCoord4s(Int16 s, Int16 t, Int16 r, Int16 q)
		{
			Delegates.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
		}

		public static void TexCoord4sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4sv((Int16*)v);
			}
		}

		public static void TexCoord4sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord4sv((Int16*)v_ptr);
				}
			}
		}

		public static void TexCoord4sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord4sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex2d(Double x, Double y)
		{
			Delegates.glVertex2d((Double)x, (Double)y);
		}

		public static void Vertex2dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex2dv((Double*)v);
			}
		}

		public static void Vertex2dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertex2dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex2dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertex2dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex2f(Single x, Single y)
		{
			Delegates.glVertex2f((Single)x, (Single)y);
		}

		public static void Vertex2fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex2fv((Single*)v);
			}
		}

		public static void Vertex2fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertex2fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex2fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertex2fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex2i(Int32 x, Int32 y)
		{
			Delegates.glVertex2i((Int32)x, (Int32)y);
		}

		public static void Vertex2iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex2iv((Int32*)v);
			}
		}

		public static void Vertex2iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertex2iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex2iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertex2iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex2s(Int16 x, Int16 y)
		{
			Delegates.glVertex2s((Int16)x, (Int16)y);
		}

		public static void Vertex2sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex2sv((Int16*)v);
			}
		}

		public static void Vertex2sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex2sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex2sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex2sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex3d(Double x, Double y, Double z)
		{
			Delegates.glVertex3d((Double)x, (Double)y, (Double)z);
		}

		public static void Vertex3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex3dv((Double*)v);
			}
		}

		public static void Vertex3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertex3dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertex3dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex3f(Single x, Single y, Single z)
		{
			Delegates.glVertex3f((Single)x, (Single)y, (Single)z);
		}

		public static void Vertex3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex3fv((Single*)v);
			}
		}

		public static void Vertex3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertex3fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertex3fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex3i(Int32 x, Int32 y, Int32 z)
		{
			Delegates.glVertex3i((Int32)x, (Int32)y, (Int32)z);
		}

		public static void Vertex3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex3iv((Int32*)v);
			}
		}

		public static void Vertex3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertex3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertex3iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex3s(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertex3s((Int16)x, (Int16)y, (Int16)z);
		}

		public static void Vertex3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex3sv((Int16*)v);
			}
		}

		public static void Vertex3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex3sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex3sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex4d(Double x, Double y, Double z, Double w)
		{
			Delegates.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void Vertex4dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex4dv((Double*)v);
			}
		}

		public static void Vertex4dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertex4dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex4dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertex4dv((Double*)v_ptr);
				}
			}
		}

		public static void Vertex4f(Single x, Single y, Single z, Single w)
		{
			Delegates.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void Vertex4fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex4fv((Single*)v);
			}
		}

		public static void Vertex4fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertex4fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex4fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertex4fv((Single*)v_ptr);
				}
			}
		}

		public static void Vertex4i(Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void Vertex4iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex4iv((Int32*)v);
			}
		}

		public static void Vertex4iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertex4iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex4iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertex4iv((Int32*)v_ptr);
				}
			}
		}

		public static void Vertex4s(Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void Vertex4sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex4sv((Int16*)v);
			}
		}

		public static void Vertex4sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex4sv((Int16*)v_ptr);
				}
			}
		}

		public static void Vertex4sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex4sv((Int16*)v_ptr);
				}
			}
		}

		public static void ClipPlane(int plane, IntPtr equation)
		{
			unsafe
			{
				Delegates.glClipPlane((int)plane, (Double*)equation);
			}
		}

		public static void ClipPlane(int plane, Double[] equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = equation)
				{
					Delegates.glClipPlane((int)plane, (Double*)equation_ptr);
				}
			}
		}

		public static void ClipPlane(int plane, ref Double equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = &equation)
				{
					Delegates.glClipPlane((int)plane, (Double*)equation_ptr);
				}
			}
		}

		public static void ColorMaterial(int face, int mode)
		{
			Delegates.glColorMaterial((int)face, (int)mode);
		}

		public static void CullFace(int mode)
		{
			Delegates.glCullFace((int)mode);
		}

		public static void Fogf(GL pname, Single param)
		{
			Delegates.glFogf((int)pname, (Single)param);
		}

		public static void Fogfv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFogfv((int)pname, (Single*)@params);
			}
		}

		public static void Fogfv(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glFogfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Fogfv(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glFogfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Fogi(GL pname, Int32 param)
		{
			Delegates.glFogi((int)pname, (Int32)param);
		}

		public static void Fogiv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFogiv((int)pname, (Int32*)@params);
			}
		}

		public static void Fogiv(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glFogiv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void Fogiv(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glFogiv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FrontFace(int mode)
		{
			Delegates.glFrontFace((int)mode);
		}

		public static void Hint(GL target, int mode)
		{
			Delegates.glHint((int)target, (int)mode);
		}

		public static void Lightf(int light, GL pname, Single param)
		{
			Delegates.glLightf((int)light, (int)pname, (Single)param);
		}

		public static void Lightfv(int light, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glLightfv((int)light, (int)pname, (Single*)@params);
			}
		}

		public static void Lightfv(int light, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glLightfv((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Lightfv(int light, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glLightfv((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Lighti(int light, GL pname, Int32 param)
		{
			Delegates.glLighti((int)light, (int)pname, (Int32)param);
		}

		public static void Lightiv(int light, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glLightiv((int)light, (int)pname, (Int32*)@params);
			}
		}

		public static void Lightiv(int light, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glLightiv((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void Lightiv(int light, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glLightiv((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void LightModelf(GL pname, Single param)
		{
			Delegates.glLightModelf((int)pname, (Single)param);
		}

		public static void LightModelfv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glLightModelfv((int)pname, (Single*)@params);
			}
		}

		public static void LightModelfv(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glLightModelfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void LightModelfv(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glLightModelfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void LightModeli(GL pname, Int32 param)
		{
			Delegates.glLightModeli((int)pname, (Int32)param);
		}

		public static void LightModeliv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glLightModeliv((int)pname, (Int32*)@params);
			}
		}

		public static void LightModeliv(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glLightModeliv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void LightModeliv(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glLightModeliv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void LineStipple(Int32 factor, UInt16 pattern)
		{
			unsafe
			{
				Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
			}
		}

		public static void LineStipple(Int32 factor, Int16 pattern)
		{
			unsafe
			{
				Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
			}
		}

		public static void LineWidth(Single width)
		{
			Delegates.glLineWidth((Single)width);
		}

		public static void Materialf(int face, GL pname, Single param)
		{
			Delegates.glMaterialf((int)face, (int)pname, (Single)param);
		}

		public static void Materialfv(int face, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glMaterialfv((int)face, (int)pname, (Single*)@params);
			}
		}

		public static void Materialfv(int face, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Materialfv(int face, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void Materiali(int face, GL pname, Int32 param)
		{
			Delegates.glMateriali((int)face, (int)pname, (Int32)param);
		}

		public static void Materialiv(int face, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glMaterialiv((int)face, (int)pname, (Int32*)@params);
			}
		}

		public static void Materialiv(int face, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void Materialiv(int face, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PointSize(Single size)
		{
			Delegates.glPointSize((Single)size);
		}

		public static void PolygonMode(int face, int mode)
		{
			Delegates.glPolygonMode((int)face, (int)mode);
		}

		public static void PolygonStipple(IntPtr mask)
		{
			unsafe
			{
				Delegates.glPolygonStipple((Byte*)mask);
			}
		}

		public static void PolygonStipple(Byte[] mask)
		{
			unsafe
			{
				fixed (Byte* mask_ptr = mask)
				{
					Delegates.glPolygonStipple((Byte*)mask_ptr);
				}
			}
		}

		public static void PolygonStipple(ref Byte mask)
		{
			unsafe
			{
				fixed (Byte* mask_ptr = &mask)
				{
					Delegates.glPolygonStipple((Byte*)mask_ptr);
				}
			}
		}

		public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void ShadeModel(int mode)
		{
			Delegates.glShadeModel((int)mode);
		}

		public static void TexParameterf(GL target, GL pname, Single param)
		{
			Delegates.glTexParameterf((int)target, (int)pname, (Single)param);
		}

		public static void TexParameterfv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void TexParameterfv(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexParameterfv(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexParameteri(GL target, GL pname, GL param)
		{
			Delegates.glTexParameteri((int)target, (int)pname, (Int32)param);
		}

		public static void TexParameteri(GL target, GL pname, Int32 param)
		{
			Delegates.glTexParameteri((int)target, (int)pname, (Int32)param);
		}

		public static void TexParameteriv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void TexParameteriv(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexParameteriv(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexImage1D(GL target, Int32 level, GL internalformat, Int32 width, Int32 border, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexImage1D(GL target, Int32 level, GL internalformat, Int32 width, Int32 border, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexImage2D(GL target, Int32 level, GL internalformat, Int32 width, Int32 height, Int32 border, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexImage2D(GL target, Int32 level, GL internalformat, Int32 width, Int32 height, Int32 border, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexEnvf(GL target, GL pname, Single param)
		{
			Delegates.glTexEnvf((int)target, (int)pname, (Single)param);
		}

		public static void TexEnvfv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexEnvfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void TexEnvfv(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexEnvfv(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexEnvi(GL target, GL pname, Int32 param)
		{
			Delegates.glTexEnvi((int)target, (int)pname, (Int32)param);
		}

		public static void TexEnviv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexEnviv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void TexEnviv(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexEnviv(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexGend(int coord, GL pname, Double param)
		{
			Delegates.glTexGend((int)coord, (int)pname, (Double)param);
		}

		public static void TexGendv(int coord, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexGendv((int)coord, (int)pname, (Double*)@params);
			}
		}

		public static void TexGendv(int coord, GL pname, Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void TexGendv(int coord, GL pname, ref Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void TexGenf(int coord, GL pname, Single param)
		{
			Delegates.glTexGenf((int)coord, (int)pname, (Single)param);
		}

		public static void TexGenfv(int coord, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexGenfv((int)coord, (int)pname, (Single*)@params);
			}
		}

		public static void TexGenfv(int coord, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexGenfv(int coord, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void TexGeni(int coord, GL pname, Int32 param)
		{
			Delegates.glTexGeni((int)coord, (int)pname, (Int32)param);
		}

		public static void TexGeniv(int coord, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexGeniv((int)coord, (int)pname, (Int32*)@params);
			}
		}

		public static void TexGeniv(int coord, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexGeniv(int coord, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FeedbackBuffer(Int32 size, GL type, [Out] IntPtr buffer)
		{
			unsafe
			{
				Delegates.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer);
			}
		}

		public static void FeedbackBuffer(Int32 size, GL type, [Out] Single[] buffer)
		{
			unsafe
			{
				fixed (Single* buffer_ptr = buffer)
				{
					Delegates.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer_ptr);
				}
			}
		}

		public static void FeedbackBuffer(Int32 size, GL type, [Out] out Single buffer)
		{
			unsafe
			{
				fixed (Single* buffer_ptr = &buffer)
				{
					Delegates.glFeedbackBuffer((Int32)size, (int)type, (Single*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}

		public static void SelectBuffer(Int32 size, [Out] IntPtr buffer)
		{
			unsafe
			{
				Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
			}
		}

		public static void SelectBuffer(Int32 size, [Out] UInt32[] buffer)
		{
			unsafe
			{
				fixed (UInt32* buffer_ptr = buffer)
				{
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
				}
			}
		}

		public static void SelectBuffer(Int32 size, [Out] Int32[] buffer)
		{
			unsafe
			{
				fixed (Int32* buffer_ptr = buffer)
				{
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
				}
			}
		}

		public static void SelectBuffer(Int32 size, [Out] out UInt32 buffer)
		{
			unsafe
			{
				fixed (UInt32* buffer_ptr = &buffer)
				{
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}

		public static void SelectBuffer(Int32 size, [Out] out Int32 buffer)
		{
			unsafe
			{
				fixed (Int32* buffer_ptr = &buffer)
				{
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}

		public static Int32 RenderMode(int mode)
		{
			return Delegates.glRenderMode((int)mode);
		}

		public static void InitNames()
		{
			Delegates.glInitNames();
		}

		public static void LoadName(UInt32 name)
		{
			Delegates.glLoadName((UInt32)name);
		}

		public static void LoadName(Int32 name)
		{
			Delegates.glLoadName((UInt32)name);
		}

		public static void PassThrough(Single token)
		{
			Delegates.glPassThrough((Single)token);
		}

		public static void PopName()
		{
			Delegates.glPopName();
		}

		public static void PushName(UInt32 name)
		{
			Delegates.glPushName((UInt32)name);
		}

		public static void PushName(Int32 name)
		{
			Delegates.glPushName((UInt32)name);
		}

		public static void DrawBuffer(GL mode)
		{
			Delegates.glDrawBuffer((int)mode);
		}

		public static void Clear(GL mask)
		{
			Delegates.glClear((int)mask);
		}

		public static void ClearAccum(Single red, Single green, Single blue, Single alpha)
		{
			Delegates.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		public static void ClearIndex(Single c)
		{
			Delegates.glClearIndex((Single)c);
		}

		public static void ClearColor(Single red, Single green, Single blue, Single alpha)
		{
			Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		public static void ClearStencil(Int32 s)
		{
			Delegates.glClearStencil((Int32)s);
		}

		public static void ClearDepth(Double depth)
		{
			Delegates.glClearDepth((Double)depth);
		}

		public static void StencilMask(UInt32 mask)
		{
			Delegates.glStencilMask((UInt32)mask);
		}

		public static void StencilMask(Int32 mask)
		{
			Delegates.glStencilMask((UInt32)mask);
		}

		public static void ColorMask(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glColorMask((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
		}

		public static void DepthMask(Int32 flag)
		{
			Delegates.glDepthMask((Int32)flag);
		}

		public static void IndexMask(UInt32 mask)
		{
			Delegates.glIndexMask((UInt32)mask);
		}

		public static void IndexMask(Int32 mask)
		{
			Delegates.glIndexMask((UInt32)mask);
		}

		public static void Accum(GL op, Single value)
		{
			Delegates.glAccum((int)op, (Single)value);
		}

		public static void Disable(GL cap)
		{
			Delegates.glDisable((int)cap);
		}

		public static void Enable(GL cap)
		{
			Delegates.glEnable((int)cap);
		}

		public static void Finish()
		{
			Delegates.glFinish();
		}

		public static void Flush()
		{
			Delegates.glFlush();
		}

		public static void PopAttrib()
		{
			Delegates.glPopAttrib();
		}

		public static void PushAttrib(int mask)
		{
			Delegates.glPushAttrib((int)mask);
		}

		public static void Map1d(GL target, Double u1, Double u2, Int32 stride, Int32 order, IntPtr points)
		{
			unsafe
			{
				Delegates.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
			}
		}

		public static void Map1d(GL target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
		{
			unsafe
			{
				fixed (Double* points_ptr = points)
				{
					Delegates.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
				}
			}
		}

		public static void Map1d(GL target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
		{
			unsafe
			{
				fixed (Double* points_ptr = &points)
				{
					Delegates.glMap1d((int)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
				}
			}
		}

		public static void Map1f(GL target, Single u1, Single u2, Int32 stride, Int32 order, IntPtr points)
		{
			unsafe
			{
				Delegates.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
			}
		}

		public static void Map1f(GL target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
				}
			}
		}

		public static void Map1f(GL target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glMap1f((int)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
				}
			}
		}

		public static void Map2d(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, IntPtr points)
		{
			unsafe
			{
				Delegates.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
			}
		}

		public static void Map2d(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
		{
			unsafe
			{
				fixed (Double* points_ptr = points)
				{
					Delegates.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
				}
			}
		}

		public static void Map2d(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
		{
			unsafe
			{
				fixed (Double* points_ptr = &points)
				{
					Delegates.glMap2d((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
				}
			}
		}

		public static void Map2f(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, IntPtr points)
		{
			unsafe
			{
				Delegates.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
			}
		}

		public static void Map2f(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
				}
			}
		}

		public static void Map2f(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glMap2f((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
				}
			}
		}

		public static void MapGrid1d(Int32 un, Double u1, Double u2)
		{
			Delegates.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
		}

		public static void MapGrid1f(Int32 un, Single u1, Single u2)
		{
			Delegates.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
		}

		public static void MapGrid2d(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2)
		{
			Delegates.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
		}

		public static void MapGrid2f(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2)
		{
			Delegates.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
		}

		public static void EvalCoord1d(Double u)
		{
			Delegates.glEvalCoord1d((Double)u);
		}

		public static void EvalCoord1dv(IntPtr u)
		{
			unsafe
			{
				Delegates.glEvalCoord1dv((Double*)u);
			}
		}

		public static void EvalCoord1dv(Double[] u)
		{
			unsafe
			{
				fixed (Double* u_ptr = u)
				{
					Delegates.glEvalCoord1dv((Double*)u_ptr);
				}
			}
		}

		public static void EvalCoord1dv(ref Double u)
		{
			unsafe
			{
				fixed (Double* u_ptr = &u)
				{
					Delegates.glEvalCoord1dv((Double*)u_ptr);
				}
			}
		}

		public static void EvalCoord1f(Single u)
		{
			Delegates.glEvalCoord1f((Single)u);
		}

		public static void EvalCoord1fv(IntPtr u)
		{
			unsafe
			{
				Delegates.glEvalCoord1fv((Single*)u);
			}
		}

		public static void EvalCoord1fv(Single[] u)
		{
			unsafe
			{
				fixed (Single* u_ptr = u)
				{
					Delegates.glEvalCoord1fv((Single*)u_ptr);
				}
			}
		}

		public static void EvalCoord1fv(ref Single u)
		{
			unsafe
			{
				fixed (Single* u_ptr = &u)
				{
					Delegates.glEvalCoord1fv((Single*)u_ptr);
				}
			}
		}

		public static void EvalCoord2d(Double u, Double v)
		{
			Delegates.glEvalCoord2d((Double)u, (Double)v);
		}

		public static void EvalCoord2dv(IntPtr u)
		{
			unsafe
			{
				Delegates.glEvalCoord2dv((Double*)u);
			}
		}

		public static void EvalCoord2dv(Double[] u)
		{
			unsafe
			{
				fixed (Double* u_ptr = u)
				{
					Delegates.glEvalCoord2dv((Double*)u_ptr);
				}
			}
		}

		public static void EvalCoord2dv(ref Double u)
		{
			unsafe
			{
				fixed (Double* u_ptr = &u)
				{
					Delegates.glEvalCoord2dv((Double*)u_ptr);
				}
			}
		}

		public static void EvalCoord2f(Single u, Single v)
		{
			Delegates.glEvalCoord2f((Single)u, (Single)v);
		}

		public static void EvalCoord2fv(IntPtr u)
		{
			unsafe
			{
				Delegates.glEvalCoord2fv((Single*)u);
			}
		}

		public static void EvalCoord2fv(Single[] u)
		{
			unsafe
			{
				fixed (Single* u_ptr = u)
				{
					Delegates.glEvalCoord2fv((Single*)u_ptr);
				}
			}
		}

		public static void EvalCoord2fv(ref Single u)
		{
			unsafe
			{
				fixed (Single* u_ptr = &u)
				{
					Delegates.glEvalCoord2fv((Single*)u_ptr);
				}
			}
		}

		public static void EvalMesh1(GL mode, Int32 i1, Int32 i2)
		{
			Delegates.glEvalMesh1((int)mode, (Int32)i1, (Int32)i2);
		}

		public static void EvalPoint1(Int32 i)
		{
			Delegates.glEvalPoint1((Int32)i);
		}

		public static void EvalMesh2(GL mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
		{
			Delegates.glEvalMesh2((int)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
		}

		public static void EvalPoint2(Int32 i, Int32 j)
		{
			Delegates.glEvalPoint2((Int32)i, (Int32)j);
		}

		public static void AlphaFunc(GL func, Single @ref)
		{
			Delegates.glAlphaFunc((int)func, (Single)@ref);
		}

		public static void BlendFunc(GL sfactor, GL dfactor)
		{
			Delegates.glBlendFunc((int)sfactor, (int)dfactor);
		}

		public static void LogicOp(int opcode)
		{
			Delegates.glLogicOp((int)opcode);
		}

		public static void StencilFunc(GL func, Int32 @ref, UInt32 mask)
		{
			Delegates.glStencilFunc((int)func, (Int32)@ref, (UInt32)mask);
		}

		public static void StencilFunc(GL func, Int32 @ref, Int32 mask)
		{
			Delegates.glStencilFunc((int)func, (Int32)@ref, (UInt32)mask);
		}

		public static void StencilOp(int fail, int zfail, int zpass)
		{
			Delegates.glStencilOp((int)fail, (int)zfail, (int)zpass);
		}

		public static void DepthFunc(GL func)
		{
			Delegates.glDepthFunc((int)func);
		}

		public static void PixelZoom(Single xfactor, Single yfactor)
		{
			Delegates.glPixelZoom((Single)xfactor, (Single)yfactor);
		}

		public static void PixelTransferf(GL pname, Single param)
		{
			Delegates.glPixelTransferf((int)pname, (Single)param);
		}

		public static void PixelTransferi(GL pname, Int32 param)
		{
			Delegates.glPixelTransferi((int)pname, (Int32)param);
		}

		public static void PixelStoref(GL pname, Single param)
		{
			Delegates.glPixelStoref((int)pname, (Single)param);
		}

		public static void PixelStorei(GL pname, Int32 param)
		{
			Delegates.glPixelStorei((int)pname, (Int32)param);
		}

		public static void PixelMapfv(int map, Int32 mapsize, IntPtr values)
		{
			unsafe
			{
				Delegates.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values);
			}
		}

		public static void PixelMapfv(int map, Int32 mapsize, Single[] values)
		{
			unsafe
			{
				fixed (Single* values_ptr = values)
				{
					Delegates.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values_ptr);
				}
			}
		}

		public static void PixelMapfv(int map, Int32 mapsize, ref Single values)
		{
			unsafe
			{
				fixed (Single* values_ptr = &values)
				{
					Delegates.glPixelMapfv((int)map, (Int32)mapsize, (Single*)values_ptr);
				}
			}
		}

		public static void PixelMapuiv(int map, Int32 mapsize, IntPtr values)
		{
			unsafe
			{
				Delegates.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values);
			}
		}

		public static void PixelMapuiv(int map, Int32 mapsize, UInt32[] values)
		{
			unsafe
			{
				fixed (UInt32* values_ptr = values)
				{
					Delegates.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}

		public static void PixelMapuiv(int map, Int32 mapsize, Int32[] values)
		{
			unsafe
			{
				fixed (Int32* values_ptr = values)
				{
					Delegates.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}

		public static void PixelMapuiv(int map, Int32 mapsize, ref UInt32 values)
		{
			unsafe
			{
				fixed (UInt32* values_ptr = &values)
				{
					Delegates.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}

		public static void PixelMapuiv(int map, Int32 mapsize, ref Int32 values)
		{
			unsafe
			{
				fixed (Int32* values_ptr = &values)
				{
					Delegates.glPixelMapuiv((int)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}

		public static void PixelMapusv(int map, Int32 mapsize, IntPtr values)
		{
			unsafe
			{
				Delegates.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values);
			}
		}

		public static void PixelMapusv(int map, Int32 mapsize, UInt16[] values)
		{
			unsafe
			{
				fixed (UInt16* values_ptr = values)
				{
					Delegates.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}

		public static void PixelMapusv(int map, Int32 mapsize, Int16[] values)
		{
			unsafe
			{
				fixed (Int16* values_ptr = values)
				{
					Delegates.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}

		public static void PixelMapusv(int map, Int32 mapsize, ref UInt16 values)
		{
			unsafe
			{
				fixed (UInt16* values_ptr = &values)
				{
					Delegates.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}

		public static void PixelMapusv(int map, Int32 mapsize, ref Int16 values)
		{
			unsafe
			{
				fixed (Int16* values_ptr = &values)
				{
					Delegates.glPixelMapusv((int)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}

		public static void ReadBuffer(GL mode)
		{
			Delegates.glReadBuffer((int)mode);
		}

		public static void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, GL type)
		{
			Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)type);
		}

		public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, GL format, GL type, [Out] IntPtr pixels)
		{
			unsafe
			{
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void DrawPixels(Int32 width, Int32 height, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glDrawPixels((Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void DrawPixels(Int32 width, Int32 height, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawPixels((Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void GetBooleanv(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetBooleanv((int)pname, (Int32*)@params);
			}
		}

		public static void GetBooleanv(GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetBooleanv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetBooleanv(GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetBooleanv((int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetClipPlane(int plane, [Out] IntPtr equation)
		{
			unsafe
			{
				Delegates.glGetClipPlane((int)plane, (Double*)equation);
			}
		}

		public static void GetClipPlane(int plane, [Out] Double[] equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = equation)
				{
					Delegates.glGetClipPlane((int)plane, (Double*)equation_ptr);
				}
			}
		}

		public static void GetClipPlane(int plane, [Out] out Double equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = &equation)
				{
					Delegates.glGetClipPlane((int)plane, (Double*)equation_ptr);
					equation = *equation_ptr;
				}
			}
		}

		public static void GetDoublev(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetDoublev((int)pname, (Double*)@params);
			}
		}

		public static void GetDoublev(GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetDoublev((int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetDoublev(GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetDoublev((int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static int GetError()
		{
			return Delegates.glGetError();
		}

		public static void GetFloatv(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFloatv((int)pname, (Single*)@params);
			}
		}

		public static void GetFloatv(GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetFloatv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetFloatv(GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetFloatv((int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetIntegerv(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetIntegerv((int)pname, (Int32*)@params);
			}
		}

		public static void GetIntegerv(GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetIntegerv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetIntegerv(GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetIntegerv((int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetLightfv(int light, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetLightfv((int)light, (int)pname, (Single*)@params);
			}
		}

		public static void GetLightfv(int light, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetLightfv((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetLightfv(int light, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetLightfv((int)light, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetLightiv(int light, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetLightiv((int)light, (int)pname, (Int32*)@params);
			}
		}

		public static void GetLightiv(int light, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetLightiv((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetLightiv(int light, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetLightiv((int)light, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapdv(GL target, int query, [Out] IntPtr v)
		{
			unsafe
			{
				Delegates.glGetMapdv((int)target, (int)query, (Double*)v);
			}
		}

		public static void GetMapdv(GL target, int query, [Out] Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glGetMapdv((int)target, (int)query, (Double*)v_ptr);
				}
			}
		}

		public static void GetMapdv(GL target, int query, [Out] out Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glGetMapdv((int)target, (int)query, (Double*)v_ptr);
					v = *v_ptr;
				}
			}
		}

		public static void GetMapfv(GL target, int query, [Out] IntPtr v)
		{
			unsafe
			{
				Delegates.glGetMapfv((int)target, (int)query, (Single*)v);
			}
		}

		public static void GetMapfv(GL target, int query, [Out] Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glGetMapfv((int)target, (int)query, (Single*)v_ptr);
				}
			}
		}

		public static void GetMapfv(GL target, int query, [Out] out Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glGetMapfv((int)target, (int)query, (Single*)v_ptr);
					v = *v_ptr;
				}
			}
		}

		public static void GetMapiv(GL target, int query, [Out] IntPtr v)
		{
			unsafe
			{
				Delegates.glGetMapiv((int)target, (int)query, (Int32*)v);
			}
		}

		public static void GetMapiv(GL target, int query, [Out] Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glGetMapiv((int)target, (int)query, (Int32*)v_ptr);
				}
			}
		}

		public static void GetMapiv(GL target, int query, [Out] out Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glGetMapiv((int)target, (int)query, (Int32*)v_ptr);
					v = *v_ptr;
				}
			}
		}

		public static void GetMaterialfv(int face, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMaterialfv((int)face, (int)pname, (Single*)@params);
			}
		}

		public static void GetMaterialfv(int face, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMaterialfv(int face, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMaterialfv((int)face, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMaterialiv(int face, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMaterialiv((int)face, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMaterialiv(int face, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMaterialiv(int face, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMaterialiv((int)face, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetPixelMapfv(int map, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetPixelMapfv((int)map, (Single*)values);
			}
		}

		public static void GetPixelMapfv(int map, [Out] Single[] values)
		{
			unsafe
			{
				fixed (Single* values_ptr = values)
				{
					Delegates.glGetPixelMapfv((int)map, (Single*)values_ptr);
				}
			}
		}

		public static void GetPixelMapfv(int map, [Out] out Single values)
		{
			unsafe
			{
				fixed (Single* values_ptr = &values)
				{
					Delegates.glGetPixelMapfv((int)map, (Single*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		public static void GetPixelMapuiv(int map, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetPixelMapuiv((int)map, (UInt32*)values);
			}
		}

		public static void GetPixelMapuiv(int map, [Out] UInt32[] values)
		{
			unsafe
			{
				fixed (UInt32* values_ptr = values)
				{
					Delegates.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
				}
			}
		}

		public static void GetPixelMapuiv(int map, [Out] Int32[] values)
		{
			unsafe
			{
				fixed (Int32* values_ptr = values)
				{
					Delegates.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
				}
			}
		}

		public static void GetPixelMapuiv(int map, [Out] out UInt32 values)
		{
			unsafe
			{
				fixed (UInt32* values_ptr = &values)
				{
					Delegates.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		public static void GetPixelMapuiv(int map, [Out] out Int32 values)
		{
			unsafe
			{
				fixed (Int32* values_ptr = &values)
				{
					Delegates.glGetPixelMapuiv((int)map, (UInt32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		public static void GetPixelMapusv(int map, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetPixelMapusv((int)map, (UInt16*)values);
			}
		}

		public static void GetPixelMapusv(int map, [Out] UInt16[] values)
		{
			unsafe
			{
				fixed (UInt16* values_ptr = values)
				{
					Delegates.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
				}
			}
		}

		public static void GetPixelMapusv(int map, [Out] Int16[] values)
		{
			unsafe
			{
				fixed (Int16* values_ptr = values)
				{
					Delegates.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
				}
			}
		}

		public static void GetPixelMapusv(int map, [Out] out UInt16 values)
		{
			unsafe
			{
				fixed (UInt16* values_ptr = &values)
				{
					Delegates.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		public static void GetPixelMapusv(int map, [Out] out Int16 values)
		{
			unsafe
			{
				fixed (Int16* values_ptr = &values)
				{
					Delegates.glGetPixelMapusv((int)map, (UInt16*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		public static void GetPolygonStipple([Out] IntPtr mask)
		{
			unsafe
			{
				Delegates.glGetPolygonStipple((Byte*)mask);
			}
		}

		public static void GetPolygonStipple([Out] Byte[] mask)
		{
			unsafe
			{
				fixed (Byte* mask_ptr = mask)
				{
					Delegates.glGetPolygonStipple((Byte*)mask_ptr);
				}
			}
		}

		public static void GetPolygonStipple([Out] out Byte mask)
		{
			unsafe
			{
				fixed (Byte* mask_ptr = &mask)
				{
					Delegates.glGetPolygonStipple((Byte*)mask_ptr);
					mask = *mask_ptr;
				}
			}
		}

		public static string GetString(GL name)
		{
			unsafe
			{
				return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetString((int)name));
			}
		}

		public static void GetTexEnvfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexEnvfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetTexEnvfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetTexEnvfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetTexEnvfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexEnviv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexEnviv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTexEnviv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTexEnviv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexEnviv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexGendv(int coord, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexGendv((int)coord, (int)pname, (Double*)@params);
			}
		}

		public static void GetTexGendv(int coord, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetTexGendv(int coord, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetTexGendv((int)coord, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexGenfv(int coord, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexGenfv((int)coord, (int)pname, (Single*)@params);
			}
		}

		public static void GetTexGenfv(int coord, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetTexGenfv(int coord, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetTexGenfv((int)coord, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexGeniv(int coord, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTexGeniv(int coord, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTexGeniv(int coord, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexGeniv((int)coord, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexImage(GL target, Int32 level, GL format, GL type, [Out] IntPtr pixels)
		{
			unsafe
			{
				Delegates.glGetTexImage((int)target, (Int32)level, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void GetTexImage(GL target, Int32 level, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glGetTexImage((int)target, (Int32)level, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void GetTexParameterfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetTexParameterfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetTexParameterfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetTexParameterfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTexParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTexParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexLevelParameterfv(GL target, Int32 level, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params);
			}
		}

		public static void GetTexLevelParameterfv(GL target, Int32 level, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetTexLevelParameterfv(GL target, Int32 level, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetTexLevelParameterfv((int)target, (Int32)level, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexLevelParameteriv(GL target, Int32 level, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTexLevelParameteriv(GL target, Int32 level, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTexLevelParameteriv(GL target, Int32 level, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexLevelParameteriv((int)target, (Int32)level, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static Int32 IsEnabled(int cap)
		{
			return Delegates.glIsEnabled((int)cap);
		}

		public static Int32 IsList(UInt32 list)
		{
			return Delegates.glIsList((UInt32)list);
		}

		public static Int32 IsList(Int32 list)
		{
			return Delegates.glIsList((UInt32)list);
		}

		public static void DepthRange(Double near, Double far)
		{
			Delegates.glDepthRange((Double)near, (Double)far);
		}

		public static void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
		{
			Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
		}

		public static void LoadIdentity()
		{
			Delegates.glLoadIdentity();
		}

		public static void LoadMatrixf(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadMatrixf((Single*)m);
			}
		}

		public static void LoadMatrixf(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glLoadMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void LoadMatrixf(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glLoadMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void LoadMatrixd(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadMatrixd((Double*)m);
			}
		}

		public static void LoadMatrixd(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glLoadMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void LoadMatrixd(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glLoadMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void MatrixMode(GL mode)
		{
			Delegates.glMatrixMode((int)mode);
		}

		public static void MultMatrixf(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultMatrixf((Single*)m);
			}
		}

		public static void MultMatrixf(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glMultMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void MultMatrixf(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glMultMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void MultMatrixd(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultMatrixd((Double*)m);
			}
		}

		public static void MultMatrixd(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glMultMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void MultMatrixd(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glMultMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
		{
			Delegates.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
		}

		public static void PopMatrix()
		{
			Delegates.glPopMatrix();
		}

		public static void PushMatrix()
		{
			Delegates.glPushMatrix();
		}

		public static void Rotated(Double angle, Double x, Double y, Double z)
		{
			Delegates.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
		}

		public static void Rotatef(Single angle, Single x, Single y, Single z)
		{
			Delegates.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
		}

		public static void Scaled(Double x, Double y, Double z)
		{
			Delegates.glScaled((Double)x, (Double)y, (Double)z);
		}

		public static void Scalef(Single x, Single y, Single z)
		{
			Delegates.glScalef((Single)x, (Single)y, (Single)z);
		}

		public static void Translated(Double x, Double y, Double z)
		{
			Delegates.glTranslated((Double)x, (Double)y, (Double)z);
		}

		public static void Translatef(Single x, Single y, Single z)
		{
			Delegates.glTranslatef((Single)x, (Single)y, (Single)z);
		}

		public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void ArrayElement(Int32 i)
		{
			Delegates.glArrayElement((Int32)i);
		}

		public static void ColorPointer(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void ColorPointer(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void DisableClientState(GL array)
		{
			Delegates.glDisableClientState((int)array);
		}

		public static void DrawArrays(GL mode, Int32 first, Int32 count)
		{
			Delegates.glDrawArrays((int)mode, (Int32)first, (Int32)count);
		}

		public static void DrawElements(GL mode, Int32 count, GL type, IntPtr indices)
		{
			unsafe
			{
				Delegates.glDrawElements((int)mode, (Int32)count, (int)type, (IntPtr)indices);
			}
		}

		public static void DrawElements(GL mode, Int32 count, GL type, [In, Out] object indices)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawElements((int)mode, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void EdgeFlagPointer(Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
			}
		}

		public static void EdgeFlagPointer(Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void EnableClientState(GL array)
		{
			Delegates.glEnableClientState((int)array);
		}

		public static void GetPointerv(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetPointerv((int)pname, (IntPtr)@params);
			}
		}

		public static void GetPointerv(GL pname, [In, Out] object @params)
		{
			unsafe
			{
				GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
				try
				{
					Delegates.glGetPointerv((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@params_ptr.Free();
				}
			}
		}

		public static void IndexPointer(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glIndexPointer((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void IndexPointer(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glIndexPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void InterleavedArrays(int format, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glInterleavedArrays((int)format, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void InterleavedArrays(int format, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glInterleavedArrays((int)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void NormalPointer(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glNormalPointer((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void NormalPointer(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glNormalPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TexCoordPointer(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glTexCoordPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void TexCoordPointer(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glTexCoordPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexPointer(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexPointer(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void PolygonOffset(Single factor, Single units)
		{
			Delegates.glPolygonOffset((Single)factor, (Single)units);
		}

		public static void CopyTexImage1D(GL target, Int32 level, GL internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
		{
			Delegates.glCopyTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
		}

		public static void CopyTexImage2D(GL target, Int32 level, GL internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
		{
			Delegates.glCopyTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
		}

		public static void CopyTexSubImage1D(GL target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void CopyTexSubImage2D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void TexSubImage1D(GL target, Int32 level, Int32 xoffset, Int32 width, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage1D(GL target, Int32 level, Int32 xoffset, Int32 width, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage2D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage2D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, IntPtr textures, [Out] IntPtr residences)
		{
			unsafe
			{
				return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (Int32*)residences);
			}
		}

		public static Int32 AreTexturesResident(Int32 n, IntPtr textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, IntPtr textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, UInt32[] textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, Int32[] textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, UInt32[] textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, Int32[] textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, UInt32[] textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, Int32[] textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref UInt32 textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref Int32 textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref UInt32 textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref Int32 textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref UInt32 textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResident(Int32 n, ref Int32 textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static void BindTexture(GL target, UInt32 texture)
		{
			Delegates.glBindTexture((int)target, (UInt32)texture);
		}

		public static void BindTexture(GL target, Int32 texture)
		{
			Delegates.glBindTexture((int)target, (UInt32)texture);
		}

		public static void DeleteTextures(Int32 n, IntPtr textures)
		{
			unsafe
			{
				Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
			}
		}

		public static void DeleteTextures(Int32 n, UInt32[] textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTextures(Int32 n, Int32[] textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTextures(Int32 n, ref UInt32 textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTextures(Int32 n, ref Int32 textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTextures(Int32 n, [Out] IntPtr textures)
		{
			unsafe
			{
				Delegates.glGenTextures((Int32)n, (UInt32*)textures);
			}
		}

		public static void GenTextures(Int32 n, [Out] UInt32[] textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTextures(Int32 n, [Out] Int32[] textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTextures(Int32 n, [Out] out UInt32 textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		public static void GenTextures(Int32 n, [Out] out Int32 textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		public static Int32 IsTexture(UInt32 texture)
		{
			return Delegates.glIsTexture((UInt32)texture);
		}

		public static Int32 IsTexture(Int32 texture)
		{
			return Delegates.glIsTexture((UInt32)texture);
		}

		public static void PrioritizeTextures(Int32 n, IntPtr textures, IntPtr priorities)
		{
			unsafe
			{
				Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
			}
		}

		public static void PrioritizeTextures(Int32 n, IntPtr textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, IntPtr textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, UInt32[] textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, Int32[] textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, UInt32[] textures, ref Single priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, Int32[] textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref UInt32 textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref Int32 textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref UInt32 textures, Single[] priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref Int32 textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void Indexub(Byte c)
		{
			Delegates.glIndexub((Byte)c);
		}

		public static void Indexubv(IntPtr c)
		{
			unsafe
			{
				Delegates.glIndexubv((Byte*)c);
			}
		}

		public static void Indexubv(Byte[] c)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				{
					Delegates.glIndexubv((Byte*)c_ptr);
				}
			}
		}

		public static void Indexubv(ref Byte c)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glIndexubv((Byte*)c_ptr);
				}
			}
		}

		public static void PopClientAttrib()
		{
			Delegates.glPopClientAttrib();
		}

		public static void PushClientAttrib(int mask)
		{
			Delegates.glPushClientAttrib((int)mask);
		}

		public static void BlendColor(Single red, Single green, Single blue, Single alpha)
		{
			Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		public static void BlendEquation(int mode)
		{
			Delegates.glBlendEquation((int)mode);
		}

		public static void DrawRangeElements(GL mode, UInt32 start, UInt32 end, Int32 count, GL type, IntPtr indices)
		{
			unsafe
			{
				Delegates.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
			}
		}

		public static void DrawRangeElements(GL mode, Int32 start, Int32 end, Int32 count, GL type, IntPtr indices)
		{
			unsafe
			{
				Delegates.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
			}
		}

		public static void DrawRangeElements(GL mode, UInt32 start, UInt32 end, Int32 count, GL type, [In, Out] object indices)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void DrawRangeElements(GL mode, Int32 start, Int32 end, Int32 count, GL type, [In, Out] object indices)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawRangeElements((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void ColorTable(GL target, int internalformat, Int32 width, int format, GL type, IntPtr table)
		{
			unsafe
			{
				Delegates.glColorTable((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table);
			}
		}

		public static void ColorTable(GL target, int internalformat, Int32 width, int format, GL type, [In, Out] object table)
		{
			unsafe
			{
				GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
				try
				{
					Delegates.glColorTable((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				}
				finally
				{
					table_ptr.Free();
				}
			}
		}

		public static void ColorTableParameterfv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glColorTableParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void ColorTableParameterfv(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameterfv(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameteriv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void ColorTableParameteriv(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameteriv(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CopyColorTable(GL target, int internalformat, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyColorTable((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void GetColorTable(GL target, int format, GL type, [Out] IntPtr table)
		{
			unsafe
			{
				Delegates.glGetColorTable((int)target, (int)format, (int)type, (IntPtr)table);
			}
		}

		public static void GetColorTable(GL target, int format, GL type, [In, Out] object table)
		{
			unsafe
			{
				GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
				try
				{
					Delegates.glGetColorTable((int)target, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				}
				finally
				{
					table_ptr.Free();
				}
			}
		}

		public static void GetColorTableParameterfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetColorTableParameterfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameterfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameterfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetColorTableParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetColorTableParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ColorSubTable(GL target, Int32 start, Int32 count, int format, GL type, IntPtr data)
		{
			unsafe
			{
				Delegates.glColorSubTable((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data);
			}
		}

		public static void ColorSubTable(GL target, Int32 start, Int32 count, int format, GL type, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glColorSubTable((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CopyColorSubTable(GL target, Int32 start, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyColorSubTable((int)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void ConvolutionFilter1D(GL target, int internalformat, Int32 width, int format, GL type, IntPtr image)
		{
			unsafe
			{
				Delegates.glConvolutionFilter1D((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void ConvolutionFilter1D(GL target, int internalformat, Int32 width, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glConvolutionFilter1D((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void ConvolutionFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr image)
		{
			unsafe
			{
				Delegates.glConvolutionFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void ConvolutionFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glConvolutionFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void ConvolutionParameterf(GL target, GL pname, Single @params)
		{
			Delegates.glConvolutionParameterf((int)target, (int)pname, (Single)@params);
		}

		public static void ConvolutionParameterfv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void ConvolutionParameterfv(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameterfv(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameteri(GL target, GL pname, Int32 @params)
		{
			Delegates.glConvolutionParameteri((int)target, (int)pname, (Int32)@params);
		}

		public static void ConvolutionParameteriv(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void ConvolutionParameteriv(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameteriv(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CopyConvolutionFilter1D(GL target, int internalformat, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyConvolutionFilter1D((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void CopyConvolutionFilter2D(GL target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyConvolutionFilter2D((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void GetConvolutionFilter(GL target, int format, GL type, [Out] IntPtr image)
		{
			unsafe
			{
				Delegates.glGetConvolutionFilter((int)target, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void GetConvolutionFilter(GL target, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glGetConvolutionFilter((int)target, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void GetConvolutionParameterfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetConvolutionParameterfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetConvolutionParameterfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetConvolutionParameterfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetConvolutionParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetConvolutionParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetConvolutionParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetConvolutionParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
		{
			unsafe
			{
				Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [Out] IntPtr row, [In, Out] object column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span);
				}
				finally
				{
					column_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [Out] IntPtr row, [In, Out] object column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					column_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [In, Out] object row, [Out] IntPtr column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column, (IntPtr)span);
				}
				finally
				{
					row_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [In, Out] object row, [Out] IntPtr column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [In, Out] object row, [In, Out] object column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span);
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilter(GL target, int format, GL type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilter((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr row, IntPtr column)
		{
			unsafe
			{
				Delegates.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column);
			}
		}

		public static void SeparableFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr row, [In, Out] object column)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
				}
				finally
				{
					column_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object row, IntPtr column)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column);
				}
				finally
				{
					row_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2D(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object row, [In, Out] object column)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2D((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
				}
			}
		}

		public static void GetHistogram(GL target, Int32 reset, int format, GL type, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetHistogram((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values);
			}
		}

		public static void GetHistogram(GL target, Int32 reset, int format, GL type, [In, Out] object values)
		{
			unsafe
			{
				GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
				try
				{
					Delegates.glGetHistogram((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				}
				finally
				{
					values_ptr.Free();
				}
			}
		}

		public static void GetHistogramParameterfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetHistogramParameterfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetHistogramParameterfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetHistogramParameterfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetHistogramParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetHistogramParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetHistogramParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetHistogramParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMinmax(GL target, Int32 reset, int format, GL type, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetMinmax((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values);
			}
		}

		public static void GetMinmax(GL target, Int32 reset, int format, GL type, [In, Out] object values)
		{
			unsafe
			{
				GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
				try
				{
					Delegates.glGetMinmax((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				}
				finally
				{
					values_ptr.Free();
				}
			}
		}

		public static void GetMinmaxParameterfv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetMinmaxParameterfv(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMinmaxParameterfv(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMinmaxParameterfv((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMinmaxParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMinmaxParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMinmaxParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMinmaxParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void Histogram(GL target, Int32 width, int internalformat, Int32 sink)
		{
			Delegates.glHistogram((int)target, (Int32)width, (int)internalformat, (Int32)sink);
		}

		public static void Minmax(GL target, int internalformat, Int32 sink)
		{
			Delegates.glMinmax((int)target, (int)internalformat, (Int32)sink);
		}

		public static void ResetHistogram(int target)
		{
			Delegates.glResetHistogram((int)target);
		}

		public static void ResetMinmax(int target)
		{
			Delegates.glResetMinmax((int)target);
		}

		public static void TexImage3D(GL target, Int32 level, GL internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexImage3D(GL target, Int32 level, GL internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage3D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, GL format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage3D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, GL format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void CopyTexSubImage3D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void ActiveTexture(int texture)
		{
			Delegates.glActiveTexture((int)texture);
		}

		public static void ClientActiveTexture(int texture)
		{
			Delegates.glClientActiveTexture((int)texture);
		}

		public static void MultiTexCoord1d(GL target, Double s)
		{
			Delegates.glMultiTexCoord1d((int)target, (Double)s);
		}

		public static void MultiTexCoord1dv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1dv((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord1dv(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord1dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1dv(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1f(GL target, Single s)
		{
			Delegates.glMultiTexCoord1f((int)target, (Single)s);
		}

		public static void MultiTexCoord1fv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1fv((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord1fv(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord1fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1fv(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1i(GL target, Int32 s)
		{
			Delegates.glMultiTexCoord1i((int)target, (Int32)s);
		}

		public static void MultiTexCoord1iv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1iv((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord1iv(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord1iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1iv(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1s(GL target, Int16 s)
		{
			Delegates.glMultiTexCoord1s((int)target, (Int16)s);
		}

		public static void MultiTexCoord1sv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1sv((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord1sv(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord1sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1sv(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2d(GL target, Double s, Double t)
		{
			Delegates.glMultiTexCoord2d((int)target, (Double)s, (Double)t);
		}

		public static void MultiTexCoord2dv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2dv((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord2dv(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord2dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2dv(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2f(GL target, Single s, Single t)
		{
			Delegates.glMultiTexCoord2f((int)target, (Single)s, (Single)t);
		}

		public static void MultiTexCoord2fv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2fv((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord2fv(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord2fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2fv(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2i(GL target, Int32 s, Int32 t)
		{
			Delegates.glMultiTexCoord2i((int)target, (Int32)s, (Int32)t);
		}

		public static void MultiTexCoord2iv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2iv((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord2iv(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord2iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2iv(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2s(GL target, Int16 s, Int16 t)
		{
			Delegates.glMultiTexCoord2s((int)target, (Int16)s, (Int16)t);
		}

		public static void MultiTexCoord2sv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2sv((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord2sv(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord2sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2sv(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3d(GL target, Double s, Double t, Double r)
		{
			Delegates.glMultiTexCoord3d((int)target, (Double)s, (Double)t, (Double)r);
		}

		public static void MultiTexCoord3dv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3dv((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord3dv(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord3dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3dv(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3f(GL target, Single s, Single t, Single r)
		{
			Delegates.glMultiTexCoord3f((int)target, (Single)s, (Single)t, (Single)r);
		}

		public static void MultiTexCoord3fv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3fv((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord3fv(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord3fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3fv(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3i(GL target, Int32 s, Int32 t, Int32 r)
		{
			Delegates.glMultiTexCoord3i((int)target, (Int32)s, (Int32)t, (Int32)r);
		}

		public static void MultiTexCoord3iv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3iv((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord3iv(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord3iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3iv(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3s(GL target, Int16 s, Int16 t, Int16 r)
		{
			Delegates.glMultiTexCoord3s((int)target, (Int16)s, (Int16)t, (Int16)r);
		}

		public static void MultiTexCoord3sv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3sv((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord3sv(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord3sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3sv(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4d(GL target, Double s, Double t, Double r, Double q)
		{
			Delegates.glMultiTexCoord4d((int)target, (Double)s, (Double)t, (Double)r, (Double)q);
		}

		public static void MultiTexCoord4dv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4dv((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord4dv(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord4dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4dv(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4dv((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4f(GL target, Single s, Single t, Single r, Single q)
		{
			Delegates.glMultiTexCoord4f((int)target, (Single)s, (Single)t, (Single)r, (Single)q);
		}

		public static void MultiTexCoord4fv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4fv((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord4fv(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord4fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4fv(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4fv((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4i(GL target, Int32 s, Int32 t, Int32 r, Int32 q)
		{
			Delegates.glMultiTexCoord4i((int)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
		}

		public static void MultiTexCoord4iv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4iv((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord4iv(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord4iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4iv(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4iv((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4s(GL target, Int16 s, Int16 t, Int16 r, Int16 q)
		{
			Delegates.glMultiTexCoord4s((int)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
		}

		public static void MultiTexCoord4sv(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4sv((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord4sv(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord4sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4sv(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4sv((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixf(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadTransposeMatrixf((Single*)m);
			}
		}

		public static void LoadTransposeMatrixf(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixf(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixd(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadTransposeMatrixd((Double*)m);
			}
		}

		public static void LoadTransposeMatrixd(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixd(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixf(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultTransposeMatrixf((Single*)m);
			}
		}

		public static void MultTransposeMatrixf(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glMultTransposeMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixf(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glMultTransposeMatrixf((Single*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixd(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultTransposeMatrixd((Double*)m);
			}
		}

		public static void MultTransposeMatrixd(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glMultTransposeMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixd(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glMultTransposeMatrixd((Double*)m_ptr);
				}
			}
		}

		public static void SampleCoverage(Single value, Int32 invert)
		{
			Delegates.glSampleCoverage((Single)value, (Int32)invert);
		}

		public static void CompressedTexImage3D(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage3D(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage3D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexImage2D(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage2D(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage2D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexImage1D(GL target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage1D(GL target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage1D((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage3D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage3D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage3D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage2D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage2D(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage2D((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage1D(GL target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage1D(GL target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage1D((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetCompressedTexImage(GL target, Int32 level, [Out] IntPtr img)
		{
			unsafe
			{
				Delegates.glGetCompressedTexImage((int)target, (Int32)level, (IntPtr)img);
			}
		}

		public static void GetCompressedTexImage(GL target, Int32 level, [In, Out] object img)
		{
			unsafe
			{
				GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
				try
				{
					Delegates.glGetCompressedTexImage((int)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
				}
				finally
				{
					img_ptr.Free();
				}
			}
		}

		public static void BlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Delegates.glBlendFuncSeparate((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
		}

		public static void FogCoordf(Single coord)
		{
			Delegates.glFogCoordf((Single)coord);
		}

		public static void FogCoordfv(IntPtr coord)
		{
			unsafe
			{
				Delegates.glFogCoordfv((Single*)coord);
			}
		}

		public static void FogCoordfv(Single[] coord)
		{
			unsafe
			{
				fixed (Single* coord_ptr = coord)
				{
					Delegates.glFogCoordfv((Single*)coord_ptr);
				}
			}
		}

		public static void FogCoordfv(ref Single coord)
		{
			unsafe
			{
				fixed (Single* coord_ptr = &coord)
				{
					Delegates.glFogCoordfv((Single*)coord_ptr);
				}
			}
		}

		public static void FogCoordd(Double coord)
		{
			Delegates.glFogCoordd((Double)coord);
		}

		public static void FogCoorddv(IntPtr coord)
		{
			unsafe
			{
				Delegates.glFogCoorddv((Double*)coord);
			}
		}

		public static void FogCoorddv(Double[] coord)
		{
			unsafe
			{
				fixed (Double* coord_ptr = coord)
				{
					Delegates.glFogCoorddv((Double*)coord_ptr);
				}
			}
		}

		public static void FogCoorddv(ref Double coord)
		{
			unsafe
			{
				fixed (Double* coord_ptr = &coord)
				{
					Delegates.glFogCoorddv((Double*)coord_ptr);
				}
			}
		}

		public static void FogCoordPointer(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glFogCoordPointer((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void FogCoordPointer(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glFogCoordPointer((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] IntPtr first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawArrays((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] IntPtr first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] IntPtr first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] Int32[] first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] Int32[] first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] out Int32 first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
					first = *first_ptr;
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] out Int32 first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					first = *first_ptr;
				}
			}
		}

		public static void MultiDrawArrays(GL mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArrays((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					first = *first_ptr;
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawElements(GL mode, IntPtr count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawElements((int)mode, (Int32*)count, (int)type, (IntPtr)indices, (Int32)primcount);
			}
		}

		public static void MultiDrawElements(GL mode, IntPtr count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glMultiDrawElements((int)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void MultiDrawElements(GL mode, Int32[] count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElements(GL mode, Int32[] count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiDrawElements(GL mode, ref Int32 count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElements(GL mode, ref Int32 count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiDrawElements((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void PointParameterf(GL pname, Single param)
		{
			Delegates.glPointParameterf((int)pname, (Single)param);
		}

		public static void PointParameterfv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameterfv((int)pname, (Single*)@params);
			}
		}

		public static void PointParameterfv(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPointParameterfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PointParameterfv(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPointParameterfv((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PointParameteri(GL pname, Int32 param)
		{
			Delegates.glPointParameteri((int)pname, (Int32)param);
		}

		public static void PointParameteriv(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameteriv((int)pname, (Int32*)@params);
			}
		}

		public static void PointParameteriv(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glPointParameteriv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PointParameteriv(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glPointParameteriv((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void SecondaryColor3b(SByte red, SByte green, SByte blue)
		{
			Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void SecondaryColor3b(Byte red, Byte green, Byte blue)
		{
			Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void SecondaryColor3bv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3bv((SByte*)v);
			}
		}

		public static void SecondaryColor3bv(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bv(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3d(Double red, Double green, Double blue)
		{
			Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
		}

		public static void SecondaryColor3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3dv((Double*)v);
			}
		}

		public static void SecondaryColor3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glSecondaryColor3dv((Double*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glSecondaryColor3dv((Double*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3f(Single red, Single green, Single blue)
		{
			Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
		}

		public static void SecondaryColor3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3fv((Single*)v);
			}
		}

		public static void SecondaryColor3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glSecondaryColor3fv((Single*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glSecondaryColor3fv((Single*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3i(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
		}

		public static void SecondaryColor3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3iv((Int32*)v);
			}
		}

		public static void SecondaryColor3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glSecondaryColor3iv((Int32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3iv((Int32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3s(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
		}

		public static void SecondaryColor3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3sv((Int16*)v);
			}
		}

		public static void SecondaryColor3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glSecondaryColor3sv((Int16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3sv((Int16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ub(Byte red, Byte green, Byte blue)
		{
			Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
		}

		public static void SecondaryColor3ubv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3ubv((Byte*)v);
			}
		}

		public static void SecondaryColor3ubv(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ubv(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ui(UInt32 red, UInt32 green, UInt32 blue)
		{
			Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void SecondaryColor3ui(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void SecondaryColor3uiv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3uiv((UInt32*)v);
			}
		}

		public static void SecondaryColor3uiv(UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uiv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uiv(ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uiv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3us(UInt16 red, UInt16 green, UInt16 blue)
		{
			Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3us(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3usv(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3usv((UInt16*)v);
			}
		}

		public static void SecondaryColor3usv(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usv(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColorPointer(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glSecondaryColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void SecondaryColorPointer(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glSecondaryColorPointer((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void WindowPos2d(Double x, Double y)
		{
			Delegates.glWindowPos2d((Double)x, (Double)y);
		}

		public static void WindowPos2dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2dv((Double*)v);
			}
		}

		public static void WindowPos2dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos2dv((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos2dv((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2f(Single x, Single y)
		{
			Delegates.glWindowPos2f((Single)x, (Single)y);
		}

		public static void WindowPos2fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2fv((Single*)v);
			}
		}

		public static void WindowPos2fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos2fv((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos2fv((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2i(Int32 x, Int32 y)
		{
			Delegates.glWindowPos2i((Int32)x, (Int32)y);
		}

		public static void WindowPos2iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2iv((Int32*)v);
			}
		}

		public static void WindowPos2iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos2iv((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos2iv((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2s(Int16 x, Int16 y)
		{
			Delegates.glWindowPos2s((Int16)x, (Int16)y);
		}

		public static void WindowPos2sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2sv((Int16*)v);
			}
		}

		public static void WindowPos2sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos2sv((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos2sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos2sv((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3d(Double x, Double y, Double z)
		{
			Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
		}

		public static void WindowPos3dv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3dv((Double*)v);
			}
		}

		public static void WindowPos3dv(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos3dv((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3dv(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos3dv((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3f(Single x, Single y, Single z)
		{
			Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
		}

		public static void WindowPos3fv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3fv((Single*)v);
			}
		}

		public static void WindowPos3fv(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos3fv((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3fv(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos3fv((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3i(Int32 x, Int32 y, Int32 z)
		{
			Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
		}

		public static void WindowPos3iv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3iv((Int32*)v);
			}
		}

		public static void WindowPos3iv(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos3iv((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3iv(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos3iv((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3s(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
		}

		public static void WindowPos3sv(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3sv((Int16*)v);
			}
		}

		public static void WindowPos3sv(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos3sv((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3sv(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos3sv((Int16*)v_ptr);
				}
			}
		}

		public static void GenQueries(Int32 n, [Out] IntPtr ids)
		{
			unsafe
			{
				Delegates.glGenQueries((Int32)n, (UInt32*)ids);
			}
		}

		public static void GenQueries(Int32 n, [Out] UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenQueries(Int32 n, [Out] Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenQueries(Int32 n, [Out] out UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void GenQueries(Int32 n, [Out] out Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void DeleteQueries(Int32 n, IntPtr ids)
		{
			unsafe
			{
				Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
			}
		}

		public static void DeleteQueries(Int32 n, UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueries(Int32 n, Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueries(Int32 n, ref UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueries(Int32 n, ref Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static Int32 IsQuery(UInt32 id)
		{
			return Delegates.glIsQuery((UInt32)id);
		}

		public static Int32 IsQuery(Int32 id)
		{
			return Delegates.glIsQuery((UInt32)id);
		}

		public static void BeginQuery(GL target, UInt32 id)
		{
			Delegates.glBeginQuery((int)target, (UInt32)id);
		}

		public static void BeginQuery(GL target, Int32 id)
		{
			Delegates.glBeginQuery((int)target, (UInt32)id);
		}

		public static void EndQuery(int target)
		{
			Delegates.glEndQuery((int)target);
		}

		public static void GetQueryiv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryiv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryiv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryiv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryiv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryiv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectiv(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryObjectiv(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryObjectiv(UInt32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectiv(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectiv(UInt32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectiv(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectiv((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectuiv(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetQueryObjectuiv(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetQueryObjectuiv(UInt32 id, GL pname, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectuiv(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectuiv(UInt32 id, GL pname, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectuiv(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectuiv((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void BindBuffer(GL target, UInt32 buffer)
		{
			Delegates.glBindBuffer((int)target, (UInt32)buffer);
		}

		public static void BindBuffer(GL target, Int32 buffer)
		{
			Delegates.glBindBuffer((int)target, (UInt32)buffer);
		}

		public static void DeleteBuffers(Int32 n, IntPtr buffers)
		{
			unsafe
			{
				Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
			}
		}

		public static void DeleteBuffers(Int32 n, UInt32[] buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = buffers)
				{
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffers(Int32 n, Int32[] buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = buffers)
				{
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffers(Int32 n, ref UInt32 buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = &buffers)
				{
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffers(Int32 n, ref Int32 buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = &buffers)
				{
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffers(Int32 n, [Out] IntPtr buffers)
		{
			unsafe
			{
				Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
			}
		}

		public static void GenBuffers(Int32 n, [Out] UInt32[] buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = buffers)
				{
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffers(Int32 n, [Out] Int32[] buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = buffers)
				{
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffers(Int32 n, [Out] out UInt32 buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = &buffers)
				{
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		public static void GenBuffers(Int32 n, [Out] out Int32 buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = &buffers)
				{
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		public static Int32 IsBuffer(UInt32 buffer)
		{
			return Delegates.glIsBuffer((UInt32)buffer);
		}

		public static Int32 IsBuffer(Int32 buffer)
		{
			return Delegates.glIsBuffer((UInt32)buffer);
		}

		public static void BufferData(GL target, IntPtr size, IntPtr data, GL usage)
		{
			unsafe
			{
				Delegates.glBufferData((int)target, (IntPtr)size, (IntPtr)data, (int)usage);
			}
		}

		public static void BufferData(GL target, IntPtr size, [In, Out] object data, GL usage)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferData((int)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (int)usage);
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void BufferSubData(GL target, IntPtr offset, IntPtr size, IntPtr data)
		{
			unsafe
			{
				Delegates.glBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
			}
		}

		public static void BufferSubData(GL target, IntPtr offset, IntPtr size, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetBufferSubData(GL target, IntPtr offset, IntPtr size, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
			}
		}

		public static void GetBufferSubData(GL target, IntPtr offset, IntPtr size, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glGetBufferSubData((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static IntPtr MapBuffer(GL target, int access)
		{
			return Delegates.glMapBuffer((int)target, (int)access);
		}

		public static Int32 UnmapBuffer(int target)
		{
			return Delegates.glUnmapBuffer((int)target);
		}

		public static void GetBufferParameteriv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetBufferParameteriv(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetBufferParameteriv(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetBufferParameteriv((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetBufferPointerv(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetBufferPointerv((int)target, (int)pname, (IntPtr)@params);
			}
		}

		public static void GetBufferPointerv(GL target, GL pname, [In, Out] object @params)
		{
			unsafe
			{
				GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
				try
				{
					Delegates.glGetBufferPointerv((int)target, (int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@params_ptr.Free();
				}
			}
		}

		public static void BlendEquationSeparate(int modeRGB, int modeAlpha)
		{
			Delegates.glBlendEquationSeparate((int)modeRGB, (int)modeAlpha);
		}

		public static void DrawBuffers(Int32 n, IntPtr bufs)
		{
			unsafe
			{
				Delegates.glDrawBuffers((Int32)n, (int*)bufs);
			}
		}

		public static void DrawBuffers(Int32 n, int[] bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = bufs)
				{
					Delegates.glDrawBuffers((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static void DrawBuffers(Int32 n, ref int bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = &bufs)
				{
					Delegates.glDrawBuffers((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static void StencilOpSeparate(int face, int sfail, int dpfail, int dppass)
		{
			Delegates.glStencilOpSeparate((int)face, (int)sfail, (int)dpfail, (int)dppass);
		}

		public static void StencilFuncSeparate(int frontfunc, int backfunc, Int32 @ref, UInt32 mask)
		{
			Delegates.glStencilFuncSeparate((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
		}

		public static void StencilFuncSeparate(int frontfunc, int backfunc, Int32 @ref, Int32 mask)
		{
			Delegates.glStencilFuncSeparate((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
		}

		public static void StencilMaskSeparate(int face, UInt32 mask)
		{
			Delegates.glStencilMaskSeparate((int)face, (UInt32)mask);
		}

		public static void StencilMaskSeparate(int face, Int32 mask)
		{
			Delegates.glStencilMaskSeparate((int)face, (UInt32)mask);
		}

		public static void AttachShader(UInt32 program, UInt32 shader)
		{
			Delegates.glAttachShader((UInt32)program, (UInt32)shader);
		}

		public static void AttachShader(Int32 program, Int32 shader)
		{
			Delegates.glAttachShader((UInt32)program, (UInt32)shader);
		}

		public static void BindAttribLocation(UInt32 program, UInt32 index, System.String name)
		{
			Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
		}

		public static void BindAttribLocation(Int32 program, Int32 index, System.String name)
		{
			Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
		}

		public static void CompileShader(UInt32 shader)
		{
			Delegates.glCompileShader((UInt32)shader);
		}

		public static void CompileShader(Int32 shader)
		{
			Delegates.glCompileShader((UInt32)shader);
		}

		public static Int32 CreateProgram()
		{
			return Delegates.glCreateProgram();
		}

		public static Int32 CreateShader(int type)
		{
			return Delegates.glCreateShader((int)type);
		}

		public static void DeleteProgram(UInt32 program)
		{
			Delegates.glDeleteProgram((UInt32)program);
		}

		public static void DeleteProgram(Int32 program)
		{
			Delegates.glDeleteProgram((UInt32)program);
		}

		public static void DeleteShader(UInt32 shader)
		{
			Delegates.glDeleteShader((UInt32)shader);
		}

		public static void DeleteShader(Int32 shader)
		{
			Delegates.glDeleteShader((UInt32)shader);
		}

		public static void DetachShader(UInt32 program, UInt32 shader)
		{
			Delegates.glDetachShader((UInt32)program, (UInt32)shader);
		}

		public static void DetachShader(Int32 program, Int32 shader)
		{
			Delegates.glDetachShader((UInt32)program, (UInt32)shader);
		}

		public static void DisableVertexAttribArray(UInt32 index)
		{
			Delegates.glDisableVertexAttribArray((UInt32)index);
		}

		public static void DisableVertexAttribArray(Int32 index)
		{
			Delegates.glDisableVertexAttribArray((UInt32)index);
		}

		public static void EnableVertexAttribArray(UInt32 index)
		{
			Delegates.glEnableVertexAttribArray((UInt32)index);
		}

		public static void EnableVertexAttribArray(Int32 index)
		{
			Delegates.glEnableVertexAttribArray((UInt32)index);
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
		{
			unsafe
			{
				Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
		{
			unsafe
			{
				Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] IntPtr count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] IntPtr count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] IntPtr count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] IntPtr count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32[] count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32[] count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32[] count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32[] count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] out Int32 count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] out Int32 count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] out Int32 count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] out Int32 count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
					obj = *obj_ptr;
				}
			}
		}

		public static Int32 GetAttribLocation(UInt32 program, System.String name)
		{
			return Delegates.glGetAttribLocation((UInt32)program, (System.String)name);
		}

		public static Int32 GetAttribLocation(Int32 program, System.String name)
		{
			return Delegates.glGetAttribLocation((UInt32)program, (System.String)name);
		}

		public static void GetProgramiv(UInt32 program, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params);
			}
		}

		public static void GetProgramiv(Int32 program, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params);
			}
		}

		public static void GetProgramiv(UInt32 program, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramiv(Int32 program, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramiv(UInt32 program, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramiv(Int32 program, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramiv((UInt32)program, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetShaderiv(UInt32 shader, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params);
			}
		}

		public static void GetShaderiv(Int32 shader, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params);
			}
		}

		public static void GetShaderiv(UInt32 shader, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetShaderiv(Int32 shader, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetShaderiv(UInt32 shader, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetShaderiv(Int32 shader, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetShaderiv((UInt32)shader, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
			}
		}

		public static void GetShaderSource(Int32 shader, Int32 bufSize, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
			}
		}

		public static void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
				}
			}
		}

		public static void GetShaderSource(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
				}
			}
		}

		public static void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
					length = *length_ptr;
				}
			}
		}

		public static void GetShaderSource(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
					length = *length_ptr;
				}
			}
		}

		public static Int32 GetUniformLocation(UInt32 program, System.String name)
		{
			return Delegates.glGetUniformLocation((UInt32)program, (System.String)name);
		}

		public static Int32 GetUniformLocation(Int32 program, System.String name)
		{
			return Delegates.glGetUniformLocation((UInt32)program, (System.String)name);
		}

		public static void GetUniformfv(UInt32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
			}
		}

		public static void GetUniformfv(Int32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
			}
		}

		public static void GetUniformfv(UInt32 program, Int32 location, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		public static void GetUniformfv(Int32 program, Int32 location, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		public static void GetUniformfv(UInt32 program, Int32 location, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformfv(Int32 program, Int32 location, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformiv(UInt32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
			}
		}

		public static void GetUniformiv(Int32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
			}
		}

		public static void GetUniformiv(UInt32 program, Int32 location, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetUniformiv(Int32 program, Int32 location, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetUniformiv(UInt32 program, Int32 location, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformiv(Int32 program, Int32 location, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribdv(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdv(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdv(UInt32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdv(Int32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdv(UInt32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribdv(Int32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdv((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfv(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfv(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfv(UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfv(Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfv(UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfv(Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfv((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribiv(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribiv(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribiv(UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribiv(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribiv(UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribiv(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribiv((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribPointerv(UInt32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointerv(Int32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointerv(UInt32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void GetVertexAttribPointerv(Int32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointerv((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static Int32 IsProgram(UInt32 program)
		{
			return Delegates.glIsProgram((UInt32)program);
		}

		public static Int32 IsProgram(Int32 program)
		{
			return Delegates.glIsProgram((UInt32)program);
		}

		public static Int32 IsShader(UInt32 shader)
		{
			return Delegates.glIsShader((UInt32)shader);
		}

		public static Int32 IsShader(Int32 shader)
		{
			return Delegates.glIsShader((UInt32)shader);
		}

		public static void LinkProgram(UInt32 program)
		{
			Delegates.glLinkProgram((UInt32)program);
		}

		public static void LinkProgram(Int32 program)
		{
			Delegates.glLinkProgram((UInt32)program);
		}

		public static void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, IntPtr length)
		{
			unsafe
			{
				Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
			}
		}

		public static void ShaderSource(Int32 shader, Int32 count, System.String[] @string, IntPtr length)
		{
			unsafe
			{
				Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
			}
		}

		public static void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, Int32[] length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSource(Int32 shader, Int32 count, System.String[] @string, Int32[] length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, ref Int32 length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSource(Int32 shader, Int32 count, System.String[] @string, ref Int32 length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void UseProgram(UInt32 program)
		{
			Delegates.glUseProgram((UInt32)program);
		}

		public static void UseProgram(Int32 program)
		{
			Delegates.glUseProgram((UInt32)program);
		}

		public static void Uniform1f(Int32 location, Single v0)
		{
			Delegates.glUniform1f((Int32)location, (Single)v0);
		}

		public static void Uniform2f(Int32 location, Single v0, Single v1)
		{
			Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
		}

		public static void Uniform3f(Int32 location, Single v0, Single v1, Single v2)
		{
			Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
		}

		public static void Uniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3)
		{
			Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
		}

		public static void Uniform1i(Int32 location, Int32 v0)
		{
			Delegates.glUniform1i((Int32)location, (Int32)v0);
		}

		public static void Uniform2i(Int32 location, Int32 v0, Int32 v1)
		{
			Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
		}

		public static void Uniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2)
		{
			Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
		}

		public static void Uniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
		{
			Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
		}

		public static void Uniform1fv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform1fv(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform1fv(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform2fv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform2fv(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform2fv(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform2fv(Int32 location, Vector2 value)
		{
			unsafe
			{
				Delegates.glUniform2fv((Int32)location, 1, (Single*)&value.X);
			}
		}

		public static void Uniform3fv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform3fv(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform3fv(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform3fv(Int32 location, Vector3 value)
		{
			unsafe
			{
				Delegates.glUniform3fv((Int32)location, 1, (Single*)&value.X);
			}
		}

		public static void Uniform4fv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform4fv(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform4fv(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform3fv(Int32 location, Vector4 value)
		{
			unsafe
			{
				Delegates.glUniform4fv((Int32)location, 1, (Single*)&value.X);
			}
		}

		public static void Uniform1iv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform1iv(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform1iv(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform2iv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform2iv(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform2iv(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform3iv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform3iv(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform3iv(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform4iv(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform4iv(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform4iv(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix2fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix3fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4fv(Int32 location, Int32 count, Int32 transpose, Matrix4 value)
		{
			unsafe
			{
				Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (Int32)transpose, &value.v11);
			}
		}

		public static void UniformMatrix4fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix4fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void ValidateProgram(UInt32 program)
		{
			Delegates.glValidateProgram((UInt32)program);
		}

		public static void ValidateProgram(Int32 program)
		{
			Delegates.glValidateProgram((UInt32)program);
		}

		public static void VertexAttrib1d(UInt32 index, Double x)
		{
			Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1d(Int32 index, Double x)
		{
			Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1dv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dv(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dv(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dv(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dv(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1f(UInt32 index, Single x)
		{
			Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1f(Int32 index, Single x)
		{
			Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1fv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fv(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fv(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fv(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fv(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1s(UInt32 index, Int16 x)
		{
			Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1s(Int32 index, Int16 x)
		{
			Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1sv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1sv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1sv(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1sv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1sv(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1sv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2d(UInt32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2d(Int32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2dv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dv(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dv(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dv(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dv(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2f(UInt32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2f(Int32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2fv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fv(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fv(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fv(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fv(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2s(UInt32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2s(Int32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2sv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2sv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2sv(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2sv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2sv(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2sv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3d(UInt32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3d(Int32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3dv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dv(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dv(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dv(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dv(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3f(UInt32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3f(Int32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3fv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fv(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fv(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fv(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fv(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3s(UInt32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3s(Int32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3sv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3sv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3sv(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3sv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3sv(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3sv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nbv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4Nbv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4Nbv(UInt32 index, SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nbv(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nbv(UInt32 index, ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nbv(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Niv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4Niv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4Niv(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Niv(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Niv(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Niv(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nsv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4Nsv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4Nsv(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nsv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nsv(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nsv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nub(UInt32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4Nub(Int32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4Nubv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4Nubv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4Nubv(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nubv(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nubv(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nubv(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nuiv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4Nuiv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4Nuiv(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nuiv(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nuiv(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nuiv(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nusv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4Nusv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4Nusv(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nusv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nusv(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4Nusv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4bv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4bv(UInt32 index, SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bv(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bv(UInt32 index, ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bv(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4d(UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4d(Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4dv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dv(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dv(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dv(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dv(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4f(Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4fv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fv(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fv(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fv(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fv(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4iv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4iv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4iv(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4iv(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4iv(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4iv(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4s(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4s(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4sv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4sv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4sv(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4sv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4sv(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4sv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubv(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubv(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubv(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubv(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uiv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4uiv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4uiv(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uiv(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uiv(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uiv(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usv(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4usv(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4usv(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usv(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usv(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usv(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribPointer(UInt32 index, Int32 size, GL type, Int32 normalized, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointer(Int32 index, Int32 size, GL type, Int32 normalized, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointer(UInt32 index, Int32 size, GL type, Int32 normalized, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexAttribPointer(Int32 index, Int32 size, GL type, Int32 normalized, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void UniformMatrix2x3fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix2x3fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2x3fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3x2fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix3x2fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3x2fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2x4fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix2x4fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2x4fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4x2fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix4x2fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4x2fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3x4fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix3x4fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3x4fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4x3fv(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix4x3fv(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4x3fv(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void ActiveTextureARB(int texture)
		{
			Delegates.glActiveTextureARB((int)texture);
		}

		public static void ClientActiveTextureARB(int texture)
		{
			Delegates.glClientActiveTextureARB((int)texture);
		}

		public static void MultiTexCoord1dARB(GL target, Double s)
		{
			Delegates.glMultiTexCoord1dARB((int)target, (Double)s);
		}

		public static void MultiTexCoord1dvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1dvARB((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord1dvARB(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord1dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1dvARB(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1fARB(GL target, Single s)
		{
			Delegates.glMultiTexCoord1fARB((int)target, (Single)s);
		}

		public static void MultiTexCoord1fvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1fvARB((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord1fvARB(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord1fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1fvARB(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1iARB(GL target, Int32 s)
		{
			Delegates.glMultiTexCoord1iARB((int)target, (Int32)s);
		}

		public static void MultiTexCoord1ivARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1ivARB((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord1ivARB(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord1ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1ivARB(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1sARB(GL target, Int16 s)
		{
			Delegates.glMultiTexCoord1sARB((int)target, (Int16)s);
		}

		public static void MultiTexCoord1svARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1svARB((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord1svARB(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord1svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1svARB(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2dARB(GL target, Double s, Double t)
		{
			Delegates.glMultiTexCoord2dARB((int)target, (Double)s, (Double)t);
		}

		public static void MultiTexCoord2dvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2dvARB((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord2dvARB(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord2dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2dvARB(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2fARB(GL target, Single s, Single t)
		{
			Delegates.glMultiTexCoord2fARB((int)target, (Single)s, (Single)t);
		}

		public static void MultiTexCoord2fvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2fvARB((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord2fvARB(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord2fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2fvARB(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2iARB(GL target, Int32 s, Int32 t)
		{
			Delegates.glMultiTexCoord2iARB((int)target, (Int32)s, (Int32)t);
		}

		public static void MultiTexCoord2ivARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2ivARB((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord2ivARB(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord2ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2ivARB(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2sARB(GL target, Int16 s, Int16 t)
		{
			Delegates.glMultiTexCoord2sARB((int)target, (Int16)s, (Int16)t);
		}

		public static void MultiTexCoord2svARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2svARB((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord2svARB(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord2svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2svARB(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3dARB(GL target, Double s, Double t, Double r)
		{
			Delegates.glMultiTexCoord3dARB((int)target, (Double)s, (Double)t, (Double)r);
		}

		public static void MultiTexCoord3dvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3dvARB((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord3dvARB(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord3dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3dvARB(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3fARB(GL target, Single s, Single t, Single r)
		{
			Delegates.glMultiTexCoord3fARB((int)target, (Single)s, (Single)t, (Single)r);
		}

		public static void MultiTexCoord3fvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3fvARB((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord3fvARB(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord3fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3fvARB(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3iARB(GL target, Int32 s, Int32 t, Int32 r)
		{
			Delegates.glMultiTexCoord3iARB((int)target, (Int32)s, (Int32)t, (Int32)r);
		}

		public static void MultiTexCoord3ivARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3ivARB((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord3ivARB(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord3ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3ivARB(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3sARB(GL target, Int16 s, Int16 t, Int16 r)
		{
			Delegates.glMultiTexCoord3sARB((int)target, (Int16)s, (Int16)t, (Int16)r);
		}

		public static void MultiTexCoord3svARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3svARB((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord3svARB(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord3svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3svARB(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4dARB(GL target, Double s, Double t, Double r, Double q)
		{
			Delegates.glMultiTexCoord4dARB((int)target, (Double)s, (Double)t, (Double)r, (Double)q);
		}

		public static void MultiTexCoord4dvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4dvARB((int)target, (Double*)v);
			}
		}

		public static void MultiTexCoord4dvARB(GL target, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glMultiTexCoord4dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4dvARB(GL target, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4dvARB((int)target, (Double*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4fARB(GL target, Single s, Single t, Single r, Single q)
		{
			Delegates.glMultiTexCoord4fARB((int)target, (Single)s, (Single)t, (Single)r, (Single)q);
		}

		public static void MultiTexCoord4fvARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4fvARB((int)target, (Single*)v);
			}
		}

		public static void MultiTexCoord4fvARB(GL target, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glMultiTexCoord4fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4fvARB(GL target, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4fvARB((int)target, (Single*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4iARB(GL target, Int32 s, Int32 t, Int32 r, Int32 q)
		{
			Delegates.glMultiTexCoord4iARB((int)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
		}

		public static void MultiTexCoord4ivARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4ivARB((int)target, (Int32*)v);
			}
		}

		public static void MultiTexCoord4ivARB(GL target, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glMultiTexCoord4ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4ivARB(GL target, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4ivARB((int)target, (Int32*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4sARB(GL target, Int16 s, Int16 t, Int16 r, Int16 q)
		{
			Delegates.glMultiTexCoord4sARB((int)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
		}

		public static void MultiTexCoord4svARB(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4svARB((int)target, (Int16*)v);
			}
		}

		public static void MultiTexCoord4svARB(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord4svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4svARB(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4svARB((int)target, (Int16*)v_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixfARB(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadTransposeMatrixfARB((Single*)m);
			}
		}

		public static void LoadTransposeMatrixfARB(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixfARB(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixdARB(IntPtr m)
		{
			unsafe
			{
				Delegates.glLoadTransposeMatrixdARB((Double*)m);
			}
		}

		public static void LoadTransposeMatrixdARB(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
				}
			}
		}

		public static void LoadTransposeMatrixdARB(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixfARB(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultTransposeMatrixfARB((Single*)m);
			}
		}

		public static void MultTransposeMatrixfARB(Single[] m)
		{
			unsafe
			{
				fixed (Single* m_ptr = m)
				{
					Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixfARB(ref Single m)
		{
			unsafe
			{
				fixed (Single* m_ptr = &m)
				{
					Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixdARB(IntPtr m)
		{
			unsafe
			{
				Delegates.glMultTransposeMatrixdARB((Double*)m);
			}
		}

		public static void MultTransposeMatrixdARB(Double[] m)
		{
			unsafe
			{
				fixed (Double* m_ptr = m)
				{
					Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
				}
			}
		}

		public static void MultTransposeMatrixdARB(ref Double m)
		{
			unsafe
			{
				fixed (Double* m_ptr = &m)
				{
					Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
				}
			}
		}

		public static void SampleCoverageARB(Single value, Int32 invert)
		{
			Delegates.glSampleCoverageARB((Single)value, (Int32)invert);
		}

		public static void CompressedTexImage3DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage3DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage3DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage3DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexImage2DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage2DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage2DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage2DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexImage1DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexImage1DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexImage1DARB(GL target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexImage1DARB((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage3DARB(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage3DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage3DARB(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage3DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage2DARB(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage2DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage2DARB(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage2DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CompressedTexSubImage1DARB(GL target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
		{
			unsafe
			{
				Delegates.glCompressedTexSubImage1DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data);
			}
		}

		public static void CompressedTexSubImage1DARB(GL target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glCompressedTexSubImage1DARB((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetCompressedTexImageARB(GL target, Int32 level, [Out] IntPtr img)
		{
			unsafe
			{
				Delegates.glGetCompressedTexImageARB((int)target, (Int32)level, (IntPtr)img);
			}
		}

		public static void GetCompressedTexImageARB(GL target, Int32 level, [In, Out] object img)
		{
			unsafe
			{
				GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
				try
				{
					Delegates.glGetCompressedTexImageARB((int)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
				}
				finally
				{
					img_ptr.Free();
				}
			}
		}

		public static void PointParameterfARB(GL pname, Single param)
		{
			Delegates.glPointParameterfARB((int)pname, (Single)param);
		}

		public static void PointParameterfvARB(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameterfvARB((int)pname, (Single*)@params);
			}
		}

		public static void PointParameterfvARB(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPointParameterfvARB((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PointParameterfvARB(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPointParameterfvARB((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void WeightbvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightbvARB((Int32)size, (SByte*)weights);
			}
		}

		public static void WeightbvARB(Int32 size, SByte[] weights)
		{
			unsafe
			{
				fixed (SByte* weights_ptr = weights)
				{
					Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
				}
			}
		}

		public static void WeightbvARB(Int32 size, Byte[] weights)
		{
			unsafe
			{
				fixed (Byte* weights_ptr = weights)
				{
					Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
				}
			}
		}

		public static void WeightbvARB(Int32 size, ref SByte weights)
		{
			unsafe
			{
				fixed (SByte* weights_ptr = &weights)
				{
					Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
				}
			}
		}

		public static void WeightbvARB(Int32 size, ref Byte weights)
		{
			unsafe
			{
				fixed (Byte* weights_ptr = &weights)
				{
					Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
				}
			}
		}

		public static void WeightsvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightsvARB((Int32)size, (Int16*)weights);
			}
		}

		public static void WeightsvARB(Int32 size, Int16[] weights)
		{
			unsafe
			{
				fixed (Int16* weights_ptr = weights)
				{
					Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
				}
			}
		}

		public static void WeightsvARB(Int32 size, ref Int16 weights)
		{
			unsafe
			{
				fixed (Int16* weights_ptr = &weights)
				{
					Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
				}
			}
		}

		public static void WeightivARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightivARB((Int32)size, (Int32*)weights);
			}
		}

		public static void WeightivARB(Int32 size, Int32[] weights)
		{
			unsafe
			{
				fixed (Int32* weights_ptr = weights)
				{
					Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
				}
			}
		}

		public static void WeightivARB(Int32 size, ref Int32 weights)
		{
			unsafe
			{
				fixed (Int32* weights_ptr = &weights)
				{
					Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
				}
			}
		}

		public static void WeightfvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightfvARB((Int32)size, (Single*)weights);
			}
		}

		public static void WeightfvARB(Int32 size, Single[] weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = weights)
				{
					Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
				}
			}
		}

		public static void WeightfvARB(Int32 size, ref Single weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = &weights)
				{
					Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
				}
			}
		}

		public static void WeightdvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightdvARB((Int32)size, (Double*)weights);
			}
		}

		public static void WeightdvARB(Int32 size, Double[] weights)
		{
			unsafe
			{
				fixed (Double* weights_ptr = weights)
				{
					Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
				}
			}
		}

		public static void WeightdvARB(Int32 size, ref Double weights)
		{
			unsafe
			{
				fixed (Double* weights_ptr = &weights)
				{
					Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
				}
			}
		}

		public static void WeightubvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightubvARB((Int32)size, (Byte*)weights);
			}
		}

		public static void WeightubvARB(Int32 size, Byte[] weights)
		{
			unsafe
			{
				fixed (Byte* weights_ptr = weights)
				{
					Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
				}
			}
		}

		public static void WeightubvARB(Int32 size, ref Byte weights)
		{
			unsafe
			{
				fixed (Byte* weights_ptr = &weights)
				{
					Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
				}
			}
		}

		public static void WeightusvARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightusvARB((Int32)size, (UInt16*)weights);
			}
		}

		public static void WeightusvARB(Int32 size, UInt16[] weights)
		{
			unsafe
			{
				fixed (UInt16* weights_ptr = weights)
				{
					Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
				}
			}
		}

		public static void WeightusvARB(Int32 size, Int16[] weights)
		{
			unsafe
			{
				fixed (Int16* weights_ptr = weights)
				{
					Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
				}
			}
		}

		public static void WeightusvARB(Int32 size, ref UInt16 weights)
		{
			unsafe
			{
				fixed (UInt16* weights_ptr = &weights)
				{
					Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
				}
			}
		}

		public static void WeightusvARB(Int32 size, ref Int16 weights)
		{
			unsafe
			{
				fixed (Int16* weights_ptr = &weights)
				{
					Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
				}
			}
		}

		public static void WeightuivARB(Int32 size, IntPtr weights)
		{
			unsafe
			{
				Delegates.glWeightuivARB((Int32)size, (UInt32*)weights);
			}
		}

		public static void WeightuivARB(Int32 size, UInt32[] weights)
		{
			unsafe
			{
				fixed (UInt32* weights_ptr = weights)
				{
					Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
				}
			}
		}

		public static void WeightuivARB(Int32 size, Int32[] weights)
		{
			unsafe
			{
				fixed (Int32* weights_ptr = weights)
				{
					Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
				}
			}
		}

		public static void WeightuivARB(Int32 size, ref UInt32 weights)
		{
			unsafe
			{
				fixed (UInt32* weights_ptr = &weights)
				{
					Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
				}
			}
		}

		public static void WeightuivARB(Int32 size, ref Int32 weights)
		{
			unsafe
			{
				fixed (Int32* weights_ptr = &weights)
				{
					Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
				}
			}
		}

		public static void WeightPointerARB(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glWeightPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void WeightPointerARB(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glWeightPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexBlendARB(Int32 count)
		{
			Delegates.glVertexBlendARB((Int32)count);
		}

		public static void CurrentPaletteMatrixARB(Int32 index)
		{
			Delegates.glCurrentPaletteMatrixARB((Int32)index);
		}

		public static void MatrixIndexubvARB(Int32 size, IntPtr indices)
		{
			unsafe
			{
				Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices);
			}
		}

		public static void MatrixIndexubvARB(Int32 size, Byte[] indices)
		{
			unsafe
			{
				fixed (Byte* indices_ptr = indices)
				{
					Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexubvARB(Int32 size, ref Byte indices)
		{
			unsafe
			{
				fixed (Byte* indices_ptr = &indices)
				{
					Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexusvARB(Int32 size, IntPtr indices)
		{
			unsafe
			{
				Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
			}
		}

		public static void MatrixIndexusvARB(Int32 size, UInt16[] indices)
		{
			unsafe
			{
				fixed (UInt16* indices_ptr = indices)
				{
					Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexusvARB(Int32 size, Int16[] indices)
		{
			unsafe
			{
				fixed (Int16* indices_ptr = indices)
				{
					Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexusvARB(Int32 size, ref UInt16 indices)
		{
			unsafe
			{
				fixed (UInt16* indices_ptr = &indices)
				{
					Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexusvARB(Int32 size, ref Int16 indices)
		{
			unsafe
			{
				fixed (Int16* indices_ptr = &indices)
				{
					Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexuivARB(Int32 size, IntPtr indices)
		{
			unsafe
			{
				Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
			}
		}

		public static void MatrixIndexuivARB(Int32 size, UInt32[] indices)
		{
			unsafe
			{
				fixed (UInt32* indices_ptr = indices)
				{
					Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexuivARB(Int32 size, Int32[] indices)
		{
			unsafe
			{
				fixed (Int32* indices_ptr = indices)
				{
					Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexuivARB(Int32 size, ref UInt32 indices)
		{
			unsafe
			{
				fixed (UInt32* indices_ptr = &indices)
				{
					Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexuivARB(Int32 size, ref Int32 indices)
		{
			unsafe
			{
				fixed (Int32* indices_ptr = &indices)
				{
					Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
				}
			}
		}

		public static void MatrixIndexPointerARB(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glMatrixIndexPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void MatrixIndexPointerARB(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glMatrixIndexPointerARB((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void WindowPos2dARB(Double x, Double y)
		{
			Delegates.glWindowPos2dARB((Double)x, (Double)y);
		}

		public static void WindowPos2dvARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2dvARB((Double*)v);
			}
		}

		public static void WindowPos2dvARB(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos2dvARB((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2dvARB(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos2dvARB((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2fARB(Single x, Single y)
		{
			Delegates.glWindowPos2fARB((Single)x, (Single)y);
		}

		public static void WindowPos2fvARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2fvARB((Single*)v);
			}
		}

		public static void WindowPos2fvARB(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos2fvARB((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2fvARB(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos2fvARB((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2iARB(Int32 x, Int32 y)
		{
			Delegates.glWindowPos2iARB((Int32)x, (Int32)y);
		}

		public static void WindowPos2ivARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2ivARB((Int32*)v);
			}
		}

		public static void WindowPos2ivARB(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos2ivARB((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2ivARB(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos2ivARB((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2sARB(Int16 x, Int16 y)
		{
			Delegates.glWindowPos2sARB((Int16)x, (Int16)y);
		}

		public static void WindowPos2svARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2svARB((Int16*)v);
			}
		}

		public static void WindowPos2svARB(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos2svARB((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos2svARB(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos2svARB((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3dARB(Double x, Double y, Double z)
		{
			Delegates.glWindowPos3dARB((Double)x, (Double)y, (Double)z);
		}

		public static void WindowPos3dvARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3dvARB((Double*)v);
			}
		}

		public static void WindowPos3dvARB(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos3dvARB((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3dvARB(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos3dvARB((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3fARB(Single x, Single y, Single z)
		{
			Delegates.glWindowPos3fARB((Single)x, (Single)y, (Single)z);
		}

		public static void WindowPos3fvARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3fvARB((Single*)v);
			}
		}

		public static void WindowPos3fvARB(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos3fvARB((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3fvARB(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos3fvARB((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3iARB(Int32 x, Int32 y, Int32 z)
		{
			Delegates.glWindowPos3iARB((Int32)x, (Int32)y, (Int32)z);
		}

		public static void WindowPos3ivARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3ivARB((Int32*)v);
			}
		}

		public static void WindowPos3ivARB(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos3ivARB((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3ivARB(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos3ivARB((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3sARB(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glWindowPos3sARB((Int16)x, (Int16)y, (Int16)z);
		}

		public static void WindowPos3svARB(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3svARB((Int16*)v);
			}
		}

		public static void WindowPos3svARB(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos3svARB((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3svARB(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos3svARB((Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dARB(UInt32 index, Double x)
		{
			Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1dARB(Int32 index, Double x)
		{
			Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1dvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dvARB(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvARB(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvARB(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvARB(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fARB(UInt32 index, Single x)
		{
			Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1fARB(Int32 index, Single x)
		{
			Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1fvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fvARB(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvARB(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvARB(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvARB(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1sARB(UInt32 index, Int16 x)
		{
			Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1sARB(Int32 index, Int16 x)
		{
			Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1svARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1svARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1svARB(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svARB(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dARB(UInt32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2dARB(Int32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2dvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dvARB(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvARB(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvARB(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvARB(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fARB(UInt32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2fARB(Int32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2fvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fvARB(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvARB(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvARB(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvARB(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2sARB(UInt32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2sARB(Int32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2svARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2svARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2svARB(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svARB(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dARB(UInt32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3dARB(Int32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3dvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dvARB(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvARB(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvARB(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvARB(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fARB(UInt32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3fARB(Int32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3fvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fvARB(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvARB(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvARB(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvARB(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3sARB(UInt32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3sARB(Int32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3svARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3svARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3svARB(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svARB(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NbvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4NbvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4NbvARB(UInt32 index, SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NbvARB(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NbvARB(UInt32 index, ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NbvARB(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NivARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4NivARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4NivARB(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NivARB(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NivARB(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NivARB(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NsvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4NsvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4NsvARB(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NsvARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NsvARB(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NsvARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NubARB(UInt32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4NubARB(Int32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4NubvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4NubvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4NubvARB(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NubvARB(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NubvARB(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NubvARB(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NuivARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4NuivARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4NuivARB(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NuivARB(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NuivARB(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NuivARB(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NusvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4NusvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4NusvARB(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NusvARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NusvARB(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4NusvARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4bvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttrib4bvARB(UInt32 index, SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bvARB(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bvARB(UInt32 index, ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4bvARB(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dARB(UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4dARB(Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4dvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dvARB(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvARB(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvARB(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvARB(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fARB(UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4fARB(Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4fvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fvARB(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvARB(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvARB(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvARB(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ivARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4ivARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttrib4ivARB(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ivARB(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ivARB(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ivARB(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4sARB(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4sARB(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4svARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4svARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4svARB(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svARB(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubvARB(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvARB(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvARB(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvARB(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uivARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4uivARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttrib4uivARB(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uivARB(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uivARB(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4uivARB(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usvARB(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4usvARB(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4usvARB(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usvARB(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usvARB(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4usvARB(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribPointerARB(UInt32 index, Int32 size, GL type, Int32 normalized, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointerARB(Int32 index, Int32 size, GL type, Int32 normalized, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointerARB(UInt32 index, Int32 size, GL type, Int32 normalized, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexAttribPointerARB(Int32 index, Int32 size, GL type, Int32 normalized, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void EnableVertexAttribArrayARB(UInt32 index)
		{
			Delegates.glEnableVertexAttribArrayARB((UInt32)index);
		}

		public static void EnableVertexAttribArrayARB(Int32 index)
		{
			Delegates.glEnableVertexAttribArrayARB((UInt32)index);
		}

		public static void DisableVertexAttribArrayARB(UInt32 index)
		{
			Delegates.glDisableVertexAttribArrayARB((UInt32)index);
		}

		public static void DisableVertexAttribArrayARB(Int32 index)
		{
			Delegates.glDisableVertexAttribArrayARB((UInt32)index);
		}

		public static void ProgramStringARB(GL target, int format, Int32 len, IntPtr @string)
		{
			unsafe
			{
				Delegates.glProgramStringARB((int)target, (int)format, (Int32)len, (IntPtr)@string);
			}
		}

		public static void ProgramStringARB(GL target, int format, Int32 len, [In, Out] object @string)
		{
			unsafe
			{
				GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
				try
				{
					Delegates.glProgramStringARB((int)target, (int)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@string_ptr.Free();
				}
			}
		}

		public static void BindProgramARB(GL target, UInt32 program)
		{
			Delegates.glBindProgramARB((int)target, (UInt32)program);
		}

		public static void BindProgramARB(GL target, Int32 program)
		{
			Delegates.glBindProgramARB((int)target, (UInt32)program);
		}

		public static void DeleteProgramsARB(Int32 n, IntPtr programs)
		{
			unsafe
			{
				Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
			}
		}

		public static void DeleteProgramsARB(Int32 n, UInt32[] programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsARB(Int32 n, Int32[] programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsARB(Int32 n, ref UInt32 programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsARB(Int32 n, ref Int32 programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void GenProgramsARB(Int32 n, [Out] IntPtr programs)
		{
			unsafe
			{
				Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
			}
		}

		public static void GenProgramsARB(Int32 n, [Out] UInt32[] programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void GenProgramsARB(Int32 n, [Out] Int32[] programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void GenProgramsARB(Int32 n, [Out] out UInt32 programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
					programs = *programs_ptr;
				}
			}
		}

		public static void GenProgramsARB(Int32 n, [Out] out Int32 programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
					programs = *programs_ptr;
				}
			}
		}

		public static void ProgramEnvParameter4dARB(GL target, UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramEnvParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramEnvParameter4dARB(GL target, Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramEnvParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramEnvParameter4dvARB(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void ProgramEnvParameter4dvARB(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void ProgramEnvParameter4dvARB(GL target, UInt32 index, Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4dvARB(GL target, Int32 index, Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4dvARB(GL target, UInt32 index, ref Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4dvARB(GL target, Int32 index, ref Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4fARB(GL target, UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramEnvParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramEnvParameter4fARB(GL target, Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramEnvParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramEnvParameter4fvARB(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void ProgramEnvParameter4fvARB(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void ProgramEnvParameter4fvARB(GL target, UInt32 index, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4fvARB(GL target, Int32 index, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4fvARB(GL target, UInt32 index, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameter4fvARB(GL target, Int32 index, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4dARB(GL target, UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramLocalParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramLocalParameter4dARB(GL target, Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramLocalParameter4dARB((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramLocalParameter4dvARB(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void ProgramLocalParameter4dvARB(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void ProgramLocalParameter4dvARB(GL target, UInt32 index, Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4dvARB(GL target, Int32 index, Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4dvARB(GL target, UInt32 index, ref Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4dvARB(GL target, Int32 index, ref Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameter4dvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4fARB(GL target, UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramLocalParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramLocalParameter4fARB(GL target, Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramLocalParameter4fARB((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramLocalParameter4fvARB(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void ProgramLocalParameter4fvARB(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void ProgramLocalParameter4fvARB(GL target, UInt32 index, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4fvARB(GL target, Int32 index, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4fvARB(GL target, UInt32 index, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameter4fvARB(GL target, Int32 index, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameter4fvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, UInt32 index, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, Int32 index, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, UInt32 index, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterdvARB(GL target, Int32 index, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, UInt32 index, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, Int32 index, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, UInt32 index, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterfvARB(GL target, Int32 index, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params);
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, UInt32 index, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, Int32 index, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, UInt32 index, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterdvARB(GL target, Int32 index, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterdvARB((int)target, (UInt32)index, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params);
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, UInt32 index, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, Int32 index, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, UInt32 index, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterfvARB(GL target, Int32 index, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterfvARB((int)target, (UInt32)index, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramivARB(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramivARB((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetProgramivARB(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramivARB((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramivARB(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramivARB((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramStringARB(GL target, GL pname, [Out] IntPtr @string)
		{
			unsafe
			{
				Delegates.glGetProgramStringARB((int)target, (int)pname, (IntPtr)@string);
			}
		}

		public static void GetProgramStringARB(GL target, GL pname, [In, Out] object @string)
		{
			unsafe
			{
				GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
				try
				{
					Delegates.glGetProgramStringARB((int)target, (int)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@string_ptr.Free();
				}
			}
		}

		public static void GetVertexAttribdvARB(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdvARB(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdvARB(UInt32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdvARB(Int32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdvARB(UInt32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribdvARB(Int32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdvARB((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfvARB(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfvARB(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfvARB(UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfvARB(Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfvARB(UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfvARB(Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfvARB((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribivARB(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribivARB(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribivARB(UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribivARB(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribivARB(UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribivARB(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribivARB((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribPointervARB(UInt32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointervARB(Int32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointervARB(UInt32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void GetVertexAttribPointervARB(Int32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointervARB((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static Int32 IsProgramARB(UInt32 program)
		{
			return Delegates.glIsProgramARB((UInt32)program);
		}

		public static Int32 IsProgramARB(Int32 program)
		{
			return Delegates.glIsProgramARB((UInt32)program);
		}

		public static void BindBufferARB(GL target, UInt32 buffer)
		{
			Delegates.glBindBufferARB((int)target, (UInt32)buffer);
		}

		public static void BindBufferARB(GL target, Int32 buffer)
		{
			Delegates.glBindBufferARB((int)target, (UInt32)buffer);
		}

		public static void DeleteBuffersARB(Int32 n, IntPtr buffers)
		{
			unsafe
			{
				Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
			}
		}

		public static void DeleteBuffersARB(Int32 n, UInt32[] buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = buffers)
				{
					Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffersARB(Int32 n, Int32[] buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = buffers)
				{
					Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffersARB(Int32 n, ref UInt32 buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = &buffers)
				{
					Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void DeleteBuffersARB(Int32 n, ref Int32 buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = &buffers)
				{
					Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffersARB(Int32 n, [Out] IntPtr buffers)
		{
			unsafe
			{
				Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
			}
		}

		public static void GenBuffersARB(Int32 n, [Out] UInt32[] buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = buffers)
				{
					Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffersARB(Int32 n, [Out] Int32[] buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = buffers)
				{
					Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		public static void GenBuffersARB(Int32 n, [Out] out UInt32 buffers)
		{
			unsafe
			{
				fixed (UInt32* buffers_ptr = &buffers)
				{
					Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		public static void GenBuffersARB(Int32 n, [Out] out Int32 buffers)
		{
			unsafe
			{
				fixed (Int32* buffers_ptr = &buffers)
				{
					Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		public static Int32 IsBufferARB(UInt32 buffer)
		{
			return Delegates.glIsBufferARB((UInt32)buffer);
		}

		public static Int32 IsBufferARB(Int32 buffer)
		{
			return Delegates.glIsBufferARB((UInt32)buffer);
		}

		public static void BufferDataARB(GL target, IntPtr size, IntPtr data, int usage)
		{
			unsafe
			{
				Delegates.glBufferDataARB((int)target, (IntPtr)size, (IntPtr)data, (int)usage);
			}
		}

		public static void BufferDataARB(GL target, IntPtr size, [In, Out] object data, int usage)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferDataARB((int)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (int)usage);
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void BufferSubDataARB(GL target, IntPtr offset, IntPtr size, IntPtr data)
		{
			unsafe
			{
				Delegates.glBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
			}
		}

		public static void BufferSubDataARB(GL target, IntPtr offset, IntPtr size, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetBufferSubDataARB(GL target, IntPtr offset, IntPtr size, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
			}
		}

		public static void GetBufferSubDataARB(GL target, IntPtr offset, IntPtr size, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glGetBufferSubDataARB((int)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static IntPtr MapBufferARB(GL target, int access)
		{
			return Delegates.glMapBufferARB((int)target, (int)access);
		}

		public static Int32 UnmapBufferARB(int target)
		{
			return Delegates.glUnmapBufferARB((int)target);
		}

		public static void GetBufferParameterivARB(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetBufferParameterivARB(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetBufferParameterivARB(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetBufferParameterivARB((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetBufferPointervARB(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetBufferPointervARB((int)target, (int)pname, (IntPtr)@params);
			}
		}

		public static void GetBufferPointervARB(GL target, GL pname, [In, Out] object @params)
		{
			unsafe
			{
				GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
				try
				{
					Delegates.glGetBufferPointervARB((int)target, (int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@params_ptr.Free();
				}
			}
		}

		public static void GenQueriesARB(Int32 n, [Out] IntPtr ids)
		{
			unsafe
			{
				Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
			}
		}

		public static void GenQueriesARB(Int32 n, [Out] UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenQueriesARB(Int32 n, [Out] Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenQueriesARB(Int32 n, [Out] out UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void GenQueriesARB(Int32 n, [Out] out Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void DeleteQueriesARB(Int32 n, IntPtr ids)
		{
			unsafe
			{
				Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
			}
		}

		public static void DeleteQueriesARB(Int32 n, UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueriesARB(Int32 n, Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueriesARB(Int32 n, ref UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteQueriesARB(Int32 n, ref Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static Int32 IsQueryARB(UInt32 id)
		{
			return Delegates.glIsQueryARB((UInt32)id);
		}

		public static Int32 IsQueryARB(Int32 id)
		{
			return Delegates.glIsQueryARB((UInt32)id);
		}

		public static void BeginQueryARB(GL target, UInt32 id)
		{
			Delegates.glBeginQueryARB((int)target, (UInt32)id);
		}

		public static void BeginQueryARB(GL target, Int32 id)
		{
			Delegates.glBeginQueryARB((int)target, (UInt32)id);
		}

		public static void EndQueryARB(int target)
		{
			Delegates.glEndQueryARB((int)target);
		}

		public static void GetQueryivARB(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryivARB((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryivARB(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryivARB((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryivARB(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryivARB((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectivARB(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryObjectivARB(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetQueryObjectivARB(UInt32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectivARB(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectivARB(UInt32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectivARB(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectivARB((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectuivARB(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetQueryObjectuivARB(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetQueryObjectuivARB(UInt32 id, GL pname, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectuivARB(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectuivARB(UInt32 id, GL pname, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectuivARB(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectuivARB((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void DeleteObjectARB(UInt32 obj)
		{
			Delegates.glDeleteObjectARB((UInt32)obj);
		}

		public static void DeleteObjectARB(Int32 obj)
		{
			Delegates.glDeleteObjectARB((UInt32)obj);
		}

		public static Int32 GetHandleARB(int pname)
		{
			return Delegates.glGetHandleARB((int)pname);
		}

		public static void DetachObjectARB(UInt32 containerObj, UInt32 attachedObj)
		{
			Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
		}

		public static void DetachObjectARB(Int32 containerObj, Int32 attachedObj)
		{
			Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
		}

		public static Int32 CreateShaderObjectARB(int shaderType)
		{
			return Delegates.glCreateShaderObjectARB((int)shaderType);
		}

		public static void ShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, IntPtr length)
		{
			unsafe
			{
				Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
			}
		}

		public static void ShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, IntPtr length)
		{
			unsafe
			{
				Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
			}
		}

		public static void ShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSourceARB(UInt32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void ShaderSourceARB(Int32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
				}
			}
		}

		public static void CompileShaderARB(UInt32 shaderObj)
		{
			Delegates.glCompileShaderARB((UInt32)shaderObj);
		}

		public static void CompileShaderARB(Int32 shaderObj)
		{
			Delegates.glCompileShaderARB((UInt32)shaderObj);
		}

		public static Int32 CreateProgramObjectARB()
		{
			return Delegates.glCreateProgramObjectARB();
		}

		public static void AttachObjectARB(UInt32 containerObj, UInt32 obj)
		{
			Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
		}

		public static void AttachObjectARB(Int32 containerObj, Int32 obj)
		{
			Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
		}

		public static void LinkProgramARB(UInt32 programObj)
		{
			Delegates.glLinkProgramARB((UInt32)programObj);
		}

		public static void LinkProgramARB(Int32 programObj)
		{
			Delegates.glLinkProgramARB((UInt32)programObj);
		}

		public static void UseProgramObjectARB(UInt32 programObj)
		{
			Delegates.glUseProgramObjectARB((UInt32)programObj);
		}

		public static void UseProgramObjectARB(Int32 programObj)
		{
			Delegates.glUseProgramObjectARB((UInt32)programObj);
		}

		public static void ValidateProgramARB(UInt32 programObj)
		{
			Delegates.glValidateProgramARB((UInt32)programObj);
		}

		public static void ValidateProgramARB(Int32 programObj)
		{
			Delegates.glValidateProgramARB((UInt32)programObj);
		}

		public static void Uniform1fARB(Int32 location, Single v0)
		{
			Delegates.glUniform1fARB((Int32)location, (Single)v0);
		}

		public static void Uniform2fARB(Int32 location, Single v0, Single v1)
		{
			Delegates.glUniform2fARB((Int32)location, (Single)v0, (Single)v1);
		}

		public static void Uniform3fARB(Int32 location, Single v0, Single v1, Single v2)
		{
			Delegates.glUniform3fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2);
		}

		public static void Uniform4fARB(Int32 location, Single v0, Single v1, Single v2, Single v3)
		{
			Delegates.glUniform4fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
		}

		public static void Uniform1iARB(Int32 location, Int32 v0)
		{
			Delegates.glUniform1iARB((Int32)location, (Int32)v0);
		}

		public static void Uniform2iARB(Int32 location, Int32 v0, Int32 v1)
		{
			Delegates.glUniform2iARB((Int32)location, (Int32)v0, (Int32)v1);
		}

		public static void Uniform3iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2)
		{
			Delegates.glUniform3iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
		}

		public static void Uniform4iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
		{
			Delegates.glUniform4iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
		}

		public static void Uniform1fvARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform1fvARB(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform1fvARB(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform2fvARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform2fvARB(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform2fvARB(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform3fvARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform3fvARB(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform3fvARB(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform4fvARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value);
			}
		}

		public static void Uniform4fvARB(Int32 location, Int32 count, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform4fvARB(Int32 location, Int32 count, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		public static void Uniform1ivARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform1ivARB(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform1ivARB(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform2ivARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform2ivARB(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform2ivARB(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform3ivARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform3ivARB(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform3ivARB(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform4ivARB(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value);
			}
		}

		public static void Uniform4ivARB(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void Uniform4ivARB(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2fvARB(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix2fvARB(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix2fvARB(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3fvARB(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix3fvARB(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix3fvARB(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4fvARB(Int32 location, Int32 count, Int32 transpose, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value);
			}
		}

		public static void UniformMatrix4fvARB(Int32 location, Int32 count, Int32 transpose, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void UniformMatrix4fvARB(Int32 location, Int32 count, Int32 transpose, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (Int32)transpose, (Single*)value_ptr);
				}
			}
		}

		public static void GetObjectParameterfvARB(UInt32 obj, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params);
			}
		}

		public static void GetObjectParameterfvARB(Int32 obj, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params);
			}
		}

		public static void GetObjectParameterfvARB(UInt32 obj, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetObjectParameterfvARB(Int32 obj, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetObjectParameterfvARB(UInt32 obj, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectParameterfvARB(Int32 obj, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetObjectParameterfvARB((UInt32)obj, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectParameterivARB(UInt32 obj, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params);
			}
		}

		public static void GetObjectParameterivARB(Int32 obj, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params);
			}
		}

		public static void GetObjectParameterivARB(UInt32 obj, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetObjectParameterivARB(Int32 obj, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetObjectParameterivARB(UInt32 obj, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectParameterivARB(Int32 obj, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetObjectParameterivARB((UInt32)obj, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetInfoLogARB(Int32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
			}
		}

		public static void GetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetInfoLogARB(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
				}
			}
		}

		public static void GetInfoLogARB(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetInfoLogARB(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
		{
			unsafe
			{
				Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] IntPtr obj)
		{
			unsafe
			{
				Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] IntPtr count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] IntPtr obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] UInt32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (UInt32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] Int32[] obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (Int32* obj_ptr = obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(UInt32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (UInt32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
					obj = *obj_ptr;
				}
			}
		}

		public static void GetAttachedObjectsARB(Int32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				fixed (Int32* obj_ptr = &obj)
				{
					Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
					count = *count_ptr;
					obj = *obj_ptr;
				}
			}
		}

		public static Int32 GetUniformLocationARB(UInt32 programObj, System.String name)
		{
			return Delegates.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
		}

		public static Int32 GetUniformLocationARB(Int32 programObj, System.String name)
		{
			return Delegates.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveUniformARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetUniformfvARB(UInt32 programObj, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
			}
		}

		public static void GetUniformfvARB(Int32 programObj, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
			}
		}

		public static void GetUniformfvARB(UInt32 programObj, Int32 location, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		public static void GetUniformfvARB(Int32 programObj, Int32 location, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		public static void GetUniformfvARB(UInt32 programObj, Int32 location, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformfvARB(Int32 programObj, Int32 location, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformivARB(UInt32 programObj, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
			}
		}

		public static void GetUniformivARB(Int32 programObj, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
			}
		}

		public static void GetUniformivARB(UInt32 programObj, Int32 location, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetUniformivARB(Int32 programObj, Int32 location, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetUniformivARB(UInt32 programObj, Int32 location, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformivARB(Int32 programObj, Int32 location, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
			}
		}

		public static void GetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] IntPtr length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
			}
		}

		public static void GetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
				}
			}
		}

		public static void GetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
				}
			}
		}

		public static void GetShaderSourceARB(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
					length = *length_ptr;
				}
			}
		}

		public static void GetShaderSourceARB(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
					length = *length_ptr;
				}
			}
		}

		public static void BindAttribLocationARB(UInt32 programObj, UInt32 index, System.String name)
		{
			Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
		}

		public static void BindAttribLocationARB(Int32 programObj, Int32 index, System.String name)
		{
			Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveAttribARB(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static Int32 GetAttribLocationARB(UInt32 programObj, System.String name)
		{
			return Delegates.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
		}

		public static Int32 GetAttribLocationARB(Int32 programObj, System.String name)
		{
			return Delegates.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
		}

		public static void DrawBuffersARB(Int32 n, IntPtr bufs)
		{
			unsafe
			{
				Delegates.glDrawBuffersARB((Int32)n, (int*)bufs);
			}
		}

		public static void DrawBuffersARB(Int32 n, int[] bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = bufs)
				{
					Delegates.glDrawBuffersARB((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static void DrawBuffersARB(Int32 n, ref int bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = &bufs)
				{
					Delegates.glDrawBuffersARB((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static void ClampColorARB(GL target, int clamp)
		{
			Delegates.glClampColorARB((int)target, (int)clamp);
		}

		public static void BlendColorEXT(Single red, Single green, Single blue, Single alpha)
		{
			Delegates.glBlendColorEXT((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		public static void PolygonOffsetEXT(Single factor, Single bias)
		{
			Delegates.glPolygonOffsetEXT((Single)factor, (Single)bias);
		}

		public static void TexImage3DEXT(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexImage3DEXT((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexImage3DEXT(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexImage3DEXT((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage3DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage3DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage1DEXT(GL target, Int32 level, Int32 xoffset, Int32 width, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage1DEXT(GL target, Int32 level, Int32 xoffset, Int32 width, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)width, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage2DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage2DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void CopyTexImage1DEXT(GL target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
		{
			Delegates.glCopyTexImage1DEXT((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
		}

		public static void CopyTexImage2DEXT(GL target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
		{
			Delegates.glCopyTexImage2DEXT((int)target, (Int32)level, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
		}

		public static void CopyTexSubImage1DEXT(GL target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyTexSubImage1DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void CopyTexSubImage2DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyTexSubImage2DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void CopyTexSubImage3DEXT(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyTexSubImage3DEXT((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void GetHistogramEXT(GL target, Int32 reset, int format, GL type, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetHistogramEXT((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values);
			}
		}

		public static void GetHistogramEXT(GL target, Int32 reset, int format, GL type, [In, Out] object values)
		{
			unsafe
			{
				GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
				try
				{
					Delegates.glGetHistogramEXT((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				}
				finally
				{
					values_ptr.Free();
				}
			}
		}

		public static void GetHistogramParameterfvEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetHistogramParameterfvEXT(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetHistogramParameterfvEXT(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetHistogramParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetHistogramParameterivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetHistogramParameterivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetHistogramParameterivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetHistogramParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMinmaxEXT(GL target, Int32 reset, int format, GL type, [Out] IntPtr values)
		{
			unsafe
			{
				Delegates.glGetMinmaxEXT((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values);
			}
		}

		public static void GetMinmaxEXT(GL target, Int32 reset, int format, GL type, [In, Out] object values)
		{
			unsafe
			{
				GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
				try
				{
					Delegates.glGetMinmaxEXT((int)target, (Int32)reset, (int)format, (int)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				}
				finally
				{
					values_ptr.Free();
				}
			}
		}

		public static void GetMinmaxParameterfvEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetMinmaxParameterfvEXT(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMinmaxParameterfvEXT(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMinmaxParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMinmaxParameterivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMinmaxParameterivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMinmaxParameterivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMinmaxParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void HistogramEXT(GL target, Int32 width, int internalformat, Int32 sink)
		{
			Delegates.glHistogramEXT((int)target, (Int32)width, (int)internalformat, (Int32)sink);
		}

		public static void MinmaxEXT(GL target, int internalformat, Int32 sink)
		{
			Delegates.glMinmaxEXT((int)target, (int)internalformat, (Int32)sink);
		}

		public static void ResetHistogramEXT(int target)
		{
			Delegates.glResetHistogramEXT((int)target);
		}

		public static void ResetMinmaxEXT(int target)
		{
			Delegates.glResetMinmaxEXT((int)target);
		}

		public static void ConvolutionFilter1DEXT(GL target, int internalformat, Int32 width, int format, GL type, IntPtr image)
		{
			unsafe
			{
				Delegates.glConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void ConvolutionFilter1DEXT(GL target, int internalformat, Int32 width, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void ConvolutionFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr image)
		{
			unsafe
			{
				Delegates.glConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void ConvolutionFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void ConvolutionParameterfEXT(GL target, GL pname, Single @params)
		{
			Delegates.glConvolutionParameterfEXT((int)target, (int)pname, (Single)@params);
		}

		public static void ConvolutionParameterfvEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void ConvolutionParameterfvEXT(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameterfvEXT(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameteriEXT(GL target, GL pname, Int32 @params)
		{
			Delegates.glConvolutionParameteriEXT((int)target, (int)pname, (Int32)@params);
		}

		public static void ConvolutionParameterivEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void ConvolutionParameterivEXT(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ConvolutionParameterivEXT(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CopyConvolutionFilter1DEXT(GL target, int internalformat, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyConvolutionFilter1DEXT((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void CopyConvolutionFilter2DEXT(GL target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
		{
			Delegates.glCopyConvolutionFilter2DEXT((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		public static void GetConvolutionFilterEXT(GL target, int format, GL type, [Out] IntPtr image)
		{
			unsafe
			{
				Delegates.glGetConvolutionFilterEXT((int)target, (int)format, (int)type, (IntPtr)image);
			}
		}

		public static void GetConvolutionFilterEXT(GL target, int format, GL type, [In, Out] object image)
		{
			unsafe
			{
				GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
				try
				{
					Delegates.glGetConvolutionFilterEXT((int)target, (int)format, (int)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				}
				finally
				{
					image_ptr.Free();
				}
			}
		}

		public static void GetConvolutionParameterfvEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetConvolutionParameterfvEXT(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetConvolutionParameterfvEXT(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetConvolutionParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetConvolutionParameterivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetConvolutionParameterivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetConvolutionParameterivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetConvolutionParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
		{
			unsafe
			{
				Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [Out] IntPtr row, [In, Out] object column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span);
				}
				finally
				{
					column_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [Out] IntPtr row, [In, Out] object column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					column_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [In, Out] object row, [Out] IntPtr column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column, (IntPtr)span);
				}
				finally
				{
					row_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [In, Out] object row, [Out] IntPtr column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [In, Out] object row, [In, Out] object column, [Out] IntPtr span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span);
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
				}
			}
		}

		public static void GetSeparableFilterEXT(GL target, int format, GL type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
				try
				{
					Delegates.glGetSeparableFilterEXT((int)target, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
					span_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr row, IntPtr column)
		{
			unsafe
			{
				Delegates.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column);
			}
		}

		public static void SeparableFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, IntPtr row, [In, Out] object column)
		{
			unsafe
			{
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
				}
				finally
				{
					column_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object row, IntPtr column)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column);
				}
				finally
				{
					row_ptr.Free();
				}
			}
		}

		public static void SeparableFilter2DEXT(GL target, int internalformat, Int32 width, Int32 height, int format, GL type, [In, Out] object row, [In, Out] object column)
		{
			unsafe
			{
				GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
				GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
				try
				{
					Delegates.glSeparableFilter2DEXT((int)target, (int)internalformat, (Int32)width, (Int32)height, (int)format, (int)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
				}
				finally
				{
					row_ptr.Free();
					column_ptr.Free();
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, IntPtr textures, [Out] IntPtr residences)
		{
			unsafe
			{
				return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (Int32*)residences);
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, IntPtr textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, IntPtr textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, UInt32[] textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, Int32[] textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, UInt32[] textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, Int32[] textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, UInt32[] textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, Int32[] textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref UInt32 textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref Int32 textures, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref UInt32 textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref Int32 textures, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref UInt32 textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreTexturesResidentEXT(Int32 n, ref Int32 textures, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static void BindTextureEXT(GL target, UInt32 texture)
		{
			Delegates.glBindTextureEXT((int)target, (UInt32)texture);
		}

		public static void BindTextureEXT(GL target, Int32 texture)
		{
			Delegates.glBindTextureEXT((int)target, (UInt32)texture);
		}

		public static void DeleteTexturesEXT(Int32 n, IntPtr textures)
		{
			unsafe
			{
				Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
			}
		}

		public static void DeleteTexturesEXT(Int32 n, UInt32[] textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTexturesEXT(Int32 n, Int32[] textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTexturesEXT(Int32 n, ref UInt32 textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void DeleteTexturesEXT(Int32 n, ref Int32 textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTexturesEXT(Int32 n, [Out] IntPtr textures)
		{
			unsafe
			{
				Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
			}
		}

		public static void GenTexturesEXT(Int32 n, [Out] UInt32[] textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTexturesEXT(Int32 n, [Out] Int32[] textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		public static void GenTexturesEXT(Int32 n, [Out] out UInt32 textures)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		public static void GenTexturesEXT(Int32 n, [Out] out Int32 textures)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		public static Int32 IsTextureEXT(UInt32 texture)
		{
			return Delegates.glIsTextureEXT((UInt32)texture);
		}

		public static Int32 IsTextureEXT(Int32 texture)
		{
			return Delegates.glIsTextureEXT((UInt32)texture);
		}

		public static void PrioritizeTexturesEXT(Int32 n, IntPtr textures, IntPtr priorities)
		{
			unsafe
			{
				Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, IntPtr textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, IntPtr textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, UInt32[] textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, Int32[] textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, UInt32[] textures, Single[] priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, Int32[] textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, UInt32[] textures, ref Single priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, Int32[] textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref UInt32 textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref Int32 textures, IntPtr priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref UInt32 textures, Single[] priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref Int32 textures, Single[] priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref UInt32 textures, ref Single priorities)
		{
			unsafe
			{
				fixed (UInt32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void PrioritizeTexturesEXT(Int32 n, ref Int32 textures, ref Single priorities)
		{
			unsafe
			{
				fixed (Int32* textures_ptr = &textures)
				fixed (Single* priorities_ptr = &priorities)
				{
					Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
				}
			}
		}

		public static void ArrayElementEXT(Int32 i)
		{
			Delegates.glArrayElementEXT((Int32)i);
		}

		public static void ColorPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glColorPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
			}
		}

		public static void ColorPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glColorPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void DrawArraysEXT(GL mode, Int32 first, Int32 count)
		{
			Delegates.glDrawArraysEXT((int)mode, (Int32)first, (Int32)count);
		}

		public static void EdgeFlagPointerEXT(Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (Int32*)pointer);
			}
		}

		public static void EdgeFlagPointerEXT(Int32 stride, Int32 count, Int32[] pointer)
		{
			unsafe
			{
				fixed (Int32* pointer_ptr = pointer)
				{
					Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (Int32*)pointer_ptr);
				}
			}
		}

		public static void EdgeFlagPointerEXT(Int32 stride, Int32 count, ref Int32 pointer)
		{
			unsafe
			{
				fixed (Int32* pointer_ptr = &pointer)
				{
					Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (Int32*)pointer_ptr);
				}
			}
		}

		public static void GetPointervEXT(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetPointervEXT((int)pname, (IntPtr)@params);
			}
		}

		public static void GetPointervEXT(GL pname, [In, Out] object @params)
		{
			unsafe
			{
				GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
				try
				{
					Delegates.glGetPointervEXT((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@params_ptr.Free();
				}
			}
		}

		public static void IndexPointerEXT(GL type, Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glIndexPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
			}
		}

		public static void IndexPointerEXT(GL type, Int32 stride, Int32 count, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glIndexPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void NormalPointerEXT(GL type, Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glNormalPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
			}
		}

		public static void NormalPointerEXT(GL type, Int32 stride, Int32 count, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glNormalPointerEXT((int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TexCoordPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glTexCoordPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
			}
		}

		public static void TexCoordPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glTexCoordPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
			}
		}

		public static void VertexPointerEXT(Int32 size, GL type, Int32 stride, Int32 count, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexPointerEXT((Int32)size, (int)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void BlendEquationEXT(int mode)
		{
			Delegates.glBlendEquationEXT((int)mode);
		}

		public static void PointParameterfEXT(GL pname, Single param)
		{
			Delegates.glPointParameterfEXT((int)pname, (Single)param);
		}

		public static void PointParameterfvEXT(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameterfvEXT((int)pname, (Single*)@params);
			}
		}

		public static void PointParameterfvEXT(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPointParameterfvEXT((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PointParameterfvEXT(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPointParameterfvEXT((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ColorSubTableEXT(GL target, Int32 start, Int32 count, int format, GL type, IntPtr data)
		{
			unsafe
			{
				Delegates.glColorSubTableEXT((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data);
			}
		}

		public static void ColorSubTableEXT(GL target, Int32 start, Int32 count, int format, GL type, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glColorSubTableEXT((int)target, (Int32)start, (Int32)count, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void CopyColorSubTableEXT(GL target, Int32 start, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyColorSubTableEXT((int)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void ColorTableEXT(GL target, int internalFormat, Int32 width, int format, GL type, IntPtr table)
		{
			unsafe
			{
				Delegates.glColorTableEXT((int)target, (int)internalFormat, (Int32)width, (int)format, (int)type, (IntPtr)table);
			}
		}

		public static void ColorTableEXT(GL target, int internalFormat, Int32 width, int format, GL type, [In, Out] object table)
		{
			unsafe
			{
				GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
				try
				{
					Delegates.glColorTableEXT((int)target, (int)internalFormat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				}
				finally
				{
					table_ptr.Free();
				}
			}
		}

		public static void GetColorTableEXT(GL target, int format, GL type, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetColorTableEXT((int)target, (int)format, (int)type, (IntPtr)data);
			}
		}

		public static void GetColorTableEXT(GL target, int format, GL type, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glGetColorTableEXT((int)target, (int)format, (int)type, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetColorTableParameterivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetColorTableParameterivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameterivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetColorTableParameterfvEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetColorTableParameterfvEXT(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameterfvEXT(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void IndexMaterialEXT(int face, int mode)
		{
			Delegates.glIndexMaterialEXT((int)face, (int)mode);
		}

		public static void IndexFuncEXT(int func, Single @ref)
		{
			Delegates.glIndexFuncEXT((int)func, (Single)@ref);
		}

		public static void LockArraysEXT(Int32 first, Int32 count)
		{
			Delegates.glLockArraysEXT((Int32)first, (Int32)count);
		}

		public static void UnlockArraysEXT()
		{
			Delegates.glUnlockArraysEXT();
		}

		public static void CullParameterdvEXT(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glCullParameterdvEXT((int)pname, (Double*)@params);
			}
		}

		public static void CullParameterdvEXT(GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glCullParameterdvEXT((int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void CullParameterdvEXT(GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glCullParameterdvEXT((int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void CullParameterfvEXT(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glCullParameterfvEXT((int)pname, (Single*)@params);
			}
		}

		public static void CullParameterfvEXT(GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glCullParameterfvEXT((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void CullParameterfvEXT(GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glCullParameterfvEXT((int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void DrawRangeElementsEXT(GL mode, UInt32 start, UInt32 end, Int32 count, GL type, IntPtr indices)
		{
			unsafe
			{
				Delegates.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
			}
		}

		public static void DrawRangeElementsEXT(GL mode, Int32 start, Int32 end, Int32 count, GL type, IntPtr indices)
		{
			unsafe
			{
				Delegates.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices);
			}
		}

		public static void DrawRangeElementsEXT(GL mode, UInt32 start, UInt32 end, Int32 count, GL type, [In, Out] object indices)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void DrawRangeElementsEXT(GL mode, Int32 start, Int32 end, Int32 count, GL type, [In, Out] object indices)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawRangeElementsEXT((int)mode, (UInt32)start, (UInt32)end, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void ApplyTextureEXT(int mode)
		{
			Delegates.glApplyTextureEXT((int)mode);
		}

		public static void TextureLightEXT(int pname)
		{
			Delegates.glTextureLightEXT((int)pname);
		}

		public static void TextureMaterialEXT(int face, int mode)
		{
			Delegates.glTextureMaterialEXT((int)face, (int)mode);
		}

		public static void PixelTransformParameteriEXT(GL target, GL pname, Int32 param)
		{
			Delegates.glPixelTransformParameteriEXT((int)target, (int)pname, (Int32)param);
		}

		public static void PixelTransformParameterfEXT(GL target, GL pname, Single param)
		{
			Delegates.glPixelTransformParameterfEXT((int)target, (int)pname, (Single)param);
		}

		public static void PixelTransformParameterivEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void PixelTransformParameterivEXT(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PixelTransformParameterivEXT(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glPixelTransformParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PixelTransformParameterfvEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void PixelTransformParameterfvEXT(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PixelTransformParameterfvEXT(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPixelTransformParameterfvEXT((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void SecondaryColor3bEXT(SByte red, SByte green, SByte blue)
		{
			Delegates.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void SecondaryColor3bEXT(Byte red, Byte green, Byte blue)
		{
			Delegates.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
		}

		public static void SecondaryColor3bvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3bvEXT((SByte*)v);
			}
		}

		public static void SecondaryColor3bvEXT(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bvEXT(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bvEXT(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3bvEXT(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3dEXT(Double red, Double green, Double blue)
		{
			Delegates.glSecondaryColor3dEXT((Double)red, (Double)green, (Double)blue);
		}

		public static void SecondaryColor3dvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3dvEXT((Double*)v);
			}
		}

		public static void SecondaryColor3dvEXT(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3dvEXT(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3fEXT(Single red, Single green, Single blue)
		{
			Delegates.glSecondaryColor3fEXT((Single)red, (Single)green, (Single)blue);
		}

		public static void SecondaryColor3fvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3fvEXT((Single*)v);
			}
		}

		public static void SecondaryColor3fvEXT(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3fvEXT(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3iEXT(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glSecondaryColor3iEXT((Int32)red, (Int32)green, (Int32)blue);
		}

		public static void SecondaryColor3ivEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3ivEXT((Int32*)v);
			}
		}

		public static void SecondaryColor3ivEXT(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ivEXT(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3sEXT(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glSecondaryColor3sEXT((Int16)red, (Int16)green, (Int16)blue);
		}

		public static void SecondaryColor3svEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3svEXT((Int16*)v);
			}
		}

		public static void SecondaryColor3svEXT(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3svEXT(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ubEXT(Byte red, Byte green, Byte blue)
		{
			Delegates.glSecondaryColor3ubEXT((Byte)red, (Byte)green, (Byte)blue);
		}

		public static void SecondaryColor3ubvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3ubvEXT((Byte*)v);
			}
		}

		public static void SecondaryColor3ubvEXT(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3ubvEXT(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uiEXT(UInt32 red, UInt32 green, UInt32 blue)
		{
			Delegates.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void SecondaryColor3uiEXT(Int32 red, Int32 green, Int32 blue)
		{
			Delegates.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
		}

		public static void SecondaryColor3uivEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3uivEXT((UInt32*)v);
			}
		}

		public static void SecondaryColor3uivEXT(UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uivEXT(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uivEXT(ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3uivEXT(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usEXT(UInt16 red, UInt16 green, UInt16 blue)
		{
			Delegates.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3usEXT(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3usvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3usvEXT((UInt16*)v);
			}
		}

		public static void SecondaryColor3usvEXT(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usvEXT(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usvEXT(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3usvEXT(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColorPointerEXT(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glSecondaryColorPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void SecondaryColorPointerEXT(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glSecondaryColorPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TextureNormalEXT(int mode)
		{
			Delegates.glTextureNormalEXT((int)mode);
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] IntPtr first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] IntPtr first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] IntPtr first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] Int32[] first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] Int32[] first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] out Int32 first, [Out] IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
					first = *first_ptr;
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] out Int32 first, [Out] Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					first = *first_ptr;
				}
			}
		}

		public static void MultiDrawArraysEXT(GL mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawArraysEXT((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					first = *first_ptr;
					count = *count_ptr;
				}
			}
		}

		public static void MultiDrawElementsEXT(GL mode, IntPtr count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count, (int)type, (IntPtr)indices, (Int32)primcount);
			}
		}

		public static void MultiDrawElementsEXT(GL mode, IntPtr count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void MultiDrawElementsEXT(GL mode, Int32[] count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementsEXT(GL mode, Int32[] count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiDrawElementsEXT(GL mode, ref Int32 count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementsEXT(GL mode, ref Int32 count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiDrawElementsEXT((int)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void FogCoordfEXT(Single coord)
		{
			Delegates.glFogCoordfEXT((Single)coord);
		}

		public static void FogCoordfvEXT(IntPtr coord)
		{
			unsafe
			{
				Delegates.glFogCoordfvEXT((Single*)coord);
			}
		}

		public static void FogCoordfvEXT(Single[] coord)
		{
			unsafe
			{
				fixed (Single* coord_ptr = coord)
				{
					Delegates.glFogCoordfvEXT((Single*)coord_ptr);
				}
			}
		}

		public static void FogCoordfvEXT(ref Single coord)
		{
			unsafe
			{
				fixed (Single* coord_ptr = &coord)
				{
					Delegates.glFogCoordfvEXT((Single*)coord_ptr);
				}
			}
		}

		public static void FogCoorddEXT(Double coord)
		{
			Delegates.glFogCoorddEXT((Double)coord);
		}

		public static void FogCoorddvEXT(IntPtr coord)
		{
			unsafe
			{
				Delegates.glFogCoorddvEXT((Double*)coord);
			}
		}

		public static void FogCoorddvEXT(Double[] coord)
		{
			unsafe
			{
				fixed (Double* coord_ptr = coord)
				{
					Delegates.glFogCoorddvEXT((Double*)coord_ptr);
				}
			}
		}

		public static void FogCoorddvEXT(ref Double coord)
		{
			unsafe
			{
				fixed (Double* coord_ptr = &coord)
				{
					Delegates.glFogCoorddvEXT((Double*)coord_ptr);
				}
			}
		}

		public static void FogCoordPointerEXT(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glFogCoordPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void FogCoordPointerEXT(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glFogCoordPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void Tangent3bEXT(SByte tx, SByte ty, SByte tz)
		{
			Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
		}

		public static void Tangent3bEXT(Byte tx, Byte ty, Byte tz)
		{
			Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
		}

		public static void Tangent3bvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glTangent3bvEXT((SByte*)v);
			}
		}

		public static void Tangent3bvEXT(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glTangent3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Tangent3bvEXT(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glTangent3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Tangent3bvEXT(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glTangent3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Tangent3bvEXT(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glTangent3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Tangent3dEXT(Double tx, Double ty, Double tz)
		{
			Delegates.glTangent3dEXT((Double)tx, (Double)ty, (Double)tz);
		}

		public static void Tangent3dvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glTangent3dvEXT((Double*)v);
			}
		}

		public static void Tangent3dvEXT(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glTangent3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void Tangent3dvEXT(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glTangent3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void Tangent3fEXT(Single tx, Single ty, Single tz)
		{
			Delegates.glTangent3fEXT((Single)tx, (Single)ty, (Single)tz);
		}

		public static void Tangent3fvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glTangent3fvEXT((Single*)v);
			}
		}

		public static void Tangent3fvEXT(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTangent3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void Tangent3fvEXT(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTangent3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void Tangent3iEXT(Int32 tx, Int32 ty, Int32 tz)
		{
			Delegates.glTangent3iEXT((Int32)tx, (Int32)ty, (Int32)tz);
		}

		public static void Tangent3ivEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glTangent3ivEXT((Int32*)v);
			}
		}

		public static void Tangent3ivEXT(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glTangent3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void Tangent3ivEXT(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glTangent3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void Tangent3sEXT(Int16 tx, Int16 ty, Int16 tz)
		{
			Delegates.glTangent3sEXT((Int16)tx, (Int16)ty, (Int16)tz);
		}

		public static void Tangent3svEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glTangent3svEXT((Int16*)v);
			}
		}

		public static void Tangent3svEXT(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTangent3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void Tangent3svEXT(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTangent3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void Binormal3bEXT(SByte bx, SByte by, SByte bz)
		{
			Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
		}

		public static void Binormal3bEXT(Byte bx, Byte by, Byte bz)
		{
			Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
		}

		public static void Binormal3bvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glBinormal3bvEXT((SByte*)v);
			}
		}

		public static void Binormal3bvEXT(SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glBinormal3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Binormal3bvEXT(Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glBinormal3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Binormal3bvEXT(ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glBinormal3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Binormal3bvEXT(ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glBinormal3bvEXT((SByte*)v_ptr);
				}
			}
		}

		public static void Binormal3dEXT(Double bx, Double by, Double bz)
		{
			Delegates.glBinormal3dEXT((Double)bx, (Double)by, (Double)bz);
		}

		public static void Binormal3dvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glBinormal3dvEXT((Double*)v);
			}
		}

		public static void Binormal3dvEXT(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glBinormal3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void Binormal3dvEXT(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glBinormal3dvEXT((Double*)v_ptr);
				}
			}
		}

		public static void Binormal3fEXT(Single bx, Single by, Single bz)
		{
			Delegates.glBinormal3fEXT((Single)bx, (Single)by, (Single)bz);
		}

		public static void Binormal3fvEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glBinormal3fvEXT((Single*)v);
			}
		}

		public static void Binormal3fvEXT(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glBinormal3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void Binormal3fvEXT(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glBinormal3fvEXT((Single*)v_ptr);
				}
			}
		}

		public static void Binormal3iEXT(Int32 bx, Int32 by, Int32 bz)
		{
			Delegates.glBinormal3iEXT((Int32)bx, (Int32)by, (Int32)bz);
		}

		public static void Binormal3ivEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glBinormal3ivEXT((Int32*)v);
			}
		}

		public static void Binormal3ivEXT(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glBinormal3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void Binormal3ivEXT(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glBinormal3ivEXT((Int32*)v_ptr);
				}
			}
		}

		public static void Binormal3sEXT(Int16 bx, Int16 by, Int16 bz)
		{
			Delegates.glBinormal3sEXT((Int16)bx, (Int16)by, (Int16)bz);
		}

		public static void Binormal3svEXT(IntPtr v)
		{
			unsafe
			{
				Delegates.glBinormal3svEXT((Int16*)v);
			}
		}

		public static void Binormal3svEXT(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glBinormal3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void Binormal3svEXT(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glBinormal3svEXT((Int16*)v_ptr);
				}
			}
		}

		public static void TangentPointerEXT(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glTangentPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void TangentPointerEXT(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glTangentPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void BinormalPointerEXT(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glBinormalPointerEXT((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void BinormalPointerEXT(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glBinormalPointerEXT((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void BlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Delegates.glBlendFuncSeparateEXT((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
		}

		public static void VertexWeightfEXT(Single weight)
		{
			Delegates.glVertexWeightfEXT((Single)weight);
		}

		public static void VertexWeightfvEXT(IntPtr weight)
		{
			unsafe
			{
				Delegates.glVertexWeightfvEXT((Single*)weight);
			}
		}

		public static void VertexWeightfvEXT(Single[] weight)
		{
			unsafe
			{
				fixed (Single* weight_ptr = weight)
				{
					Delegates.glVertexWeightfvEXT((Single*)weight_ptr);
				}
			}
		}

		public static void VertexWeightfvEXT(ref Single weight)
		{
			unsafe
			{
				fixed (Single* weight_ptr = &weight)
				{
					Delegates.glVertexWeightfvEXT((Single*)weight_ptr);
				}
			}
		}

		public static void VertexWeightPointerEXT(Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexWeightPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexWeightPointerEXT(Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexWeightPointerEXT((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void SampleMaskEXT(Single value, Int32 invert)
		{
			Delegates.glSampleMaskEXT((Single)value, (Int32)invert);
		}

		public static void SamplePatternEXT(int pattern)
		{
			Delegates.glSamplePatternEXT((int)pattern);
		}

		public static void BeginVertexShaderEXT()
		{
			Delegates.glBeginVertexShaderEXT();
		}

		public static void EndVertexShaderEXT()
		{
			Delegates.glEndVertexShaderEXT();
		}

		public static void BindVertexShaderEXT(UInt32 id)
		{
			Delegates.glBindVertexShaderEXT((UInt32)id);
		}

		public static void BindVertexShaderEXT(Int32 id)
		{
			Delegates.glBindVertexShaderEXT((UInt32)id);
		}

		public static Int32 GenVertexShadersEXT(UInt32 range)
		{
			return Delegates.glGenVertexShadersEXT((UInt32)range);
		}

		public static Int32 GenVertexShadersEXT(Int32 range)
		{
			return Delegates.glGenVertexShadersEXT((UInt32)range);
		}

		public static void DeleteVertexShaderEXT(UInt32 id)
		{
			Delegates.glDeleteVertexShaderEXT((UInt32)id);
		}

		public static void DeleteVertexShaderEXT(Int32 id)
		{
			Delegates.glDeleteVertexShaderEXT((UInt32)id);
		}

		public static void ShaderOp1EXT(int op, UInt32 res, UInt32 arg1)
		{
			Delegates.glShaderOp1EXT((int)op, (UInt32)res, (UInt32)arg1);
		}

		public static void ShaderOp1EXT(int op, Int32 res, Int32 arg1)
		{
			Delegates.glShaderOp1EXT((int)op, (UInt32)res, (UInt32)arg1);
		}

		public static void ShaderOp2EXT(int op, UInt32 res, UInt32 arg1, UInt32 arg2)
		{
			Delegates.glShaderOp2EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
		}

		public static void ShaderOp2EXT(int op, Int32 res, Int32 arg1, Int32 arg2)
		{
			Delegates.glShaderOp2EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
		}

		public static void ShaderOp3EXT(int op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
		{
			Delegates.glShaderOp3EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
		}

		public static void ShaderOp3EXT(int op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
		{
			Delegates.glShaderOp3EXT((int)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
		}

		public static void SwizzleEXT(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
		{
			Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
		}

		public static void SwizzleEXT(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
		{
			Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
		}

		public static void WriteMaskEXT(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
		{
			Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
		}

		public static void WriteMaskEXT(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
		{
			Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (int)outX, (int)outY, (int)outZ, (int)outW);
		}

		public static void InsertComponentEXT(UInt32 res, UInt32 src, UInt32 num)
		{
			Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
		}

		public static void InsertComponentEXT(Int32 res, Int32 src, Int32 num)
		{
			Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
		}

		public static void ExtractComponentEXT(UInt32 res, UInt32 src, UInt32 num)
		{
			Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
		}

		public static void ExtractComponentEXT(Int32 res, Int32 src, Int32 num)
		{
			Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
		}

		public static Int32 GenSymbolsEXT(int datatype, int storagetype, int range, UInt32 components)
		{
			return Delegates.glGenSymbolsEXT((int)datatype, (int)storagetype, (int)range, (UInt32)components);
		}

		public static Int32 GenSymbolsEXT(int datatype, int storagetype, int range, Int32 components)
		{
			return Delegates.glGenSymbolsEXT((int)datatype, (int)storagetype, (int)range, (UInt32)components);
		}

		public static void SetInvariantEXT(UInt32 id, GL type, IntPtr addr)
		{
			unsafe
			{
				Delegates.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr);
			}
		}

		public static void SetInvariantEXT(Int32 id, GL type, IntPtr addr)
		{
			unsafe
			{
				Delegates.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr);
			}
		}

		public static void SetInvariantEXT(UInt32 id, GL type, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void SetInvariantEXT(Int32 id, GL type, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glSetInvariantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void SetLocalConstantEXT(UInt32 id, GL type, IntPtr addr)
		{
			unsafe
			{
				Delegates.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr);
			}
		}

		public static void SetLocalConstantEXT(Int32 id, GL type, IntPtr addr)
		{
			unsafe
			{
				Delegates.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr);
			}
		}

		public static void SetLocalConstantEXT(UInt32 id, GL type, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void SetLocalConstantEXT(Int32 id, GL type, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glSetLocalConstantEXT((UInt32)id, (int)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void VariantbvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr);
			}
		}

		public static void VariantbvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr);
			}
		}

		public static void VariantbvEXT(UInt32 id, SByte[] addr)
		{
			unsafe
			{
				fixed (SByte* addr_ptr = addr)
				{
					Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
				}
			}
		}

		public static void VariantbvEXT(Int32 id, Byte[] addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = addr)
				{
					Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
				}
			}
		}

		public static void VariantbvEXT(UInt32 id, ref SByte addr)
		{
			unsafe
			{
				fixed (SByte* addr_ptr = &addr)
				{
					Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
				}
			}
		}

		public static void VariantbvEXT(Int32 id, ref Byte addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = &addr)
				{
					Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
				}
			}
		}

		public static void VariantsvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
			}
		}

		public static void VariantsvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
			}
		}

		public static void VariantsvEXT(UInt32 id, Int16[] addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = addr)
				{
					Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
				}
			}
		}

		public static void VariantsvEXT(Int32 id, Int16[] addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = addr)
				{
					Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
				}
			}
		}

		public static void VariantsvEXT(UInt32 id, ref Int16 addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = &addr)
				{
					Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
				}
			}
		}

		public static void VariantsvEXT(Int32 id, ref Int16 addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = &addr)
				{
					Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
				}
			}
		}

		public static void VariantivEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
			}
		}

		public static void VariantivEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
			}
		}

		public static void VariantivEXT(UInt32 id, Int32[] addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = addr)
				{
					Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
				}
			}
		}

		public static void VariantivEXT(Int32 id, Int32[] addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = addr)
				{
					Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
				}
			}
		}

		public static void VariantivEXT(UInt32 id, ref Int32 addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = &addr)
				{
					Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
				}
			}
		}

		public static void VariantivEXT(Int32 id, ref Int32 addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = &addr)
				{
					Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
				}
			}
		}

		public static void VariantfvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
			}
		}

		public static void VariantfvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
			}
		}

		public static void VariantfvEXT(UInt32 id, Single[] addr)
		{
			unsafe
			{
				fixed (Single* addr_ptr = addr)
				{
					Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
				}
			}
		}

		public static void VariantfvEXT(Int32 id, Single[] addr)
		{
			unsafe
			{
				fixed (Single* addr_ptr = addr)
				{
					Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
				}
			}
		}

		public static void VariantfvEXT(UInt32 id, ref Single addr)
		{
			unsafe
			{
				fixed (Single* addr_ptr = &addr)
				{
					Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
				}
			}
		}

		public static void VariantfvEXT(Int32 id, ref Single addr)
		{
			unsafe
			{
				fixed (Single* addr_ptr = &addr)
				{
					Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
				}
			}
		}

		public static void VariantdvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
			}
		}

		public static void VariantdvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
			}
		}

		public static void VariantdvEXT(UInt32 id, Double[] addr)
		{
			unsafe
			{
				fixed (Double* addr_ptr = addr)
				{
					Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
				}
			}
		}

		public static void VariantdvEXT(Int32 id, Double[] addr)
		{
			unsafe
			{
				fixed (Double* addr_ptr = addr)
				{
					Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
				}
			}
		}

		public static void VariantdvEXT(UInt32 id, ref Double addr)
		{
			unsafe
			{
				fixed (Double* addr_ptr = &addr)
				{
					Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
				}
			}
		}

		public static void VariantdvEXT(Int32 id, ref Double addr)
		{
			unsafe
			{
				fixed (Double* addr_ptr = &addr)
				{
					Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
				}
			}
		}

		public static void VariantubvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
			}
		}

		public static void VariantubvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
			}
		}

		public static void VariantubvEXT(UInt32 id, Byte[] addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = addr)
				{
					Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
				}
			}
		}

		public static void VariantubvEXT(Int32 id, Byte[] addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = addr)
				{
					Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
				}
			}
		}

		public static void VariantubvEXT(UInt32 id, ref Byte addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = &addr)
				{
					Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
				}
			}
		}

		public static void VariantubvEXT(Int32 id, ref Byte addr)
		{
			unsafe
			{
				fixed (Byte* addr_ptr = &addr)
				{
					Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
				}
			}
		}

		public static void VariantusvEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
			}
		}

		public static void VariantusvEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
			}
		}

		public static void VariantusvEXT(UInt32 id, UInt16[] addr)
		{
			unsafe
			{
				fixed (UInt16* addr_ptr = addr)
				{
					Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
				}
			}
		}

		public static void VariantusvEXT(Int32 id, Int16[] addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = addr)
				{
					Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
				}
			}
		}

		public static void VariantusvEXT(UInt32 id, ref UInt16 addr)
		{
			unsafe
			{
				fixed (UInt16* addr_ptr = &addr)
				{
					Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
				}
			}
		}

		public static void VariantusvEXT(Int32 id, ref Int16 addr)
		{
			unsafe
			{
				fixed (Int16* addr_ptr = &addr)
				{
					Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
				}
			}
		}

		public static void VariantuivEXT(UInt32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
			}
		}

		public static void VariantuivEXT(Int32 id, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
			}
		}

		public static void VariantuivEXT(UInt32 id, UInt32[] addr)
		{
			unsafe
			{
				fixed (UInt32* addr_ptr = addr)
				{
					Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
				}
			}
		}

		public static void VariantuivEXT(Int32 id, Int32[] addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = addr)
				{
					Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
				}
			}
		}

		public static void VariantuivEXT(UInt32 id, ref UInt32 addr)
		{
			unsafe
			{
				fixed (UInt32* addr_ptr = &addr)
				{
					Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
				}
			}
		}

		public static void VariantuivEXT(Int32 id, ref Int32 addr)
		{
			unsafe
			{
				fixed (Int32* addr_ptr = &addr)
				{
					Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
				}
			}
		}

		public static void VariantPointerEXT(UInt32 id, GL type, UInt32 stride, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr);
			}
		}

		public static void VariantPointerEXT(Int32 id, GL type, Int32 stride, IntPtr addr)
		{
			unsafe
			{
				Delegates.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr);
			}
		}

		public static void VariantPointerEXT(UInt32 id, GL type, UInt32 stride, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void VariantPointerEXT(Int32 id, GL type, Int32 stride, [In, Out] object addr)
		{
			unsafe
			{
				GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
				try
				{
					Delegates.glVariantPointerEXT((UInt32)id, (int)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
				}
				finally
				{
					addr_ptr.Free();
				}
			}
		}

		public static void EnableVariantClientStateEXT(UInt32 id)
		{
			Delegates.glEnableVariantClientStateEXT((UInt32)id);
		}

		public static void EnableVariantClientStateEXT(Int32 id)
		{
			Delegates.glEnableVariantClientStateEXT((UInt32)id);
		}

		public static void DisableVariantClientStateEXT(UInt32 id)
		{
			Delegates.glDisableVariantClientStateEXT((UInt32)id);
		}

		public static void DisableVariantClientStateEXT(Int32 id)
		{
			Delegates.glDisableVariantClientStateEXT((UInt32)id);
		}

		public static Int32 BindLightParameterEXT(int light, int value)
		{
			return Delegates.glBindLightParameterEXT((int)light, (int)value);
		}

		public static Int32 BindMaterialParameterEXT(int face, int value)
		{
			return Delegates.glBindMaterialParameterEXT((int)face, (int)value);
		}

		public static Int32 BindTexGenParameterEXT(int unit, int coord, int value)
		{
			return Delegates.glBindTexGenParameterEXT((int)unit, (int)coord, (int)value);
		}

		public static Int32 BindTextureUnitParameterEXT(int unit, int value)
		{
			return Delegates.glBindTextureUnitParameterEXT((int)unit, (int)value);
		}

		public static Int32 BindParameterEXT(int value)
		{
			return Delegates.glBindParameterEXT((int)value);
		}

		public static Int32 IsVariantEnabledEXT(UInt32 id, int cap)
		{
			return Delegates.glIsVariantEnabledEXT((UInt32)id, (int)cap);
		}

		public static Int32 IsVariantEnabledEXT(Int32 id, int cap)
		{
			return Delegates.glIsVariantEnabledEXT((UInt32)id, (int)cap);
		}

		public static void GetVariantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetVariantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetVariantBooleanvEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetVariantBooleanvEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetVariantBooleanvEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantBooleanvEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetVariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetVariantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetVariantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetVariantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetVariantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetVariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetVariantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetVariantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetVariantFloatvEXT(Int32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetVariantFloatvEXT(UInt32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantFloatvEXT(Int32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetVariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetVariantPointervEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data);
			}
		}

		public static void GetVariantPointervEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data);
			}
		}

		public static void GetVariantPointervEXT(UInt32 id, int value, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetVariantPointervEXT(Int32 id, int value, [In, Out] object data)
		{
			unsafe
			{
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVariantPointervEXT((UInt32)id, (int)value, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
			}
		}

		public static void GetInvariantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetInvariantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetInvariantBooleanvEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetInvariantBooleanvEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetInvariantBooleanvEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetInvariantBooleanvEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetInvariantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetInvariantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetInvariantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetInvariantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetInvariantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetInvariantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetInvariantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetInvariantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetInvariantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetInvariantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetInvariantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetInvariantFloatvEXT(Int32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetInvariantFloatvEXT(UInt32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetInvariantFloatvEXT(Int32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetInvariantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetLocalConstantBooleanvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantBooleanvEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantBooleanvEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantBooleanvEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantIntegervEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetLocalConstantIntegervEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data);
			}
		}

		public static void GetLocalConstantIntegervEXT(UInt32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantIntegervEXT(Int32 id, int value, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantIntegervEXT(UInt32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantIntegervEXT(Int32 id, int value, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (int)value, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantFloatvEXT(UInt32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetLocalConstantFloatvEXT(Int32 id, int value, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data);
			}
		}

		public static void GetLocalConstantFloatvEXT(UInt32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantFloatvEXT(Int32 id, int value, [Out] Single[] data)
		{
			unsafe
			{
				fixed (Single* data_ptr = data)
				{
					Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
				}
			}
		}

		public static void GetLocalConstantFloatvEXT(UInt32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetLocalConstantFloatvEXT(Int32 id, int value, [Out] out Single data)
		{
			unsafe
			{
				fixed (Single* data_ptr = &data)
				{
					Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (int)value, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void ActiveStencilFaceEXT(int face)
		{
			Delegates.glActiveStencilFaceEXT((int)face);
		}

		public static void DepthBoundsEXT(Double zmin, Double zmax)
		{
			Delegates.glDepthBoundsEXT((Double)zmin, (Double)zmax);
		}

		public static void BlendEquationSeparateEXT(int modeRGB, int modeAlpha)
		{
			Delegates.glBlendEquationSeparateEXT((int)modeRGB, (int)modeAlpha);
		}

		public static Int32 IsRenderbufferEXT(UInt32 renderbuffer)
		{
			return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
		}

		public static Int32 IsRenderbufferEXT(Int32 renderbuffer)
		{
			return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
		}

		public static void BindRenderbufferEXT(GL target, UInt32 renderbuffer)
		{
			Delegates.glBindRenderbufferEXT((int)target, (UInt32)renderbuffer);
		}

		public static void BindRenderbufferEXT(GL target, Int32 renderbuffer)
		{
			Delegates.glBindRenderbufferEXT((int)target, (UInt32)renderbuffer);
		}

		public static void DeleteRenderbuffersEXT(Int32 n, IntPtr renderbuffers)
		{
			unsafe
			{
				Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
			}
		}

		public static void DeleteRenderbuffersEXT(Int32 n, UInt32[] renderbuffers)
		{
			unsafe
			{
				fixed (UInt32* renderbuffers_ptr = renderbuffers)
				{
					Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void DeleteRenderbuffersEXT(Int32 n, Int32[] renderbuffers)
		{
			unsafe
			{
				fixed (Int32* renderbuffers_ptr = renderbuffers)
				{
					Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void DeleteRenderbuffersEXT(Int32 n, ref UInt32 renderbuffers)
		{
			unsafe
			{
				fixed (UInt32* renderbuffers_ptr = &renderbuffers)
				{
					Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void DeleteRenderbuffersEXT(Int32 n, ref Int32 renderbuffers)
		{
			unsafe
			{
				fixed (Int32* renderbuffers_ptr = &renderbuffers)
				{
					Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void GenRenderbuffersEXT(Int32 n, [Out] IntPtr renderbuffers)
		{
			unsafe
			{
				Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
			}
		}

		public static void GenRenderbuffersEXT(Int32 n, [Out] UInt32[] renderbuffers)
		{
			unsafe
			{
				fixed (UInt32* renderbuffers_ptr = renderbuffers)
				{
					Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void GenRenderbuffersEXT(Int32 n, [Out] Int32[] renderbuffers)
		{
			unsafe
			{
				fixed (Int32* renderbuffers_ptr = renderbuffers)
				{
					Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		public static void GenRenderbuffersEXT(Int32 n, [Out] out UInt32 renderbuffers)
		{
			unsafe
			{
				fixed (UInt32* renderbuffers_ptr = &renderbuffers)
				{
					Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
					renderbuffers = *renderbuffers_ptr;
				}
			}
		}

		public static void GenRenderbuffersEXT(Int32 n, [Out] out Int32 renderbuffers)
		{
			unsafe
			{
				fixed (Int32* renderbuffers_ptr = &renderbuffers)
				{
					Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
					renderbuffers = *renderbuffers_ptr;
				}
			}
		}

		public static void RenderbufferStorageEXT(GL target, int internalformat, Int32 width, Int32 height)
		{
			Delegates.glRenderbufferStorageEXT((int)target, (int)internalformat, (Int32)width, (Int32)height);
		}

		public static void GetRenderbufferParameterivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetRenderbufferParameterivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetRenderbufferParameterivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetRenderbufferParameterivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static Int32 IsFramebufferEXT(UInt32 framebuffer)
		{
			return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
		}

		public static Int32 IsFramebufferEXT(Int32 framebuffer)
		{
			return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
		}

		public static void BindFramebufferEXT(GL target, UInt32 framebuffer)
		{
			Delegates.glBindFramebufferEXT((int)target, (UInt32)framebuffer);
		}

		public static void BindFramebufferEXT(GL target, Int32 framebuffer)
		{
			Delegates.glBindFramebufferEXT((int)target, (UInt32)framebuffer);
		}

		public static void DeleteFramebuffersEXT(Int32 n, IntPtr framebuffers)
		{
			unsafe
			{
				Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
			}
		}

		public static void DeleteFramebuffersEXT(Int32 n, UInt32[] framebuffers)
		{
			unsafe
			{
				fixed (UInt32* framebuffers_ptr = framebuffers)
				{
					Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void DeleteFramebuffersEXT(Int32 n, Int32[] framebuffers)
		{
			unsafe
			{
				fixed (Int32* framebuffers_ptr = framebuffers)
				{
					Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void DeleteFramebuffersEXT(Int32 n, ref UInt32 framebuffers)
		{
			unsafe
			{
				fixed (UInt32* framebuffers_ptr = &framebuffers)
				{
					Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void DeleteFramebuffersEXT(Int32 n, ref Int32 framebuffers)
		{
			unsafe
			{
				fixed (Int32* framebuffers_ptr = &framebuffers)
				{
					Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void GenFramebuffersEXT(Int32 n, [Out] IntPtr framebuffers)
		{
			unsafe
			{
				Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
			}
		}

		public static void GenFramebuffersEXT(Int32 n, [Out] UInt32[] framebuffers)
		{
			unsafe
			{
				fixed (UInt32* framebuffers_ptr = framebuffers)
				{
					Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void GenFramebuffersEXT(Int32 n, [Out] Int32[] framebuffers)
		{
			unsafe
			{
				fixed (Int32* framebuffers_ptr = framebuffers)
				{
					Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		public static void GenFramebuffersEXT(Int32 n, [Out] out UInt32 framebuffers)
		{
			unsafe
			{
				fixed (UInt32* framebuffers_ptr = &framebuffers)
				{
					Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
					framebuffers = *framebuffers_ptr;
				}
			}
		}

		public static void GenFramebuffersEXT(Int32 n, [Out] out Int32 framebuffers)
		{
			unsafe
			{
				fixed (Int32* framebuffers_ptr = &framebuffers)
				{
					Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
					framebuffers = *framebuffers_ptr;
				}
			}
		}

		public static int CheckFramebufferStatusEXT(int target)
		{
			return Delegates.glCheckFramebufferStatusEXT((int)target);
		}

		public static void FramebufferTexture1DEXT(GL target, int attachment, int textarget, UInt32 texture, Int32 level)
		{
			Delegates.glFramebufferTexture1DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTexture1DEXT(GL target, int attachment, int textarget, Int32 texture, Int32 level)
		{
			Delegates.glFramebufferTexture1DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTexture2DEXT(GL target, int attachment, int textarget, UInt32 texture, Int32 level)
		{
			Delegates.glFramebufferTexture2DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTexture2DEXT(GL target, int attachment, int textarget, Int32 texture, Int32 level)
		{
			Delegates.glFramebufferTexture2DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTexture3DEXT(GL target, int attachment, int textarget, UInt32 texture, Int32 level, Int32 zoffset)
		{
			Delegates.glFramebufferTexture3DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
		}

		public static void FramebufferTexture3DEXT(GL target, int attachment, int textarget, Int32 texture, Int32 level, Int32 zoffset)
		{
			Delegates.glFramebufferTexture3DEXT((int)target, (int)attachment, (int)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
		}

		public static void FramebufferRenderbufferEXT(GL target, int attachment, int renderbuffertarget, UInt32 renderbuffer)
		{
			Delegates.glFramebufferRenderbufferEXT((int)target, (int)attachment, (int)renderbuffertarget, (UInt32)renderbuffer);
		}

		public static void FramebufferRenderbufferEXT(GL target, int attachment, int renderbuffertarget, Int32 renderbuffer)
		{
			Delegates.glFramebufferRenderbufferEXT((int)target, (int)attachment, (int)renderbuffertarget, (UInt32)renderbuffer);
		}

		public static void GetFramebufferAttachmentParameterivEXT(GL target, int attachment, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFramebufferAttachmentParameterivEXT(GL target, int attachment, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFramebufferAttachmentParameterivEXT(GL target, int attachment, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFramebufferAttachmentParameterivEXT((int)target, (int)attachment, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GenerateMipmapEXT(int target)
		{
			Delegates.glGenerateMipmapEXT((int)target);
		}

		public static void StencilClearTagEXT(Int32 stencilTagBits, UInt32 stencilClearTag)
		{
			Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
		}

		public static void StencilClearTagEXT(Int32 stencilTagBits, Int32 stencilClearTag)
		{
			Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
		}

		public static void BlitFramebufferEXT(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, int mask, int filter)
		{
			Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (int)mask, (int)filter);
		}

		public static void RenderbufferStorageMultisampleEXT(GL target, Int32 samples, int internalformat, Int32 width, Int32 height)
		{
			Delegates.glRenderbufferStorageMultisampleEXT((int)target, (Int32)samples, (int)internalformat, (Int32)width, (Int32)height);
		}

		public static void GetQueryObjecti64vEXT(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params);
			}
		}

		public static void GetQueryObjecti64vEXT(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params);
			}
		}

		public static void GetQueryObjecti64vEXT(UInt32 id, GL pname, [Out] Int64[] @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = @params)
				{
					Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjecti64vEXT(Int32 id, GL pname, [Out] Int64[] @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = @params)
				{
					Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjecti64vEXT(UInt32 id, GL pname, [Out] out Int64 @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjecti64vEXT(Int32 id, GL pname, [Out] out Int64 @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjecti64vEXT((UInt32)id, (int)pname, (Int64*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectui64vEXT(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params);
			}
		}

		public static void GetQueryObjectui64vEXT(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params);
			}
		}

		public static void GetQueryObjectui64vEXT(UInt32 id, GL pname, [Out] UInt64[] @params)
		{
			unsafe
			{
				fixed (UInt64* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectui64vEXT(Int32 id, GL pname, [Out] Int64[] @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = @params)
				{
					Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
				}
			}
		}

		public static void GetQueryObjectui64vEXT(UInt32 id, GL pname, [Out] out UInt64 @params)
		{
			unsafe
			{
				fixed (UInt64* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetQueryObjectui64vEXT(Int32 id, GL pname, [Out] out Int64 @params)
		{
			unsafe
			{
				fixed (Int64* @params_ptr = &@params)
				{
					Delegates.glGetQueryObjectui64vEXT((UInt32)id, (int)pname, (UInt64*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, UInt32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, Int32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, UInt32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameters4fvEXT(GL target, Int32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, UInt32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, Int32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, UInt32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameters4fvEXT(GL target, Int32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameters4fvEXT((int)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void FramebufferTextureEXT(GL target, int attachment, UInt32 texture, Int32 level)
		{
			Delegates.glFramebufferTextureEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTextureEXT(GL target, int attachment, Int32 texture, Int32 level)
		{
			Delegates.glFramebufferTextureEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level);
		}

		public static void FramebufferTextureLayerEXT(GL target, int attachment, UInt32 texture, Int32 level, Int32 layer)
		{
			Delegates.glFramebufferTextureLayerEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
		}

		public static void FramebufferTextureLayerEXT(GL target, int attachment, Int32 texture, Int32 level, Int32 layer)
		{
			Delegates.glFramebufferTextureLayerEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
		}

		public static void FramebufferTextureFaceEXT(GL target, int attachment, UInt32 texture, Int32 level, int face)
		{
			Delegates.glFramebufferTextureFaceEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (int)face);
		}

		public static void FramebufferTextureFaceEXT(GL target, int attachment, Int32 texture, Int32 level, int face)
		{
			Delegates.glFramebufferTextureFaceEXT((int)target, (int)attachment, (UInt32)texture, (Int32)level, (int)face);
		}

		public static void ProgramParameteriEXT(UInt32 program, GL pname, Int32 value)
		{
			Delegates.glProgramParameteriEXT((UInt32)program, (int)pname, (Int32)value);
		}

		public static void ProgramParameteriEXT(Int32 program, GL pname, Int32 value)
		{
			Delegates.glProgramParameteriEXT((UInt32)program, (int)pname, (Int32)value);
		}

		public static void VertexAttribI1iEXT(UInt32 index, Int32 x)
		{
			Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
		}

		public static void VertexAttribI1iEXT(Int32 index, Int32 x)
		{
			Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
		}

		public static void VertexAttribI2iEXT(UInt32 index, Int32 x, Int32 y)
		{
			Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
		}

		public static void VertexAttribI2iEXT(Int32 index, Int32 x, Int32 y)
		{
			Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
		}

		public static void VertexAttribI3iEXT(UInt32 index, Int32 x, Int32 y, Int32 z)
		{
			Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
		}

		public static void VertexAttribI3iEXT(Int32 index, Int32 x, Int32 y, Int32 z)
		{
			Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
		}

		public static void VertexAttribI4iEXT(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void VertexAttribI4iEXT(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void VertexAttribI1uiEXT(UInt32 index, UInt32 x)
		{
			Delegates.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
		}

		public static void VertexAttribI1uiEXT(Int32 index, Int32 x)
		{
			Delegates.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
		}

		public static void VertexAttribI2uiEXT(UInt32 index, UInt32 x, UInt32 y)
		{
			Delegates.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
		}

		public static void VertexAttribI2uiEXT(Int32 index, Int32 x, Int32 y)
		{
			Delegates.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
		}

		public static void VertexAttribI3uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
		{
			Delegates.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
		}

		public static void VertexAttribI3uiEXT(Int32 index, Int32 x, Int32 y, Int32 z)
		{
			Delegates.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
		}

		public static void VertexAttribI4uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
		{
			Delegates.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void VertexAttribI4uiEXT(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void VertexAttribI1ivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI1ivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI1ivEXT(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1ivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1ivEXT(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1ivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2ivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI2ivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI2ivEXT(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2ivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2ivEXT(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2ivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3ivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI3ivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI3ivEXT(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3ivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3ivEXT(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3ivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI4ivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
			}
		}

		public static void VertexAttribI4ivEXT(UInt32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ivEXT(UInt32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1uivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI1uivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI1uivEXT(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1uivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1uivEXT(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI1uivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2uivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI2uivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI2uivEXT(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2uivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2uivEXT(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI2uivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3uivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI3uivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI3uivEXT(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3uivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3uivEXT(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI3uivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4uivEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI4uivEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
			}
		}

		public static void VertexAttribI4uivEXT(UInt32 index, UInt32[] v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = v)
				{
					Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4uivEXT(Int32 index, Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4uivEXT(UInt32 index, ref UInt32 v)
		{
			unsafe
			{
				fixed (UInt32* v_ptr = &v)
				{
					Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4uivEXT(Int32 index, ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4bvEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttribI4bvEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
			}
		}

		public static void VertexAttribI4bvEXT(UInt32 index, SByte[] v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = v)
				{
					Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4bvEXT(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4bvEXT(UInt32 index, ref SByte v)
		{
			unsafe
			{
				fixed (SByte* v_ptr = &v)
				{
					Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4bvEXT(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4svEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttribI4svEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttribI4svEXT(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4svEXT(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4svEXT(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4svEXT(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ubvEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttribI4ubvEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttribI4ubvEXT(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ubvEXT(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ubvEXT(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4ubvEXT(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4usvEXT(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttribI4usvEXT(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttribI4usvEXT(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4usvEXT(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4usvEXT(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribI4usvEXT(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribIPointerEXT(UInt32 index, Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribIPointerEXT(Int32 index, Int32 size, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribIPointerEXT(UInt32 index, Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexAttribIPointerEXT(Int32 index, Int32 size, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void GetVertexAttribIivEXT(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribIivEXT(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribIivEXT(UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribIivEXT(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribIivEXT(UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribIivEXT(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribIivEXT((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribIuivEXT(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetVertexAttribIuivEXT(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetVertexAttribIuivEXT(UInt32 index, GL pname, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribIuivEXT(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribIuivEXT(UInt32 index, GL pname, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribIuivEXT(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribIuivEXT((UInt32)index, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformuivEXT(UInt32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
			}
		}

		public static void GetUniformuivEXT(Int32 program, Int32 location, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
			}
		}

		public static void GetUniformuivEXT(UInt32 program, Int32 location, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetUniformuivEXT(Int32 program, Int32 location, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetUniformuivEXT(UInt32 program, Int32 location, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetUniformuivEXT(Int32 program, Int32 location, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void BindFragDataLocationEXT(UInt32 program, UInt32 color, System.String name)
		{
			Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
		}

		public static void BindFragDataLocationEXT(Int32 program, Int32 color, System.String name)
		{
			Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
		}

		public static Int32 GetFragDataLocationEXT(UInt32 program, System.String name)
		{
			return Delegates.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
		}

		public static Int32 GetFragDataLocationEXT(Int32 program, System.String name)
		{
			return Delegates.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
		}

		public static void Uniform1uiEXT(Int32 location, UInt32 v0)
		{
			Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
		}

		public static void Uniform1uiEXT(Int32 location, Int32 v0)
		{
			Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
		}

		public static void Uniform2uiEXT(Int32 location, UInt32 v0, UInt32 v1)
		{
			Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
		}

		public static void Uniform2uiEXT(Int32 location, Int32 v0, Int32 v1)
		{
			Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
		}

		public static void Uniform3uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
		{
			Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
		}

		public static void Uniform3uiEXT(Int32 location, Int32 v0, Int32 v1, Int32 v2)
		{
			Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
		}

		public static void Uniform4uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
		{
			Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
		}

		public static void Uniform4uiEXT(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
		{
			Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
		}

		public static void Uniform1uivEXT(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
			}
		}

		public static void Uniform1uivEXT(Int32 location, Int32 count, UInt32[] value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = value)
				{
					Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform1uivEXT(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform1uivEXT(Int32 location, Int32 count, ref UInt32 value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = &value)
				{
					Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform1uivEXT(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform2uivEXT(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
			}
		}

		public static void Uniform2uivEXT(Int32 location, Int32 count, UInt32[] value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = value)
				{
					Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform2uivEXT(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform2uivEXT(Int32 location, Int32 count, ref UInt32 value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = &value)
				{
					Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform2uivEXT(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform3uivEXT(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
			}
		}

		public static void Uniform3uivEXT(Int32 location, Int32 count, UInt32[] value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = value)
				{
					Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform3uivEXT(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform3uivEXT(Int32 location, Int32 count, ref UInt32 value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = &value)
				{
					Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform3uivEXT(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform4uivEXT(Int32 location, Int32 count, IntPtr value)
		{
			unsafe
			{
				Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
			}
		}

		public static void Uniform4uivEXT(Int32 location, Int32 count, UInt32[] value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = value)
				{
					Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform4uivEXT(Int32 location, Int32 count, Int32[] value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = value)
				{
					Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform4uivEXT(Int32 location, Int32 count, ref UInt32 value)
		{
			unsafe
			{
				fixed (UInt32* value_ptr = &value)
				{
					Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void Uniform4uivEXT(Int32 location, Int32 count, ref Int32 value)
		{
			unsafe
			{
				fixed (Int32* value_ptr = &value)
				{
					Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		public static void DrawArraysInstancedEXT(GL mode, Int32 start, Int32 count, Int32 primcount)
		{
			Delegates.glDrawArraysInstancedEXT((int)mode, (Int32)start, (Int32)count, (Int32)primcount);
		}

		public static void DrawElementsInstancedEXT(GL mode, Int32 count, GL type, IntPtr indices, Int32 primcount)
		{
			unsafe
			{
				Delegates.glDrawElementsInstancedEXT((int)mode, (Int32)count, (int)type, (IntPtr)indices, (Int32)primcount);
			}
		}

		public static void DrawElementsInstancedEXT(GL mode, Int32 count, GL type, [In, Out] object indices, Int32 primcount)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glDrawElementsInstancedEXT((int)mode, (Int32)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void TexBufferEXT(GL target, int internalformat, UInt32 buffer)
		{
			Delegates.glTexBufferEXT((int)target, (int)internalformat, (UInt32)buffer);
		}

		public static void TexBufferEXT(GL target, int internalformat, Int32 buffer)
		{
			Delegates.glTexBufferEXT((int)target, (int)internalformat, (UInt32)buffer);
		}

		public static void ColorMaskIndexedEXT(UInt32 index, Int32 r, Int32 g, Int32 b, Int32 a)
		{
			Delegates.glColorMaskIndexedEXT((UInt32)index, (Int32)r, (Int32)g, (Int32)b, (Int32)a);
		}

		public static void ColorMaskIndexedEXT(Int32 index, Int32 r, Int32 g, Int32 b, Int32 a)
		{
			Delegates.glColorMaskIndexedEXT((UInt32)index, (Int32)r, (Int32)g, (Int32)b, (Int32)a);
		}

		public static void GetBooleanIndexedvEXT(GL target, UInt32 index, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
			}
		}

		public static void GetBooleanIndexedvEXT(GL target, Int32 index, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
			}
		}

		public static void GetBooleanIndexedvEXT(GL target, UInt32 index, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		public static void GetBooleanIndexedvEXT(GL target, Int32 index, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		public static void GetBooleanIndexedvEXT(GL target, UInt32 index, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetBooleanIndexedvEXT(GL target, Int32 index, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetBooleanIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, UInt32 index, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, Int32 index, [Out] IntPtr data)
		{
			unsafe
			{
				Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data);
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, UInt32 index, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, Int32 index, [Out] Int32[] data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = data)
				{
					Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, UInt32 index, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void GetIntegerIndexedvEXT(GL target, Int32 index, [Out] out Int32 data)
		{
			unsafe
			{
				fixed (Int32* data_ptr = &data)
				{
					Delegates.glGetIntegerIndexedvEXT((int)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		public static void EnableIndexedEXT(GL target, UInt32 index)
		{
			Delegates.glEnableIndexedEXT((int)target, (UInt32)index);
		}

		public static void EnableIndexedEXT(GL target, Int32 index)
		{
			Delegates.glEnableIndexedEXT((int)target, (UInt32)index);
		}

		public static void DisableIndexedEXT(GL target, UInt32 index)
		{
			Delegates.glDisableIndexedEXT((int)target, (UInt32)index);
		}

		public static void DisableIndexedEXT(GL target, Int32 index)
		{
			Delegates.glDisableIndexedEXT((int)target, (UInt32)index);
		}

		public static Int32 IsEnabledIndexedEXT(GL target, UInt32 index)
		{
			return Delegates.glIsEnabledIndexedEXT((int)target, (UInt32)index);
		}

		public static Int32 IsEnabledIndexedEXT(GL target, Int32 index)
		{
			return Delegates.glIsEnabledIndexedEXT((int)target, (UInt32)index);
		}

		public static void UniformBufferEXT(UInt32 program, Int32 location, UInt32 buffer)
		{
			Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
		}

		public static void UniformBufferEXT(Int32 program, Int32 location, Int32 buffer)
		{
			Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
		}

		public static Int32 GetUniformBufferSizeEXT(UInt32 program, Int32 location)
		{
			return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
		}

		public static Int32 GetUniformBufferSizeEXT(Int32 program, Int32 location)
		{
			return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
		}

		public static IntPtr GetUniformOffsetEXT(UInt32 program, Int32 location)
		{
			return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
		}

		public static IntPtr GetUniformOffsetEXT(Int32 program, Int32 location)
		{
			return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
		}

		public static void TexParameterIivEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void TexParameterIivEXT(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexParameterIivEXT(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void TexParameterIuivEXT(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params);
			}
		}

		public static void TexParameterIuivEXT(GL target, GL pname, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void TexParameterIuivEXT(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void TexParameterIuivEXT(GL target, GL pname, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void TexParameterIuivEXT(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetTexParameterIivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTexParameterIivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTexParameterIivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexParameterIivEXT((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexParameterIuivEXT(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetTexParameterIuivEXT(GL target, GL pname, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetTexParameterIuivEXT(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetTexParameterIuivEXT(GL target, GL pname, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTexParameterIuivEXT(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTexParameterIuivEXT((int)target, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ClearColorIiEXT(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glClearColorIiEXT((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
		}

		public static void ClearColorIuiEXT(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
		{
			Delegates.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
		}

		public static void ClearColorIuiEXT(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
		}

		public static void GetTexFilterFuncSGIS(GL target, int filter, [Out] IntPtr weights)
		{
			unsafe
			{
				Delegates.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights);
			}
		}

		public static void GetTexFilterFuncSGIS(GL target, int filter, [Out] Single[] weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = weights)
				{
					Delegates.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights_ptr);
				}
			}
		}

		public static void GetTexFilterFuncSGIS(GL target, int filter, [Out] out Single weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = &weights)
				{
					Delegates.glGetTexFilterFuncSGIS((int)target, (int)filter, (Single*)weights_ptr);
					weights = *weights_ptr;
				}
			}
		}

		public static void TexFilterFuncSGIS(GL target, int filter, Int32 n, IntPtr weights)
		{
			unsafe
			{
				Delegates.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights);
			}
		}

		public static void TexFilterFuncSGIS(GL target, int filter, Int32 n, Single[] weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = weights)
				{
					Delegates.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights_ptr);
				}
			}
		}

		public static void TexFilterFuncSGIS(GL target, int filter, Int32 n, ref Single weights)
		{
			unsafe
			{
				fixed (Single* weights_ptr = &weights)
				{
					Delegates.glTexFilterFuncSGIS((int)target, (int)filter, (Int32)n, (Single*)weights_ptr);
				}
			}
		}

		public static void PixelTexGenParameteriSGIS(GL pname, Int32 param)
		{
			Delegates.glPixelTexGenParameteriSGIS((int)pname, (Int32)param);
		}

		public static void PixelTexGenParameterivSGIS(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params);
			}
		}

		public static void PixelTexGenParameterivSGIS(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PixelTexGenParameterivSGIS(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PixelTexGenParameterfSGIS(GL pname, Single param)
		{
			Delegates.glPixelTexGenParameterfSGIS((int)pname, (Single)param);
		}

		public static void PixelTexGenParameterfvSGIS(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params);
			}
		}

		public static void PixelTexGenParameterfvSGIS(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PixelTexGenParameterfvSGIS(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetPixelTexGenParameterivSGIS(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params);
			}
		}

		public static void GetPixelTexGenParameterivSGIS(GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetPixelTexGenParameterivSGIS(GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetPixelTexGenParameterivSGIS((int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetPixelTexGenParameterfvSGIS(GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params);
			}
		}

		public static void GetPixelTexGenParameterfvSGIS(GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetPixelTexGenParameterfvSGIS(GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetPixelTexGenParameterfvSGIS((int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void TexImage4DSGIS(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexImage4DSGIS((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexImage4DSGIS(GL target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexImage4DSGIS((int)target, (Int32)level, (int)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void TexSubImage4DSGIS(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, int format, GL type, IntPtr pixels)
		{
			unsafe
			{
				Delegates.glTexSubImage4DSGIS((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (int)format, (int)type, (IntPtr)pixels);
			}
		}

		public static void TexSubImage4DSGIS(GL target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, int format, GL type, [In, Out] object pixels)
		{
			unsafe
			{
				GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
				try
				{
					Delegates.glTexSubImage4DSGIS((int)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (int)format, (int)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pixels_ptr.Free();
				}
			}
		}

		public static void DetailTexFuncSGIS(GL target, Int32 n, IntPtr points)
		{
			unsafe
			{
				Delegates.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points);
			}
		}

		public static void DetailTexFuncSGIS(GL target, Int32 n, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void DetailTexFuncSGIS(GL target, Int32 n, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glDetailTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void GetDetailTexFuncSGIS(GL target, [Out] IntPtr points)
		{
			unsafe
			{
				Delegates.glGetDetailTexFuncSGIS((int)target, (Single*)points);
			}
		}

		public static void GetDetailTexFuncSGIS(GL target, [Out] Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glGetDetailTexFuncSGIS((int)target, (Single*)points_ptr);
				}
			}
		}

		public static void GetDetailTexFuncSGIS(GL target, [Out] out Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glGetDetailTexFuncSGIS((int)target, (Single*)points_ptr);
					points = *points_ptr;
				}
			}
		}

		public static void SharpenTexFuncSGIS(GL target, Int32 n, IntPtr points)
		{
			unsafe
			{
				Delegates.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points);
			}
		}

		public static void SharpenTexFuncSGIS(GL target, Int32 n, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void SharpenTexFuncSGIS(GL target, Int32 n, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glSharpenTexFuncSGIS((int)target, (Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void GetSharpenTexFuncSGIS(GL target, [Out] IntPtr points)
		{
			unsafe
			{
				Delegates.glGetSharpenTexFuncSGIS((int)target, (Single*)points);
			}
		}

		public static void GetSharpenTexFuncSGIS(GL target, [Out] Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glGetSharpenTexFuncSGIS((int)target, (Single*)points_ptr);
				}
			}
		}

		public static void GetSharpenTexFuncSGIS(GL target, [Out] out Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glGetSharpenTexFuncSGIS((int)target, (Single*)points_ptr);
					points = *points_ptr;
				}
			}
		}

		public static void SampleMaskSGIS(Single value, Int32 invert)
		{
			Delegates.glSampleMaskSGIS((Single)value, (Int32)invert);
		}

		public static void SamplePatternSGIS(int pattern)
		{
			Delegates.glSamplePatternSGIS((int)pattern);
		}

		public static void PointParameterfSGIS(GL pname, Single param)
		{
			Delegates.glPointParameterfSGIS((int)pname, (Single)param);
		}

		public static void PointParameterfvSGIS(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameterfvSGIS((int)pname, (Single*)@params);
			}
		}

		public static void PointParameterfvSGIS(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glPointParameterfvSGIS((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void PointParameterfvSGIS(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glPointParameterfvSGIS((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FogFuncSGIS(Int32 n, IntPtr points)
		{
			unsafe
			{
				Delegates.glFogFuncSGIS((Int32)n, (Single*)points);
			}
		}

		public static void FogFuncSGIS(Int32 n, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void FogFuncSGIS(Int32 n, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
				}
			}
		}

		public static void GetFogFuncSGIS([Out] IntPtr points)
		{
			unsafe
			{
				Delegates.glGetFogFuncSGIS((Single*)points);
			}
		}

		public static void GetFogFuncSGIS([Out] Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glGetFogFuncSGIS((Single*)points_ptr);
				}
			}
		}

		public static void GetFogFuncSGIS([Out] out Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glGetFogFuncSGIS((Single*)points_ptr);
					points = *points_ptr;
				}
			}
		}

		public static void TextureColorMaskSGIS(Int32 red, Int32 green, Int32 blue, Int32 alpha)
		{
			Delegates.glTextureColorMaskSGIS((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
		}

		public static void ColorTableSGI(GL target, int internalformat, Int32 width, int format, GL type, IntPtr table)
		{
			unsafe
			{
				Delegates.glColorTableSGI((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table);
			}
		}

		public static void ColorTableSGI(GL target, int internalformat, Int32 width, int format, GL type, [In, Out] object table)
		{
			unsafe
			{
				GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
				try
				{
					Delegates.glColorTableSGI((int)target, (int)internalformat, (Int32)width, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				}
				finally
				{
					table_ptr.Free();
				}
			}
		}

		public static void ColorTableParameterfvSGI(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void ColorTableParameterfvSGI(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameterfvSGI(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameterivSGI(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void ColorTableParameterivSGI(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ColorTableParameterivSGI(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CopyColorTableSGI(GL target, int internalformat, Int32 x, Int32 y, Int32 width)
		{
			Delegates.glCopyColorTableSGI((int)target, (int)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}

		public static void GetColorTableSGI(GL target, int format, GL type, [Out] IntPtr table)
		{
			unsafe
			{
				Delegates.glGetColorTableSGI((int)target, (int)format, (int)type, (IntPtr)table);
			}
		}

		public static void GetColorTableSGI(GL target, int format, GL type, [In, Out] object table)
		{
			unsafe
			{
				GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
				try
				{
					Delegates.glGetColorTableSGI((int)target, (int)format, (int)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				}
				finally
				{
					table_ptr.Free();
				}
			}
		}

		public static void GetColorTableParameterfvSGI(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetColorTableParameterfvSGI(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameterfvSGI(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameterfvSGI((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetColorTableParameterivSGI(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetColorTableParameterivSGI(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetColorTableParameterivSGI(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetColorTableParameterivSGI((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void PixelTexGenSGIX(int mode)
		{
			Delegates.glPixelTexGenSGIX((int)mode);
		}

		public static void SpriteParameterfSGIX(GL pname, Single param)
		{
			Delegates.glSpriteParameterfSGIX((int)pname, (Single)param);
		}

		public static void SpriteParameterfvSGIX(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glSpriteParameterfvSGIX((int)pname, (Single*)@params);
			}
		}

		public static void SpriteParameterfvSGIX(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glSpriteParameterfvSGIX((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void SpriteParameterfvSGIX(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glSpriteParameterfvSGIX((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void SpriteParameteriSGIX(GL pname, Int32 param)
		{
			Delegates.glSpriteParameteriSGIX((int)pname, (Int32)param);
		}

		public static void SpriteParameterivSGIX(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glSpriteParameterivSGIX((int)pname, (Int32*)@params);
			}
		}

		public static void SpriteParameterivSGIX(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glSpriteParameterivSGIX((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void SpriteParameterivSGIX(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glSpriteParameterivSGIX((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static Int32 GetInstrumentsSGIX()
		{
			return Delegates.glGetInstrumentsSGIX();
		}

		public static void InstrumentsBufferSGIX(Int32 size, [Out] IntPtr buffer)
		{
			unsafe
			{
				Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer);
			}
		}

		public static void InstrumentsBufferSGIX(Int32 size, [Out] Int32[] buffer)
		{
			unsafe
			{
				fixed (Int32* buffer_ptr = buffer)
				{
					Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
				}
			}
		}

		public static void InstrumentsBufferSGIX(Int32 size, [Out] out Int32 buffer)
		{
			unsafe
			{
				fixed (Int32* buffer_ptr = &buffer)
				{
					Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}

		public static Int32 PollInstrumentsSGIX([Out] IntPtr marker_p)
		{
			unsafe
			{
				return Delegates.glPollInstrumentsSGIX((Int32*)marker_p);
			}
		}

		public static Int32 PollInstrumentsSGIX([Out] Int32[] marker_p)
		{
			unsafe
			{
				fixed (Int32* marker_p_ptr = marker_p)
				{
					return Delegates.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
				}
			}
		}

		public static Int32 PollInstrumentsSGIX([Out] out Int32 marker_p)
		{
			unsafe
			{
				fixed (Int32* marker_p_ptr = &marker_p)
				{
					Int32 retval = Delegates.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
					marker_p = *marker_p_ptr;
					return retval;
				}
			}
		}

		public static void ReadInstrumentsSGIX(Int32 marker)
		{
			Delegates.glReadInstrumentsSGIX((Int32)marker);
		}

		public static void StartInstrumentsSGIX()
		{
			Delegates.glStartInstrumentsSGIX();
		}

		public static void StopInstrumentsSGIX(Int32 marker)
		{
			Delegates.glStopInstrumentsSGIX((Int32)marker);
		}

		public static void FrameZoomSGIX(Int32 factor)
		{
			Delegates.glFrameZoomSGIX((Int32)factor);
		}

		public static void TagSampleBufferSGIX()
		{
			Delegates.glTagSampleBufferSGIX();
		}

		public static void DeformationMap3dSGIX(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, IntPtr points)
		{
			unsafe
			{
				Delegates.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points);
			}
		}

		public static void DeformationMap3dSGIX(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double[] points)
		{
			unsafe
			{
				fixed (Double* points_ptr = points)
				{
					Delegates.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
				}
			}
		}

		public static void DeformationMap3dSGIX(GL target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, ref Double points)
		{
			unsafe
			{
				fixed (Double* points_ptr = &points)
				{
					Delegates.glDeformationMap3dSGIX((int)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
				}
			}
		}

		public static void DeformationMap3fSGIX(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, IntPtr points)
		{
			unsafe
			{
				Delegates.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points);
			}
		}

		public static void DeformationMap3fSGIX(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single[] points)
		{
			unsafe
			{
				fixed (Single* points_ptr = points)
				{
					Delegates.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
				}
			}
		}

		public static void DeformationMap3fSGIX(GL target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, ref Single points)
		{
			unsafe
			{
				fixed (Single* points_ptr = &points)
				{
					Delegates.glDeformationMap3fSGIX((int)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
				}
			}
		}

		public static void DeformSGIX(int mask)
		{
			Delegates.glDeformSGIX((int)mask);
		}

		public static void LoadIdentityDeformationMapSGIX(int mask)
		{
			Delegates.glLoadIdentityDeformationMapSGIX((int)mask);
		}

		public static void ReferencePlaneSGIX(IntPtr equation)
		{
			unsafe
			{
				Delegates.glReferencePlaneSGIX((Double*)equation);
			}
		}

		public static void ReferencePlaneSGIX(Double[] equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = equation)
				{
					Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
				}
			}
		}

		public static void ReferencePlaneSGIX(ref Double equation)
		{
			unsafe
			{
				fixed (Double* equation_ptr = &equation)
				{
					Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
				}
			}
		}

		public static void FlushRasterSGIX()
		{
			Delegates.glFlushRasterSGIX();
		}

		public static void GetListParameterfvSGIX(UInt32 list, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
			}
		}

		public static void GetListParameterfvSGIX(Int32 list, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
			}
		}

		public static void GetListParameterfvSGIX(UInt32 list, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetListParameterfvSGIX(Int32 list, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetListParameterfvSGIX(UInt32 list, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetListParameterfvSGIX(Int32 list, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetListParameterivSGIX(UInt32 list, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
			}
		}

		public static void GetListParameterivSGIX(Int32 list, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
			}
		}

		public static void GetListParameterivSGIX(UInt32 list, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetListParameterivSGIX(Int32 list, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetListParameterivSGIX(UInt32 list, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetListParameterivSGIX(Int32 list, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ListParameterfSGIX(UInt32 list, GL pname, Single param)
		{
			Delegates.glListParameterfSGIX((UInt32)list, (int)pname, (Single)param);
		}

		public static void ListParameterfSGIX(Int32 list, GL pname, Single param)
		{
			Delegates.glListParameterfSGIX((UInt32)list, (int)pname, (Single)param);
		}

		public static void ListParameterfvSGIX(UInt32 list, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
			}
		}

		public static void ListParameterfvSGIX(Int32 list, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params);
			}
		}

		public static void ListParameterfvSGIX(UInt32 list, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ListParameterfvSGIX(Int32 list, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ListParameterfvSGIX(UInt32 list, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ListParameterfvSGIX(Int32 list, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glListParameterfvSGIX((UInt32)list, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ListParameteriSGIX(UInt32 list, GL pname, Int32 param)
		{
			Delegates.glListParameteriSGIX((UInt32)list, (int)pname, (Int32)param);
		}

		public static void ListParameteriSGIX(Int32 list, GL pname, Int32 param)
		{
			Delegates.glListParameteriSGIX((UInt32)list, (int)pname, (Int32)param);
		}

		public static void ListParameterivSGIX(UInt32 list, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
			}
		}

		public static void ListParameterivSGIX(Int32 list, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params);
			}
		}

		public static void ListParameterivSGIX(UInt32 list, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ListParameterivSGIX(Int32 list, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ListParameterivSGIX(UInt32 list, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ListParameterivSGIX(Int32 list, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glListParameterivSGIX((UInt32)list, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentColorMaterialSGIX(int face, int mode)
		{
			Delegates.glFragmentColorMaterialSGIX((int)face, (int)mode);
		}

		public static void FragmentLightfSGIX(int light, GL pname, Single param)
		{
			Delegates.glFragmentLightfSGIX((int)light, (int)pname, (Single)param);
		}

		public static void FragmentLightfvSGIX(int light, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params);
			}
		}

		public static void FragmentLightfvSGIX(int light, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentLightfvSGIX(int light, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentLightiSGIX(int light, GL pname, Int32 param)
		{
			Delegates.glFragmentLightiSGIX((int)light, (int)pname, (Int32)param);
		}

		public static void FragmentLightivSGIX(int light, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params);
			}
		}

		public static void FragmentLightivSGIX(int light, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentLightivSGIX(int light, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentLightModelfSGIX(GL pname, Single param)
		{
			Delegates.glFragmentLightModelfSGIX((int)pname, (Single)param);
		}

		public static void FragmentLightModelfvSGIX(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentLightModelfvSGIX((int)pname, (Single*)@params);
			}
		}

		public static void FragmentLightModelfvSGIX(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glFragmentLightModelfvSGIX((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentLightModelfvSGIX(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glFragmentLightModelfvSGIX((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentLightModeliSGIX(GL pname, Int32 param)
		{
			Delegates.glFragmentLightModeliSGIX((int)pname, (Int32)param);
		}

		public static void FragmentLightModelivSGIX(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentLightModelivSGIX((int)pname, (Int32*)@params);
			}
		}

		public static void FragmentLightModelivSGIX(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glFragmentLightModelivSGIX((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentLightModelivSGIX(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glFragmentLightModelivSGIX((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentMaterialfSGIX(int face, GL pname, Single param)
		{
			Delegates.glFragmentMaterialfSGIX((int)face, (int)pname, (Single)param);
		}

		public static void FragmentMaterialfvSGIX(int face, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params);
			}
		}

		public static void FragmentMaterialfvSGIX(int face, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentMaterialfvSGIX(int face, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void FragmentMaterialiSGIX(int face, GL pname, Int32 param)
		{
			Delegates.glFragmentMaterialiSGIX((int)face, (int)pname, (Int32)param);
		}

		public static void FragmentMaterialivSGIX(int face, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params);
			}
		}

		public static void FragmentMaterialivSGIX(int face, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void FragmentMaterialivSGIX(int face, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFragmentLightfvSGIX(int light, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params);
			}
		}

		public static void GetFragmentLightfvSGIX(int light, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetFragmentLightfvSGIX(int light, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetFragmentLightfvSGIX((int)light, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFragmentLightivSGIX(int light, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFragmentLightivSGIX(int light, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFragmentLightivSGIX(int light, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFragmentLightivSGIX((int)light, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFragmentMaterialfvSGIX(int face, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params);
			}
		}

		public static void GetFragmentMaterialfvSGIX(int face, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetFragmentMaterialfvSGIX(int face, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetFragmentMaterialfvSGIX((int)face, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFragmentMaterialivSGIX(int face, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFragmentMaterialivSGIX(int face, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFragmentMaterialivSGIX(int face, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFragmentMaterialivSGIX((int)face, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void LightEnviSGIX(GL pname, Int32 param)
		{
			Delegates.glLightEnviSGIX((int)pname, (Int32)param);
		}

		public static void AsyncMarkerSGIX(UInt32 marker)
		{
			Delegates.glAsyncMarkerSGIX((UInt32)marker);
		}

		public static void AsyncMarkerSGIX(Int32 marker)
		{
			Delegates.glAsyncMarkerSGIX((UInt32)marker);
		}

		public static Int32 FinishAsyncSGIX([Out] IntPtr markerp)
		{
			unsafe
			{
				return Delegates.glFinishAsyncSGIX((UInt32*)markerp);
			}
		}

		public static Int32 FinishAsyncSGIX([Out] UInt32[] markerp)
		{
			unsafe
			{
				fixed (UInt32* markerp_ptr = markerp)
				{
					return Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
				}
			}
		}

		public static Int32 FinishAsyncSGIX([Out] Int32[] markerp)
		{
			unsafe
			{
				fixed (Int32* markerp_ptr = markerp)
				{
					return Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
				}
			}
		}

		public static Int32 FinishAsyncSGIX([Out] out UInt32 markerp)
		{
			unsafe
			{
				fixed (UInt32* markerp_ptr = &markerp)
				{
					Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
					markerp = *markerp_ptr;
					return retval;
				}
			}
		}

		public static Int32 FinishAsyncSGIX([Out] out Int32 markerp)
		{
			unsafe
			{
				fixed (Int32* markerp_ptr = &markerp)
				{
					Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
					markerp = *markerp_ptr;
					return retval;
				}
			}
		}

		public static Int32 PollAsyncSGIX([Out] IntPtr markerp)
		{
			unsafe
			{
				return Delegates.glPollAsyncSGIX((UInt32*)markerp);
			}
		}

		public static Int32 PollAsyncSGIX([Out] UInt32[] markerp)
		{
			unsafe
			{
				fixed (UInt32* markerp_ptr = markerp)
				{
					return Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
				}
			}
		}

		public static Int32 PollAsyncSGIX([Out] Int32[] markerp)
		{
			unsafe
			{
				fixed (Int32* markerp_ptr = markerp)
				{
					return Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
				}
			}
		}

		public static Int32 PollAsyncSGIX([Out] out UInt32 markerp)
		{
			unsafe
			{
				fixed (UInt32* markerp_ptr = &markerp)
				{
					Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
					markerp = *markerp_ptr;
					return retval;
				}
			}
		}

		public static Int32 PollAsyncSGIX([Out] out Int32 markerp)
		{
			unsafe
			{
				fixed (Int32* markerp_ptr = &markerp)
				{
					Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
					markerp = *markerp_ptr;
					return retval;
				}
			}
		}

		public static Int32 GenAsyncMarkersSGIX(Int32 range)
		{
			return Delegates.glGenAsyncMarkersSGIX((Int32)range);
		}

		public static void DeleteAsyncMarkersSGIX(UInt32 marker, Int32 range)
		{
			Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
		}

		public static void DeleteAsyncMarkersSGIX(Int32 marker, Int32 range)
		{
			Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
		}

		public static Int32 IsAsyncMarkerSGIX(UInt32 marker)
		{
			return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
		}

		public static Int32 IsAsyncMarkerSGIX(Int32 marker)
		{
			return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
		}

		public static void IglooInterfaceSGIX(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glIglooInterfaceSGIX((int)pname, (IntPtr)@params);
			}
		}

		public static void IglooInterfaceSGIX(GL pname, [In, Out] object @params)
		{
			unsafe
			{
				GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
				try
				{
					Delegates.glIglooInterfaceSGIX((int)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@params_ptr.Free();
				}
			}
		}

		public static void ImageTransformParameteriHP(GL target, GL pname, Int32 param)
		{
			Delegates.glImageTransformParameteriHP((int)target, (int)pname, (Int32)param);
		}

		public static void ImageTransformParameterfHP(GL target, GL pname, Single param)
		{
			Delegates.glImageTransformParameterfHP((int)target, (int)pname, (Single)param);
		}

		public static void ImageTransformParameterivHP(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void ImageTransformParameterivHP(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ImageTransformParameterivHP(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ImageTransformParameterfvHP(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void ImageTransformParameterfvHP(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void ImageTransformParameterfvHP(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetImageTransformParameterivHP(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetImageTransformParameterivHP(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetImageTransformParameterivHP(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetImageTransformParameterivHP((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetImageTransformParameterfvHP(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetImageTransformParameterfvHP(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetImageTransformParameterfvHP(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetImageTransformParameterfvHP((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void HintPGI(GL target, Int32 mode)
		{
			Delegates.glHintPGI((int)target, (Int32)mode);
		}

		public static void VertexPointervINTEL(Int32 size, GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
			}
		}

		public static void VertexPointervINTEL(Int32 size, GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void NormalPointervINTEL(GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glNormalPointervINTEL((int)type, (IntPtr)pointer);
			}
		}

		public static void NormalPointervINTEL(GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glNormalPointervINTEL((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void ColorPointervINTEL(Int32 size, GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glColorPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
			}
		}

		public static void ColorPointervINTEL(Int32 size, GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glColorPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TexCoordPointervINTEL(Int32 size, GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glTexCoordPointervINTEL((Int32)size, (int)type, (IntPtr)pointer);
			}
		}

		public static void TexCoordPointervINTEL(Int32 size, GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glTexCoordPointervINTEL((Int32)size, (int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void FinishTextureSUNX()
		{
			Delegates.glFinishTextureSUNX();
		}

		public static void GlobalAlphaFactorbSUN(SByte factor)
		{
			Delegates.glGlobalAlphaFactorbSUN((SByte)factor);
		}

		public static void GlobalAlphaFactorbSUN(Byte factor)
		{
			Delegates.glGlobalAlphaFactorbSUN((SByte)factor);
		}

		public static void GlobalAlphaFactorsSUN(Int16 factor)
		{
			Delegates.glGlobalAlphaFactorsSUN((Int16)factor);
		}

		public static void GlobalAlphaFactoriSUN(Int32 factor)
		{
			Delegates.glGlobalAlphaFactoriSUN((Int32)factor);
		}

		public static void GlobalAlphaFactorfSUN(Single factor)
		{
			Delegates.glGlobalAlphaFactorfSUN((Single)factor);
		}

		public static void GlobalAlphaFactordSUN(Double factor)
		{
			Delegates.glGlobalAlphaFactordSUN((Double)factor);
		}

		public static void GlobalAlphaFactorubSUN(Byte factor)
		{
			Delegates.glGlobalAlphaFactorubSUN((Byte)factor);
		}

		public static void GlobalAlphaFactorusSUN(UInt16 factor)
		{
			Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
		}

		public static void GlobalAlphaFactorusSUN(Int16 factor)
		{
			Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
		}

		public static void GlobalAlphaFactoruiSUN(UInt32 factor)
		{
			Delegates.glGlobalAlphaFactoruiSUN((UInt32)factor);
		}

		public static void GlobalAlphaFactoruiSUN(Int32 factor)
		{
			Delegates.glGlobalAlphaFactoruiSUN((UInt32)factor);
		}

		public static void ReplacementCodeuiSUN(UInt32 code)
		{
			Delegates.glReplacementCodeuiSUN((UInt32)code);
		}

		public static void ReplacementCodeuiSUN(Int32 code)
		{
			Delegates.glReplacementCodeuiSUN((UInt32)code);
		}

		public static void ReplacementCodeusSUN(UInt16 code)
		{
			Delegates.glReplacementCodeusSUN((UInt16)code);
		}

		public static void ReplacementCodeusSUN(Int16 code)
		{
			Delegates.glReplacementCodeusSUN((UInt16)code);
		}

		public static void ReplacementCodeubSUN(Byte code)
		{
			Delegates.glReplacementCodeubSUN((Byte)code);
		}

		public static void ReplacementCodeuivSUN(IntPtr code)
		{
			unsafe
			{
				Delegates.glReplacementCodeuivSUN((UInt32*)code);
			}
		}

		public static void ReplacementCodeuivSUN(UInt32[] code)
		{
			unsafe
			{
				fixed (UInt32* code_ptr = code)
				{
					Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeuivSUN(Int32[] code)
		{
			unsafe
			{
				fixed (Int32* code_ptr = code)
				{
					Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeuivSUN(ref UInt32 code)
		{
			unsafe
			{
				fixed (UInt32* code_ptr = &code)
				{
					Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeuivSUN(ref Int32 code)
		{
			unsafe
			{
				fixed (Int32* code_ptr = &code)
				{
					Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeusvSUN(IntPtr code)
		{
			unsafe
			{
				Delegates.glReplacementCodeusvSUN((UInt16*)code);
			}
		}

		public static void ReplacementCodeusvSUN(UInt16[] code)
		{
			unsafe
			{
				fixed (UInt16* code_ptr = code)
				{
					Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeusvSUN(Int16[] code)
		{
			unsafe
			{
				fixed (Int16* code_ptr = code)
				{
					Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeusvSUN(ref UInt16 code)
		{
			unsafe
			{
				fixed (UInt16* code_ptr = &code)
				{
					Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeusvSUN(ref Int16 code)
		{
			unsafe
			{
				fixed (Int16* code_ptr = &code)
				{
					Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeubvSUN(IntPtr code)
		{
			unsafe
			{
				Delegates.glReplacementCodeubvSUN((Byte*)code);
			}
		}

		public static void ReplacementCodeubvSUN(Byte[] code)
		{
			unsafe
			{
				fixed (Byte* code_ptr = code)
				{
					Delegates.glReplacementCodeubvSUN((Byte*)code_ptr);
				}
			}
		}

		public static void ReplacementCodeubvSUN(ref Byte code)
		{
			unsafe
			{
				fixed (Byte* code_ptr = &code)
				{
					Delegates.glReplacementCodeubvSUN((Byte*)code_ptr);
				}
			}
		}

		public static void ReplacementCodePointerSUN(GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glReplacementCodePointerSUN((int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void ReplacementCodePointerSUN(GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glReplacementCodePointerSUN((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void Color4ubVertex2fSUN(Byte r, Byte g, Byte b, Byte a, Single x, Single y)
		{
			Delegates.glColor4ubVertex2fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y);
		}

		public static void Color4ubVertex2fvSUN(IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v);
			}
		}

		public static void Color4ubVertex2fvSUN(IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex2fvSUN(ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fSUN(Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
		{
			Delegates.glColor4ubVertex3fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
		}

		public static void Color4ubVertex3fvSUN(IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v);
			}
		}

		public static void Color4ubVertex3fvSUN(IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4ubVertex3fvSUN(ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fSUN(Single r, Single g, Single b, Single x, Single y, Single z)
		{
			Delegates.glColor3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
		}

		public static void Color3fVertex3fvSUN(IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3fVertex3fvSUN((Single*)c, (Single*)v);
			}
		}

		public static void Color3fVertex3fvSUN(IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fvSUN(IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fvSUN(Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color3fVertex3fvSUN(Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fvSUN(Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fvSUN(ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void Color3fVertex3fvSUN(ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color3fVertex3fvSUN(ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fSUN(Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glNormal3fVertex3fSUN((Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void Normal3fVertex3fvSUN(IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3fVertex3fvSUN((Single*)n, (Single*)v);
			}
		}

		public static void Normal3fVertex3fvSUN(IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Normal3fVertex3fvSUN(ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fSUN(Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glColor4fNormal3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v);
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void Color4fNormal3fVertex3fvSUN(ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fSUN(Single s, Single t, Single x, Single y, Single z)
		{
			Delegates.glTexCoord2fVertex3fSUN((Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
		}

		public static void TexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v);
			}
		}

		public static void TexCoord2fVertex3fvSUN(IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fVertex3fvSUN(ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fSUN(Single s, Single t, Single p, Single q, Single x, Single y, Single z, Single w)
		{
			Delegates.glTexCoord4fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void TexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v);
			}
		}

		public static void TexCoord4fVertex4fvSUN(IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fVertex4fvSUN(ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fSUN(Single s, Single t, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
		{
			Delegates.glTexCoord2fColor4ubVertex3fSUN((Single)s, (Single)t, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v);
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(Single[] tc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4ubVertex3fvSUN(ref Single tc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fSUN(Single s, Single t, Single r, Single g, Single b, Single x, Single y, Single z)
		{
			Delegates.glTexCoord2fColor3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v);
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(Single[] tc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor3fVertex3fvSUN(ref Single tc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fSUN(Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glTexCoord2fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v);
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fNormal3fVertex3fvSUN(ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fSUN(Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord2fColor4fNormal3fVertex3fvSUN(ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fSUN(Single s, Single t, Single p, Single q, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z, Single w)
		{
			Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void TexCoord4fColor4fNormal3fVertex4fvSUN(ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fSUN(UInt32 rc, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiVertex3fSUN(Int32 rc, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(IntPtr rc, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(IntPtr rc, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(UInt32[] rc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(Int32[] rc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(UInt32[] rc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(Int32[] rc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(UInt32[] rc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(Int32[] rc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref UInt32 rc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref Int32 rc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref UInt32 rc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref Int32 rc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref UInt32 rc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiVertex3fvSUN(ref Int32 rc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fSUN(UInt32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor4ubVertex3fSUN(Int32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(UInt32[] rc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(Int32[] rc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, Byte[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, Byte[] c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, Byte[] c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, ref Byte c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, ref Byte c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref UInt32 rc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4ubVertex3fvSUN(ref Int32 rc, ref Byte c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Byte* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fSUN(UInt32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor3fVertex3fSUN(Int32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(UInt32[] rc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(Int32[] rc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, IntPtr c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, IntPtr c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, IntPtr c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, Single[] c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, Single[] c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, Single[] c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, ref Single c, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, ref Single c, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fSUN(UInt32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiNormal3fVertex3fSUN(Int32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(UInt32[] rc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(Int32[] rc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref UInt32 rc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiNormal3fVertex3fvSUN(ref Int32 rc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(UInt32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(Int32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fSUN(UInt32 rc, Single s, Single t, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fSUN(Int32 rc, Single s, Single t, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(UInt32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(Int32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(UInt32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(Int32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
		{
			Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(UInt32[] rc, ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Int32[] rc, ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, IntPtr tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, Single[] tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, IntPtr c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, Single[] c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, IntPtr n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, IntPtr n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, IntPtr n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, Single[] n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, Single[] n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, Single[] n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, ref Single n, IntPtr v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, ref Single n, Single[] v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (UInt32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref Int32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
		{
			unsafe
			{
				fixed (Int32* rc_ptr = &rc)
				fixed (Single* tc_ptr = &tc)
				fixed (Single* c_ptr = &c)
				fixed (Single* n_ptr = &n)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void DrawMeshArraysSUN(GL mode, Int32 first, Int32 count, Int32 width)
		{
			Delegates.glDrawMeshArraysSUN((int)mode, (Int32)first, (Int32)count, (Int32)width);
		}

		public static void BlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
		{
			Delegates.glBlendFuncSeparateINGR((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
		}

		public static void FlushVertexArrayRangeNV()
		{
			Delegates.glFlushVertexArrayRangeNV();
		}

		public static void VertexArrayRangeNV(Int32 length, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer);
			}
		}

		public static void VertexArrayRangeNV(Int32 length, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void CombinerParameterfvNV(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glCombinerParameterfvNV((int)pname, (Single*)@params);
			}
		}

		public static void CombinerParameterfvNV(GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glCombinerParameterfvNV((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void CombinerParameterfvNV(GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glCombinerParameterfvNV((int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void CombinerParameterfNV(GL pname, Single param)
		{
			Delegates.glCombinerParameterfNV((int)pname, (Single)param);
		}

		public static void CombinerParameterivNV(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glCombinerParameterivNV((int)pname, (Int32*)@params);
			}
		}

		public static void CombinerParameterivNV(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glCombinerParameterivNV((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CombinerParameterivNV(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glCombinerParameterivNV((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void CombinerParameteriNV(GL pname, Int32 param)
		{
			Delegates.glCombinerParameteriNV((int)pname, (Int32)param);
		}

		public static void CombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage)
		{
			Delegates.glCombinerInputNV((int)stage, (int)portion, (int)variable, (int)input, (int)mapping, (int)componentUsage);
		}

		public static void CombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, Int32 abDotProduct, Int32 cdDotProduct, Int32 muxSum)
		{
			Delegates.glCombinerOutputNV((int)stage, (int)portion, (int)abOutput, (int)cdOutput, (int)sumOutput, (int)scale, (int)bias, (Int32)abDotProduct, (Int32)cdDotProduct, (Int32)muxSum);
		}

		public static void FinalCombinerInputNV(int variable, int input, int mapping, int componentUsage)
		{
			Delegates.glFinalCombinerInputNV((int)variable, (int)input, (int)mapping, (int)componentUsage);
		}

		public static void GetCombinerInputParameterfvNV(int stage, int portion, int variable, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params);
			}
		}

		public static void GetCombinerInputParameterfvNV(int stage, int portion, int variable, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetCombinerInputParameterfvNV(int stage, int portion, int variable, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetCombinerInputParameterivNV(int stage, int portion, int variable, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params);
			}
		}

		public static void GetCombinerInputParameterivNV(int stage, int portion, int variable, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetCombinerInputParameterivNV(int stage, int portion, int variable, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetCombinerOutputParameterfvNV(int stage, int portion, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params);
			}
		}

		public static void GetCombinerOutputParameterfvNV(int stage, int portion, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetCombinerOutputParameterfvNV(int stage, int portion, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetCombinerOutputParameterivNV(int stage, int portion, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params);
			}
		}

		public static void GetCombinerOutputParameterivNV(int stage, int portion, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetCombinerOutputParameterivNV(int stage, int portion, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFinalCombinerInputParameterfvNV(int variable, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params);
			}
		}

		public static void GetFinalCombinerInputParameterfvNV(int variable, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetFinalCombinerInputParameterfvNV(int variable, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFinalCombinerInputParameterivNV(int variable, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFinalCombinerInputParameterivNV(int variable, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFinalCombinerInputParameterivNV(int variable, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFinalCombinerInputParameterivNV((int)variable, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void DeleteFencesNV(Int32 n, IntPtr fences)
		{
			unsafe
			{
				Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
			}
		}

		public static void DeleteFencesNV(Int32 n, UInt32[] fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = fences)
				{
					Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesNV(Int32 n, Int32[] fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = fences)
				{
					Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesNV(Int32 n, ref UInt32 fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = &fences)
				{
					Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesNV(Int32 n, ref Int32 fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = &fences)
				{
					Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void GenFencesNV(Int32 n, [Out] IntPtr fences)
		{
			unsafe
			{
				Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
			}
		}

		public static void GenFencesNV(Int32 n, [Out] UInt32[] fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = fences)
				{
					Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void GenFencesNV(Int32 n, [Out] Int32[] fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = fences)
				{
					Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void GenFencesNV(Int32 n, [Out] out UInt32 fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = &fences)
				{
					Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
					fences = *fences_ptr;
				}
			}
		}

		public static void GenFencesNV(Int32 n, [Out] out Int32 fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = &fences)
				{
					Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
					fences = *fences_ptr;
				}
			}
		}

		public static Int32 IsFenceNV(UInt32 fence)
		{
			return Delegates.glIsFenceNV((UInt32)fence);
		}

		public static Int32 IsFenceNV(Int32 fence)
		{
			return Delegates.glIsFenceNV((UInt32)fence);
		}

		public static Int32 TestFenceNV(UInt32 fence)
		{
			return Delegates.glTestFenceNV((UInt32)fence);
		}

		public static Int32 TestFenceNV(Int32 fence)
		{
			return Delegates.glTestFenceNV((UInt32)fence);
		}

		public static void GetFenceivNV(UInt32 fence, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFenceivNV(Int32 fence, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params);
			}
		}

		public static void GetFenceivNV(UInt32 fence, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFenceivNV(Int32 fence, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetFenceivNV(UInt32 fence, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetFenceivNV(Int32 fence, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetFenceivNV((UInt32)fence, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void FinishFenceNV(UInt32 fence)
		{
			Delegates.glFinishFenceNV((UInt32)fence);
		}

		public static void FinishFenceNV(Int32 fence)
		{
			Delegates.glFinishFenceNV((UInt32)fence);
		}

		public static void SetFenceNV(UInt32 fence, int condition)
		{
			Delegates.glSetFenceNV((UInt32)fence, (int)condition);
		}

		public static void SetFenceNV(Int32 fence, int condition)
		{
			Delegates.glSetFenceNV((UInt32)fence, (int)condition);
		}

		public static void MapControlPointsNV(GL target, UInt32 index, GL type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, Int32 packed, IntPtr points)
		{
			unsafe
			{
				Delegates.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (Int32)packed, (IntPtr)points);
			}
		}

		public static void MapControlPointsNV(GL target, Int32 index, GL type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, Int32 packed, IntPtr points)
		{
			unsafe
			{
				Delegates.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (Int32)packed, (IntPtr)points);
			}
		}

		public static void MapControlPointsNV(GL target, UInt32 index, GL type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, Int32 packed, [In, Out] object points)
		{
			unsafe
			{
				GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
				try
				{
					Delegates.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (Int32)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
				}
				finally
				{
					points_ptr.Free();
				}
			}
		}

		public static void MapControlPointsNV(GL target, Int32 index, GL type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, Int32 packed, [In, Out] object points)
		{
			unsafe
			{
				GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
				try
				{
					Delegates.glMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (Int32)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
				}
				finally
				{
					points_ptr.Free();
				}
			}
		}

		public static void MapParameterivNV(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glMapParameterivNV((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void MapParameterivNV(GL target, GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void MapParameterivNV(GL target, GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void MapParameterfvNV(GL target, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glMapParameterfvNV((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void MapParameterfvNV(GL target, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void MapParameterfvNV(GL target, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMapControlPointsNV(GL target, UInt32 index, GL type, Int32 ustride, Int32 vstride, Int32 packed, [Out] IntPtr points)
		{
			unsafe
			{
				Delegates.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)packed, (IntPtr)points);
			}
		}

		public static void GetMapControlPointsNV(GL target, Int32 index, GL type, Int32 ustride, Int32 vstride, Int32 packed, [Out] IntPtr points)
		{
			unsafe
			{
				Delegates.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)packed, (IntPtr)points);
			}
		}

		public static void GetMapControlPointsNV(GL target, UInt32 index, GL type, Int32 ustride, Int32 vstride, Int32 packed, [In, Out] object points)
		{
			unsafe
			{
				GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
				try
				{
					Delegates.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
				}
				finally
				{
					points_ptr.Free();
				}
			}
		}

		public static void GetMapControlPointsNV(GL target, Int32 index, GL type, Int32 ustride, Int32 vstride, Int32 packed, [In, Out] object points)
		{
			unsafe
			{
				GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
				try
				{
					Delegates.glGetMapControlPointsNV((int)target, (UInt32)index, (int)type, (Int32)ustride, (Int32)vstride, (Int32)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
				}
				finally
				{
					points_ptr.Free();
				}
			}
		}

		public static void GetMapParameterivNV(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMapParameterivNV(GL target, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMapParameterivNV(GL target, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMapParameterivNV((int)target, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapParameterfvNV(GL target, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params);
			}
		}

		public static void GetMapParameterfvNV(GL target, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMapParameterfvNV(GL target, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMapParameterfvNV((int)target, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapAttribParameterivNV(GL target, UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMapAttribParameterivNV(GL target, Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetMapAttribParameterivNV(GL target, UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMapAttribParameterivNV(GL target, Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetMapAttribParameterivNV(GL target, UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapAttribParameterivNV(GL target, Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetMapAttribParameterivNV((int)target, (UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetMapAttribParameterfvNV(GL target, Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetMapAttribParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void EvalMapsNV(GL target, int mode)
		{
			Delegates.glEvalMapsNV((int)target, (int)mode);
		}

		public static void CombinerStageParameterfvNV(int stage, GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params);
			}
		}

		public static void CombinerStageParameterfvNV(int stage, GL pname, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void CombinerStageParameterfvNV(int stage, GL pname, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetCombinerStageParameterfvNV(int stage, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params);
			}
		}

		public static void GetCombinerStageParameterfvNV(int stage, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetCombinerStageParameterfvNV(int stage, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetCombinerStageParameterfvNV((int)stage, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, IntPtr programs, [Out] IntPtr residences)
		{
			unsafe
			{
				return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (Int32*)residences);
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, IntPtr programs, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, IntPtr programs, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, UInt32[] programs, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, Int32[] programs, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, UInt32[] programs, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, Int32[] programs, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, UInt32[] programs, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, Int32[] programs, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref UInt32 programs, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref Int32 programs, [Out] IntPtr residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref UInt32 programs, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref Int32 programs, [Out] Int32[] residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				fixed (Int32* residences_ptr = residences)
				{
					return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref UInt32 programs, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static Int32 AreProgramsResidentNV(Int32 n, ref Int32 programs, [Out] out Int32 residences)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				fixed (Int32* residences_ptr = &residences)
				{
					Int32 retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (Int32*)residences_ptr);
					residences = *residences_ptr;
					return retval;
				}
			}
		}

		public static void BindProgramNV(GL target, UInt32 id)
		{
			Delegates.glBindProgramNV((int)target, (UInt32)id);
		}

		public static void BindProgramNV(GL target, Int32 id)
		{
			Delegates.glBindProgramNV((int)target, (UInt32)id);
		}

		public static void DeleteProgramsNV(Int32 n, IntPtr programs)
		{
			unsafe
			{
				Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
			}
		}

		public static void DeleteProgramsNV(Int32 n, UInt32[] programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsNV(Int32 n, Int32[] programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsNV(Int32 n, ref UInt32 programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void DeleteProgramsNV(Int32 n, ref Int32 programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void ExecuteProgramNV(GL target, UInt32 id, IntPtr @params)
		{
			unsafe
			{
				Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params);
			}
		}

		public static void ExecuteProgramNV(GL target, Int32 id, IntPtr @params)
		{
			unsafe
			{
				Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params);
			}
		}

		public static void ExecuteProgramNV(GL target, UInt32 id, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
				}
			}
		}

		public static void ExecuteProgramNV(GL target, Int32 id, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
				}
			}
		}

		public static void ExecuteProgramNV(GL target, UInt32 id, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
				}
			}
		}

		public static void ExecuteProgramNV(GL target, Int32 id, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glExecuteProgramNV((int)target, (UInt32)id, (Single*)@params_ptr);
				}
			}
		}

		public static void GenProgramsNV(Int32 n, [Out] IntPtr programs)
		{
			unsafe
			{
				Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs);
			}
		}

		public static void GenProgramsNV(Int32 n, [Out] UInt32[] programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void GenProgramsNV(Int32 n, [Out] Int32[] programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void GenProgramsNV(Int32 n, [Out] out UInt32 programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
					programs = *programs_ptr;
				}
			}
		}

		public static void GenProgramsNV(Int32 n, [Out] out Int32 programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
					programs = *programs_ptr;
				}
			}
		}

		public static void GetProgramParameterdvNV(GL target, UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetProgramParameterdvNV(GL target, Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetProgramParameterdvNV(GL target, UInt32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramParameterdvNV(GL target, Int32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramParameterdvNV(GL target, UInt32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramParameterdvNV(GL target, Int32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramParameterdvNV((int)target, (UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramParameterfvNV(GL target, UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetProgramParameterfvNV(GL target, Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetProgramParameterfvNV(GL target, UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramParameterfvNV(GL target, Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramParameterfvNV(GL target, UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramParameterfvNV(GL target, Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramParameterfvNV((int)target, (UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramivNV(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetProgramivNV(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetProgramivNV(UInt32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramivNV(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramivNV(UInt32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramivNV(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramStringNV(UInt32 id, GL pname, [Out] IntPtr program)
		{
			unsafe
			{
				Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program);
			}
		}

		public static void GetProgramStringNV(Int32 id, GL pname, [Out] IntPtr program)
		{
			unsafe
			{
				Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program);
			}
		}

		public static void GetProgramStringNV(UInt32 id, GL pname, [Out] Byte[] program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = program)
				{
					Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
				}
			}
		}

		public static void GetProgramStringNV(Int32 id, GL pname, [Out] Byte[] program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = program)
				{
					Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
				}
			}
		}

		public static void GetProgramStringNV(UInt32 id, GL pname, [Out] out Byte program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = &program)
				{
					Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
					program = *program_ptr;
				}
			}
		}

		public static void GetProgramStringNV(Int32 id, GL pname, [Out] out Byte program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = &program)
				{
					Delegates.glGetProgramStringNV((UInt32)id, (int)pname, (Byte*)program_ptr);
					program = *program_ptr;
				}
			}
		}

		public static void GetTrackMatrixivNV(GL target, UInt32 address, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTrackMatrixivNV(GL target, Int32 address, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params);
			}
		}

		public static void GetTrackMatrixivNV(GL target, UInt32 address, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTrackMatrixivNV(GL target, Int32 address, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetTrackMatrixivNV(GL target, UInt32 address, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetTrackMatrixivNV(GL target, Int32 address, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetTrackMatrixivNV((int)target, (UInt32)address, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribdvNV(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdvNV(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params);
			}
		}

		public static void GetVertexAttribdvNV(UInt32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdvNV(Int32 index, GL pname, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribdvNV(UInt32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribdvNV(Int32 index, GL pname, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribdvNV((UInt32)index, (int)pname, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfvNV(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfvNV(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribfvNV(UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfvNV(Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribfvNV(UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribfvNV(Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribfvNV((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribivNV(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribivNV(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribivNV(UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribivNV(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribivNV(UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribivNV(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribivNV((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribPointervNV(UInt32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointervNV(Int32 index, GL pname, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer);
			}
		}

		public static void GetVertexAttribPointervNV(UInt32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void GetVertexAttribPointervNV(Int32 index, GL pname, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glGetVertexAttribPointervNV((UInt32)index, (int)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static Int32 IsProgramNV(UInt32 id)
		{
			return Delegates.glIsProgramNV((UInt32)id);
		}

		public static Int32 IsProgramNV(Int32 id)
		{
			return Delegates.glIsProgramNV((UInt32)id);
		}

		public static void LoadProgramNV(GL target, UInt32 id, Int32 len, IntPtr program)
		{
			unsafe
			{
				Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program);
			}
		}

		public static void LoadProgramNV(GL target, Int32 id, Int32 len, IntPtr program)
		{
			unsafe
			{
				Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program);
			}
		}

		public static void LoadProgramNV(GL target, UInt32 id, Int32 len, Byte[] program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = program)
				{
					Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
				}
			}
		}

		public static void LoadProgramNV(GL target, Int32 id, Int32 len, Byte[] program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = program)
				{
					Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
				}
			}
		}

		public static void LoadProgramNV(GL target, UInt32 id, Int32 len, ref Byte program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = &program)
				{
					Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
				}
			}
		}

		public static void LoadProgramNV(GL target, Int32 id, Int32 len, ref Byte program)
		{
			unsafe
			{
				fixed (Byte* program_ptr = &program)
				{
					Delegates.glLoadProgramNV((int)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
				}
			}
		}

		public static void ProgramParameter4dNV(GL target, UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramParameter4dNV((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramParameter4dNV(GL target, Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glProgramParameter4dNV((int)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void ProgramParameter4dvNV(GL target, UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v);
			}
		}

		public static void ProgramParameter4dvNV(GL target, Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v);
			}
		}

		public static void ProgramParameter4dvNV(GL target, UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4dvNV(GL target, Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4dvNV(GL target, UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4dvNV(GL target, Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramParameter4dvNV((int)target, (UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4fNV(GL target, UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramParameter4fNV((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramParameter4fNV(GL target, Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glProgramParameter4fNV((int)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void ProgramParameter4fvNV(GL target, UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v);
			}
		}

		public static void ProgramParameter4fvNV(GL target, Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v);
			}
		}

		public static void ProgramParameter4fvNV(GL target, UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4fvNV(GL target, Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4fvNV(GL target, UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameter4fvNV(GL target, Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramParameter4fvNV((int)target, (UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4dvNV(GL target, UInt32 index, UInt32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v);
			}
		}

		public static void ProgramParameters4dvNV(GL target, Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v);
			}
		}

		public static void ProgramParameters4dvNV(GL target, UInt32 index, UInt32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4dvNV(GL target, Int32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4dvNV(GL target, UInt32 index, UInt32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4dvNV(GL target, Int32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramParameters4dvNV((int)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4fvNV(GL target, UInt32 index, UInt32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v);
			}
		}

		public static void ProgramParameters4fvNV(GL target, Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v);
			}
		}

		public static void ProgramParameters4fvNV(GL target, UInt32 index, UInt32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4fvNV(GL target, Int32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4fvNV(GL target, UInt32 index, UInt32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramParameters4fvNV(GL target, Int32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramParameters4fvNV((int)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
				}
			}
		}

		public static void RequestResidentProgramsNV(Int32 n, IntPtr programs)
		{
			unsafe
			{
				Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
			}
		}

		public static void RequestResidentProgramsNV(Int32 n, UInt32[] programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = programs)
				{
					Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void RequestResidentProgramsNV(Int32 n, Int32[] programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = programs)
				{
					Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void RequestResidentProgramsNV(Int32 n, ref UInt32 programs)
		{
			unsafe
			{
				fixed (UInt32* programs_ptr = &programs)
				{
					Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void RequestResidentProgramsNV(Int32 n, ref Int32 programs)
		{
			unsafe
			{
				fixed (Int32* programs_ptr = &programs)
				{
					Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
				}
			}
		}

		public static void TrackMatrixNV(GL target, UInt32 address, int matrix, int transform)
		{
			Delegates.glTrackMatrixNV((int)target, (UInt32)address, (int)matrix, (int)transform);
		}

		public static void TrackMatrixNV(GL target, Int32 address, int matrix, int transform)
		{
			Delegates.glTrackMatrixNV((int)target, (UInt32)address, (int)matrix, (int)transform);
		}

		public static void VertexAttribPointerNV(UInt32 index, Int32 fsize, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointerNV(Int32 index, Int32 fsize, GL type, Int32 stride, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer);
			}
		}

		public static void VertexAttribPointerNV(UInt32 index, Int32 fsize, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexAttribPointerNV(Int32 index, Int32 fsize, GL type, Int32 stride, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexAttrib1dNV(UInt32 index, Double x)
		{
			Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1dNV(Int32 index, Double x)
		{
			Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
		}

		public static void VertexAttrib1dvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib1dvNV(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvNV(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvNV(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1dvNV(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fNV(UInt32 index, Single x)
		{
			Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1fNV(Int32 index, Single x)
		{
			Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
		}

		public static void VertexAttrib1fvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib1fvNV(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvNV(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvNV(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1fvNV(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1sNV(UInt32 index, Int16 x)
		{
			Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1sNV(Int32 index, Int16 x)
		{
			Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
		}

		public static void VertexAttrib1svNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1svNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib1svNV(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svNV(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1svNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dNV(UInt32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2dNV(Int32 index, Double x, Double y)
		{
			Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
		}

		public static void VertexAttrib2dvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib2dvNV(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvNV(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvNV(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2dvNV(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fNV(UInt32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2fNV(Int32 index, Single x, Single y)
		{
			Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
		}

		public static void VertexAttrib2fvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib2fvNV(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvNV(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvNV(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2fvNV(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2sNV(UInt32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2sNV(Int32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
		}

		public static void VertexAttrib2svNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2svNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib2svNV(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svNV(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2svNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dNV(UInt32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3dNV(Int32 index, Double x, Double y, Double z)
		{
			Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexAttrib3dvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib3dvNV(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvNV(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvNV(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3dvNV(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fNV(UInt32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3fNV(Int32 index, Single x, Single y, Single z)
		{
			Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexAttrib3fvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib3fvNV(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvNV(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvNV(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3fvNV(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3sNV(UInt32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3sNV(Int32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexAttrib3svNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3svNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib3svNV(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svNV(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3svNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dNV(UInt32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4dNV(Int32 index, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexAttrib4dvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
			}
		}

		public static void VertexAttrib4dvNV(UInt32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvNV(Int32 index, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvNV(UInt32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4dvNV(Int32 index, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fNV(UInt32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4fNV(Int32 index, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexAttrib4fvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
			}
		}

		public static void VertexAttrib4fvNV(UInt32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvNV(Int32 index, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvNV(UInt32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4fvNV(Int32 index, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4sNV(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4sNV(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexAttrib4svNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4svNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
			}
		}

		public static void VertexAttrib4svNV(UInt32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svNV(UInt32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4svNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubNV(UInt32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4ubNV(Int32 index, Byte x, Byte y, Byte z, Byte w)
		{
			Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		public static void VertexAttrib4ubvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
			}
		}

		public static void VertexAttrib4ubvNV(UInt32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvNV(Int32 index, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvNV(UInt32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4ubvNV(Int32 index, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1dvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs1dvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs1dvNV(UInt32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1dvNV(Int32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1dvNV(UInt32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1dvNV(Int32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1fvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs1fvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs1fvNV(UInt32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1fvNV(Int32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1fvNV(UInt32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1fvNV(Int32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1svNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs1svNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs1svNV(UInt32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1svNV(Int32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1svNV(UInt32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1svNV(Int32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2dvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs2dvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs2dvNV(UInt32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2dvNV(Int32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2dvNV(UInt32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2dvNV(Int32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2fvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs2fvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs2fvNV(UInt32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2fvNV(Int32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2fvNV(UInt32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2fvNV(Int32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2svNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs2svNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs2svNV(UInt32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2svNV(Int32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2svNV(UInt32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2svNV(Int32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3dvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs3dvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs3dvNV(UInt32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3dvNV(Int32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3dvNV(UInt32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3dvNV(Int32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3fvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs3fvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs3fvNV(UInt32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3fvNV(Int32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3fvNV(UInt32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3fvNV(Int32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3svNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs3svNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs3svNV(UInt32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3svNV(Int32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3svNV(UInt32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3svNV(Int32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4dvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs4dvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
			}
		}

		public static void VertexAttribs4dvNV(UInt32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4dvNV(Int32 index, Int32 count, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4dvNV(UInt32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4dvNV(Int32 index, Int32 count, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4fvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs4fvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
			}
		}

		public static void VertexAttribs4fvNV(UInt32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4fvNV(Int32 index, Int32 count, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4fvNV(UInt32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4fvNV(Int32 index, Int32 count, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4svNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs4svNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
			}
		}

		public static void VertexAttribs4svNV(UInt32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4svNV(Int32 index, Int32 count, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4svNV(UInt32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4svNV(Int32 index, Int32 count, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4ubvNV(UInt32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
			}
		}

		public static void VertexAttribs4ubvNV(Int32 index, Int32 count, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
			}
		}

		public static void VertexAttribs4ubvNV(UInt32 index, Int32 count, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4ubvNV(Int32 index, Int32 count, Byte[] v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = v)
				{
					Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4ubvNV(UInt32 index, Int32 count, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4ubvNV(Int32 index, Int32 count, ref Byte v)
		{
			unsafe
			{
				fixed (Byte* v_ptr = &v)
				{
					Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
				}
			}
		}

		public static void GenOcclusionQueriesNV(Int32 n, [Out] IntPtr ids)
		{
			unsafe
			{
				Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
			}
		}

		public static void GenOcclusionQueriesNV(Int32 n, [Out] UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenOcclusionQueriesNV(Int32 n, [Out] Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void GenOcclusionQueriesNV(Int32 n, [Out] out UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void GenOcclusionQueriesNV(Int32 n, [Out] out Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		public static void DeleteOcclusionQueriesNV(Int32 n, IntPtr ids)
		{
			unsafe
			{
				Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
			}
		}

		public static void DeleteOcclusionQueriesNV(Int32 n, UInt32[] ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = ids)
				{
					Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteOcclusionQueriesNV(Int32 n, Int32[] ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = ids)
				{
					Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteOcclusionQueriesNV(Int32 n, ref UInt32 ids)
		{
			unsafe
			{
				fixed (UInt32* ids_ptr = &ids)
				{
					Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static void DeleteOcclusionQueriesNV(Int32 n, ref Int32 ids)
		{
			unsafe
			{
				fixed (Int32* ids_ptr = &ids)
				{
					Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		public static Int32 IsOcclusionQueryNV(UInt32 id)
		{
			return Delegates.glIsOcclusionQueryNV((UInt32)id);
		}

		public static Int32 IsOcclusionQueryNV(Int32 id)
		{
			return Delegates.glIsOcclusionQueryNV((UInt32)id);
		}

		public static void BeginOcclusionQueryNV(UInt32 id)
		{
			Delegates.glBeginOcclusionQueryNV((UInt32)id);
		}

		public static void BeginOcclusionQueryNV(Int32 id)
		{
			Delegates.glBeginOcclusionQueryNV((UInt32)id);
		}

		public static void EndOcclusionQueryNV()
		{
			Delegates.glEndOcclusionQueryNV();
		}

		public static void GetOcclusionQueryivNV(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetOcclusionQueryivNV(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetOcclusionQueryivNV(UInt32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetOcclusionQueryivNV(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetOcclusionQueryivNV(UInt32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetOcclusionQueryivNV(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetOcclusionQueryivNV((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetOcclusionQueryuivNV(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetOcclusionQueryuivNV(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params);
			}
		}

		public static void GetOcclusionQueryuivNV(UInt32 id, GL pname, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetOcclusionQueryuivNV(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetOcclusionQueryuivNV(UInt32 id, GL pname, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetOcclusionQueryuivNV(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetOcclusionQueryuivNV((UInt32)id, (int)pname, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void PointParameteriNV(GL pname, Int32 param)
		{
			Delegates.glPointParameteriNV((int)pname, (Int32)param);
		}

		public static void PointParameterivNV(GL pname, IntPtr @params)
		{
			unsafe
			{
				Delegates.glPointParameterivNV((int)pname, (Int32*)@params);
			}
		}

		public static void PointParameterivNV(GL pname, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glPointParameterivNV((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void PointParameterivNV(GL pname, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glPointParameterivNV((int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fNV(UInt32 id, Int32 len, IntPtr name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
			}
		}

		public static void ProgramNamedParameter4fNV(Int32 id, Int32 len, IntPtr name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
			}
		}

		public static void ProgramNamedParameter4fNV(UInt32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
				}
			}
		}

		public static void ProgramNamedParameter4fNV(Int32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
				}
			}
		}

		public static void ProgramNamedParameter4fNV(UInt32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
				}
			}
		}

		public static void ProgramNamedParameter4fNV(Int32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
				}
			}
		}

		public static void ProgramNamedParameter4dNV(UInt32 id, Int32 len, IntPtr name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
			}
		}

		public static void ProgramNamedParameter4dNV(Int32 id, Int32 len, IntPtr name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
			}
		}

		public static void ProgramNamedParameter4dNV(UInt32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
				}
			}
		}

		public static void ProgramNamedParameter4dNV(Int32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
				}
			}
		}

		public static void ProgramNamedParameter4dNV(UInt32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
				}
			}
		}

		public static void ProgramNamedParameter4dNV(Int32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, IntPtr name, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, IntPtr name, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, IntPtr name, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, IntPtr name, Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, IntPtr name, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, IntPtr name, ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, Byte[] name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, Byte[] name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, Byte[] name, Single[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, Byte[] name, Single[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, Byte[] name, ref Single v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, Byte[] name, ref Single v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, ref Byte name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, ref Byte name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, ref Byte name, Single[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, ref Byte name, Single[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(UInt32 id, Int32 len, ref Byte name, ref Single v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4fvNV(Int32 id, Int32 len, ref Byte name, ref Single v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, IntPtr name, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, IntPtr name, IntPtr v)
		{
			unsafe
			{
				Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, IntPtr name, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, IntPtr name, Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, IntPtr name, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, IntPtr name, ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, Byte[] name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, Byte[] name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, Byte[] name, Double[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, Byte[] name, Double[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, Byte[] name, ref Double v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, Byte[] name, ref Double v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, ref Byte name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, ref Byte name, IntPtr v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, ref Byte name, Double[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, ref Byte name, Double[] v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* v_ptr = v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(UInt32 id, Int32 len, ref Byte name, ref Double v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void ProgramNamedParameter4dvNV(Int32 id, Int32 len, ref Byte name, ref Double v)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* v_ptr = &v)
				{
					Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, IntPtr name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, IntPtr name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, IntPtr name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, IntPtr name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, Byte[] name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, Byte[] name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, Byte[] name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, Byte[] name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, Byte[] name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, Byte[] name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, ref Byte name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, ref Byte name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, ref Byte name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, ref Byte name, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(UInt32 id, Int32 len, ref Byte name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterfvNV(Int32 id, Int32 len, ref Byte name, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, IntPtr name, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, IntPtr name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, IntPtr name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, IntPtr name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, IntPtr name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, Byte[] name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, Byte[] name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, Byte[] name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, Byte[] name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, Byte[] name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, Byte[] name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = name)
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, ref Byte name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, ref Byte name, [Out] IntPtr @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, ref Byte name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, ref Byte name, [Out] Double[] @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* @params_ptr = @params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(UInt32 id, Int32 len, ref Byte name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramNamedParameterdvNV(Int32 id, Int32 len, ref Byte name, [Out] out Double @params)
		{
			unsafe
			{
				fixed (Byte* name_ptr = &name)
				fixed (Double* @params_ptr = &@params)
				{
					Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void Vertex2hNV(UInt16 x, UInt16 y)
		{
			Delegates.glVertex2hNV((UInt16)x, (UInt16)y);
		}

		public static void Vertex2hNV(Int16 x, Int16 y)
		{
			Delegates.glVertex2hNV((UInt16)x, (UInt16)y);
		}

		public static void Vertex2hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex2hvNV((UInt16*)v);
			}
		}

		public static void Vertex2hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertex2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex2hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex2hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertex2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex2hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex3hNV(UInt16 x, UInt16 y, UInt16 z)
		{
			Delegates.glVertex3hNV((UInt16)x, (UInt16)y, (UInt16)z);
		}

		public static void Vertex3hNV(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertex3hNV((UInt16)x, (UInt16)y, (UInt16)z);
		}

		public static void Vertex3hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex3hvNV((UInt16*)v);
			}
		}

		public static void Vertex3hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertex3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex3hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex3hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertex3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex3hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex4hNV(UInt16 x, UInt16 y, UInt16 z, UInt16 w)
		{
			Delegates.glVertex4hNV((UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
		}

		public static void Vertex4hNV(Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertex4hNV((UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
		}

		public static void Vertex4hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glVertex4hvNV((UInt16*)v);
			}
		}

		public static void Vertex4hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertex4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex4hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertex4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex4hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertex4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Vertex4hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertex4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Normal3hNV(UInt16 nx, UInt16 ny, UInt16 nz)
		{
			Delegates.glNormal3hNV((UInt16)nx, (UInt16)ny, (UInt16)nz);
		}

		public static void Normal3hNV(Int16 nx, Int16 ny, Int16 nz)
		{
			Delegates.glNormal3hNV((UInt16)nx, (UInt16)ny, (UInt16)nz);
		}

		public static void Normal3hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glNormal3hvNV((UInt16*)v);
			}
		}

		public static void Normal3hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glNormal3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Normal3hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glNormal3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Normal3hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glNormal3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Normal3hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glNormal3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3hNV(UInt16 red, UInt16 green, UInt16 blue)
		{
			Delegates.glColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void Color3hNV(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void Color3hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor3hvNV((UInt16*)v);
			}
		}

		public static void Color3hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color3hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4hNV(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
		{
			Delegates.glColor4hNV((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
		}

		public static void Color4hNV(Int16 red, Int16 green, Int16 blue, Int16 alpha)
		{
			Delegates.glColor4hNV((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
		}

		public static void Color4hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glColor4hvNV((UInt16*)v);
			}
		}

		public static void Color4hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glColor4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glColor4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glColor4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void Color4hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glColor4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord1hNV(UInt16 s)
		{
			Delegates.glTexCoord1hNV((UInt16)s);
		}

		public static void TexCoord1hNV(Int16 s)
		{
			Delegates.glTexCoord1hNV((UInt16)s);
		}

		public static void TexCoord1hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord1hvNV((UInt16*)v);
			}
		}

		public static void TexCoord1hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glTexCoord1hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord1hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord1hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord1hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glTexCoord1hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord1hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord1hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord2hNV(UInt16 s, UInt16 t)
		{
			Delegates.glTexCoord2hNV((UInt16)s, (UInt16)t);
		}

		public static void TexCoord2hNV(Int16 s, Int16 t)
		{
			Delegates.glTexCoord2hNV((UInt16)s, (UInt16)t);
		}

		public static void TexCoord2hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord2hvNV((UInt16*)v);
			}
		}

		public static void TexCoord2hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glTexCoord2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord2hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord2hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glTexCoord2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord2hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord2hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord3hNV(UInt16 s, UInt16 t, UInt16 r)
		{
			Delegates.glTexCoord3hNV((UInt16)s, (UInt16)t, (UInt16)r);
		}

		public static void TexCoord3hNV(Int16 s, Int16 t, Int16 r)
		{
			Delegates.glTexCoord3hNV((UInt16)s, (UInt16)t, (UInt16)r);
		}

		public static void TexCoord3hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord3hvNV((UInt16*)v);
			}
		}

		public static void TexCoord3hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glTexCoord3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord3hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord3hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glTexCoord3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord3hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord4hNV(UInt16 s, UInt16 t, UInt16 r, UInt16 q)
		{
			Delegates.glTexCoord4hNV((UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
		}

		public static void TexCoord4hNV(Int16 s, Int16 t, Int16 r, Int16 q)
		{
			Delegates.glTexCoord4hNV((UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
		}

		public static void TexCoord4hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glTexCoord4hvNV((UInt16*)v);
			}
		}

		public static void TexCoord4hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glTexCoord4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord4hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glTexCoord4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord4hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glTexCoord4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void TexCoord4hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glTexCoord4hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1hNV(GL target, UInt16 s)
		{
			Delegates.glMultiTexCoord1hNV((int)target, (UInt16)s);
		}

		public static void MultiTexCoord1hNV(GL target, Int16 s)
		{
			Delegates.glMultiTexCoord1hNV((int)target, (UInt16)s);
		}

		public static void MultiTexCoord1hvNV(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord1hvNV((int)target, (UInt16*)v);
			}
		}

		public static void MultiTexCoord1hvNV(GL target, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1hvNV(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1hvNV(GL target, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord1hvNV(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord1hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2hNV(GL target, UInt16 s, UInt16 t)
		{
			Delegates.glMultiTexCoord2hNV((int)target, (UInt16)s, (UInt16)t);
		}

		public static void MultiTexCoord2hNV(GL target, Int16 s, Int16 t)
		{
			Delegates.glMultiTexCoord2hNV((int)target, (UInt16)s, (UInt16)t);
		}

		public static void MultiTexCoord2hvNV(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord2hvNV((int)target, (UInt16*)v);
			}
		}

		public static void MultiTexCoord2hvNV(GL target, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2hvNV(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2hvNV(GL target, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord2hvNV(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord2hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3hNV(GL target, UInt16 s, UInt16 t, UInt16 r)
		{
			Delegates.glMultiTexCoord3hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r);
		}

		public static void MultiTexCoord3hNV(GL target, Int16 s, Int16 t, Int16 r)
		{
			Delegates.glMultiTexCoord3hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r);
		}

		public static void MultiTexCoord3hvNV(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord3hvNV((int)target, (UInt16*)v);
			}
		}

		public static void MultiTexCoord3hvNV(GL target, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3hvNV(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3hvNV(GL target, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord3hvNV(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord3hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4hNV(GL target, UInt16 s, UInt16 t, UInt16 r, UInt16 q)
		{
			Delegates.glMultiTexCoord4hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
		}

		public static void MultiTexCoord4hNV(GL target, Int16 s, Int16 t, Int16 r, Int16 q)
		{
			Delegates.glMultiTexCoord4hNV((int)target, (UInt16)s, (UInt16)t, (UInt16)r, (UInt16)q);
		}

		public static void MultiTexCoord4hvNV(GL target, IntPtr v)
		{
			unsafe
			{
				Delegates.glMultiTexCoord4hvNV((int)target, (UInt16*)v);
			}
		}

		public static void MultiTexCoord4hvNV(GL target, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4hvNV(GL target, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4hvNV(GL target, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void MultiTexCoord4hvNV(GL target, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glMultiTexCoord4hvNV((int)target, (UInt16*)v_ptr);
				}
			}
		}

		public static void FogCoordhNV(UInt16 fog)
		{
			Delegates.glFogCoordhNV((UInt16)fog);
		}

		public static void FogCoordhNV(Int16 fog)
		{
			Delegates.glFogCoordhNV((UInt16)fog);
		}

		public static void FogCoordhvNV(IntPtr fog)
		{
			unsafe
			{
				Delegates.glFogCoordhvNV((UInt16*)fog);
			}
		}

		public static void FogCoordhvNV(UInt16[] fog)
		{
			unsafe
			{
				fixed (UInt16* fog_ptr = fog)
				{
					Delegates.glFogCoordhvNV((UInt16*)fog_ptr);
				}
			}
		}

		public static void FogCoordhvNV(Int16[] fog)
		{
			unsafe
			{
				fixed (Int16* fog_ptr = fog)
				{
					Delegates.glFogCoordhvNV((UInt16*)fog_ptr);
				}
			}
		}

		public static void FogCoordhvNV(ref UInt16 fog)
		{
			unsafe
			{
				fixed (UInt16* fog_ptr = &fog)
				{
					Delegates.glFogCoordhvNV((UInt16*)fog_ptr);
				}
			}
		}

		public static void FogCoordhvNV(ref Int16 fog)
		{
			unsafe
			{
				fixed (Int16* fog_ptr = &fog)
				{
					Delegates.glFogCoordhvNV((UInt16*)fog_ptr);
				}
			}
		}

		public static void SecondaryColor3hNV(UInt16 red, UInt16 green, UInt16 blue)
		{
			Delegates.glSecondaryColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3hNV(Int16 red, Int16 green, Int16 blue)
		{
			Delegates.glSecondaryColor3hNV((UInt16)red, (UInt16)green, (UInt16)blue);
		}

		public static void SecondaryColor3hvNV(IntPtr v)
		{
			unsafe
			{
				Delegates.glSecondaryColor3hvNV((UInt16*)v);
			}
		}

		public static void SecondaryColor3hvNV(UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glSecondaryColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3hvNV(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glSecondaryColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3hvNV(ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void SecondaryColor3hvNV(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glSecondaryColor3hvNV((UInt16*)v_ptr);
				}
			}
		}

		public static void VertexWeighthNV(UInt16 weight)
		{
			Delegates.glVertexWeighthNV((UInt16)weight);
		}

		public static void VertexWeighthNV(Int16 weight)
		{
			Delegates.glVertexWeighthNV((UInt16)weight);
		}

		public static void VertexWeighthvNV(IntPtr weight)
		{
			unsafe
			{
				Delegates.glVertexWeighthvNV((UInt16*)weight);
			}
		}

		public static void VertexWeighthvNV(UInt16[] weight)
		{
			unsafe
			{
				fixed (UInt16* weight_ptr = weight)
				{
					Delegates.glVertexWeighthvNV((UInt16*)weight_ptr);
				}
			}
		}

		public static void VertexWeighthvNV(Int16[] weight)
		{
			unsafe
			{
				fixed (Int16* weight_ptr = weight)
				{
					Delegates.glVertexWeighthvNV((UInt16*)weight_ptr);
				}
			}
		}

		public static void VertexWeighthvNV(ref UInt16 weight)
		{
			unsafe
			{
				fixed (UInt16* weight_ptr = &weight)
				{
					Delegates.glVertexWeighthvNV((UInt16*)weight_ptr);
				}
			}
		}

		public static void VertexWeighthvNV(ref Int16 weight)
		{
			unsafe
			{
				fixed (Int16* weight_ptr = &weight)
				{
					Delegates.glVertexWeighthvNV((UInt16*)weight_ptr);
				}
			}
		}

		public static void VertexAttrib1hNV(UInt32 index, UInt16 x)
		{
			Delegates.glVertexAttrib1hNV((UInt32)index, (UInt16)x);
		}

		public static void VertexAttrib1hNV(Int32 index, Int16 x)
		{
			Delegates.glVertexAttrib1hNV((UInt32)index, (UInt16)x);
		}

		public static void VertexAttrib1hvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib1hvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib1hvNV(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1hvNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1hvNV(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib1hvNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib1hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2hNV(UInt32 index, UInt16 x, UInt16 y)
		{
			Delegates.glVertexAttrib2hNV((UInt32)index, (UInt16)x, (UInt16)y);
		}

		public static void VertexAttrib2hNV(Int32 index, Int16 x, Int16 y)
		{
			Delegates.glVertexAttrib2hNV((UInt32)index, (UInt16)x, (UInt16)y);
		}

		public static void VertexAttrib2hvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib2hvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib2hvNV(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2hvNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2hvNV(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib2hvNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib2hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3hNV(UInt32 index, UInt16 x, UInt16 y, UInt16 z)
		{
			Delegates.glVertexAttrib3hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z);
		}

		public static void VertexAttrib3hNV(Int32 index, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexAttrib3hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z);
		}

		public static void VertexAttrib3hvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib3hvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib3hvNV(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3hvNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3hvNV(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib3hvNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib3hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4hNV(UInt32 index, UInt16 x, UInt16 y, UInt16 z, UInt16 w)
		{
			Delegates.glVertexAttrib4hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
		}

		public static void VertexAttrib4hNV(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexAttrib4hNV((UInt32)index, (UInt16)x, (UInt16)y, (UInt16)z, (UInt16)w);
		}

		public static void VertexAttrib4hvNV(UInt32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4hvNV(Int32 index, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v);
			}
		}

		public static void VertexAttrib4hvNV(UInt32 index, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4hvNV(Int32 index, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4hvNV(UInt32 index, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttrib4hvNV(Int32 index, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttrib4hvNV((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1hvNV(UInt32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs1hvNV(Int32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs1hvNV(UInt32 index, Int32 n, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1hvNV(Int32 index, Int32 n, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1hvNV(UInt32 index, Int32 n, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs1hvNV(Int32 index, Int32 n, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2hvNV(UInt32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs2hvNV(Int32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs2hvNV(UInt32 index, Int32 n, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2hvNV(Int32 index, Int32 n, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2hvNV(UInt32 index, Int32 n, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs2hvNV(Int32 index, Int32 n, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3hvNV(UInt32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs3hvNV(Int32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs3hvNV(UInt32 index, Int32 n, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3hvNV(Int32 index, Int32 n, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3hvNV(UInt32 index, Int32 n, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs3hvNV(Int32 index, Int32 n, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4hvNV(UInt32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs4hvNV(Int32 index, Int32 n, IntPtr v)
		{
			unsafe
			{
				Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v);
			}
		}

		public static void VertexAttribs4hvNV(UInt32 index, Int32 n, UInt16[] v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = v)
				{
					Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4hvNV(Int32 index, Int32 n, Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4hvNV(UInt32 index, Int32 n, ref UInt16 v)
		{
			unsafe
			{
				fixed (UInt16* v_ptr = &v)
				{
					Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void VertexAttribs4hvNV(Int32 index, Int32 n, ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (UInt16*)v_ptr);
				}
			}
		}

		public static void PixelDataRangeNV(GL target, Int32 length, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glPixelDataRangeNV((int)target, (Int32)length, (IntPtr)pointer);
			}
		}

		public static void PixelDataRangeNV(GL target, Int32 length, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glPixelDataRangeNV((int)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void FlushPixelDataRangeNV(int target)
		{
			Delegates.glFlushPixelDataRangeNV((int)target);
		}

		public static void PrimitiveRestartNV()
		{
			Delegates.glPrimitiveRestartNV();
		}

		public static void PrimitiveRestartIndexNV(UInt32 index)
		{
			Delegates.glPrimitiveRestartIndexNV((UInt32)index);
		}

		public static void PrimitiveRestartIndexNV(Int32 index)
		{
			Delegates.glPrimitiveRestartIndexNV((UInt32)index);
		}

		public static void ProgramLocalParameterI4iNV(GL target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramLocalParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void ProgramLocalParameterI4iNV(GL target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramLocalParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void ProgramLocalParameterI4ivNV(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void ProgramLocalParameterI4ivNV(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void ProgramLocalParameterI4ivNV(GL target, UInt32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4ivNV(GL target, Int32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4ivNV(GL target, UInt32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4ivNV(GL target, Int32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, UInt32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, UInt32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4ivNV(GL target, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4uiNV(GL target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
		{
			Delegates.glProgramLocalParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void ProgramLocalParameterI4uiNV(GL target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramLocalParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void ProgramLocalParameterI4uivNV(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void ProgramLocalParameterI4uivNV(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void ProgramLocalParameterI4uivNV(GL target, UInt32 index, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4uivNV(GL target, Int32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4uivNV(GL target, UInt32 index, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParameterI4uivNV(GL target, Int32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, UInt32 index, Int32 count, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, UInt32 index, Int32 count, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramLocalParametersI4uivNV(GL target, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramLocalParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4iNV(GL target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramEnvParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void ProgramEnvParameterI4iNV(GL target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramEnvParameterI4iNV((int)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void ProgramEnvParameterI4ivNV(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void ProgramEnvParameterI4ivNV(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void ProgramEnvParameterI4ivNV(GL target, UInt32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4ivNV(GL target, Int32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4ivNV(GL target, UInt32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4ivNV(GL target, Int32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameterI4ivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, UInt32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, UInt32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4ivNV(GL target, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParametersI4ivNV((int)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4uiNV(GL target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
		{
			Delegates.glProgramEnvParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void ProgramEnvParameterI4uiNV(GL target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glProgramEnvParameterI4uiNV((int)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		public static void ProgramEnvParameterI4uivNV(GL target, UInt32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void ProgramEnvParameterI4uivNV(GL target, Int32 index, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void ProgramEnvParameterI4uivNV(GL target, UInt32 index, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4uivNV(GL target, Int32 index, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4uivNV(GL target, UInt32 index, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParameterI4uivNV(GL target, Int32 index, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParameterI4uivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, UInt32 index, Int32 count, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, UInt32 index, Int32 count, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramEnvParametersI4uivNV(GL target, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramEnvParametersI4uivNV((int)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, UInt32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, Int32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, UInt32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterIivNV(GL target, Int32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, UInt32 index, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, Int32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, UInt32 index, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramLocalParameterIuivNV(GL target, Int32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramLocalParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params);
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, UInt32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, Int32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, UInt32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterIivNV(GL target, Int32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterIivNV((int)target, (UInt32)index, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, UInt32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, Int32 index, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params);
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, UInt32 index, [Out] UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, Int32 index, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
				}
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, UInt32 index, [Out] out UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetProgramEnvParameterIuivNV(GL target, Int32 index, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetProgramEnvParameterIuivNV((int)target, (UInt32)index, (UInt32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ProgramVertexLimitNV(GL target, Int32 limit)
		{
			Delegates.glProgramVertexLimitNV((int)target, (Int32)limit);
		}

		public static void DepthRangedNV(Double zNear, Double zFar)
		{
			Delegates.glDepthRangedNV((Double)zNear, (Double)zFar);
		}

		public static void ClearDepthdNV(Double depth)
		{
			Delegates.glClearDepthdNV((Double)depth);
		}

		public static void DepthBoundsdNV(Double zmin, Double zmax)
		{
			Delegates.glDepthBoundsdNV((Double)zmin, (Double)zmax);
		}

		public static void RenderbufferStorageMultisampleCoverageNV(GL target, Int32 coverageSamples, Int32 colorSamples, int internalformat, Int32 width, Int32 height)
		{
			Delegates.glRenderbufferStorageMultisampleCoverageNV((int)target, (Int32)coverageSamples, (Int32)colorSamples, (int)internalformat, (Int32)width, (Int32)height);
		}

		public static void ProgramBufferParametersfvNV(GL target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramBufferParametersfvNV(GL target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
			}
		}

		public static void ProgramBufferParametersfvNV(GL target, UInt32 buffer, UInt32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersfvNV(GL target, Int32 buffer, Int32 index, Int32 count, Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersfvNV(GL target, UInt32 buffer, UInt32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersfvNV(GL target, Int32 buffer, Int32 index, Int32 count, ref Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersfvNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIivNV(GL target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersIivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, Int32 buffer, Int32 index, Int32 count, IntPtr @params)
		{
			unsafe
			{
				Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, UInt32[] @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, UInt32 buffer, UInt32 index, Int32 count, ref UInt32 @params)
		{
			unsafe
			{
				fixed (UInt32* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void ProgramBufferParametersIuivNV(GL target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glProgramBufferParametersIuivNV((int)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
				}
			}
		}

		public static void BeginTransformFeedbackNV(int primitiveMode)
		{
			Delegates.glBeginTransformFeedbackNV((int)primitiveMode);
		}

		public static void EndTransformFeedbackNV()
		{
			Delegates.glEndTransformFeedbackNV();
		}

		public static void TransformFeedbackAttribsNV(UInt32 count, IntPtr attribs, int bufferMode)
		{
			unsafe
			{
				Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (int)bufferMode);
			}
		}

		public static void TransformFeedbackAttribsNV(Int32 count, IntPtr attribs, int bufferMode)
		{
			unsafe
			{
				Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (int)bufferMode);
			}
		}

		public static void TransformFeedbackAttribsNV(UInt32 count, Int32[] attribs, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* attribs_ptr = attribs)
				{
					Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackAttribsNV(Int32 count, Int32[] attribs, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* attribs_ptr = attribs)
				{
					Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackAttribsNV(UInt32 count, ref Int32 attribs, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* attribs_ptr = &attribs)
				{
					Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackAttribsNV(Int32 count, ref Int32 attribs, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* attribs_ptr = &attribs)
				{
					Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (int)bufferMode);
				}
			}
		}

		public static void BindBufferRangeNV(GL target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
		{
			Delegates.glBindBufferRangeNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
		}

		public static void BindBufferRangeNV(GL target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
		{
			Delegates.glBindBufferRangeNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
		}

		public static void BindBufferOffsetNV(GL target, UInt32 index, UInt32 buffer, IntPtr offset)
		{
			Delegates.glBindBufferOffsetNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
		}

		public static void BindBufferOffsetNV(GL target, Int32 index, Int32 buffer, IntPtr offset)
		{
			Delegates.glBindBufferOffsetNV((int)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
		}

		public static void BindBufferBaseNV(GL target, UInt32 index, UInt32 buffer)
		{
			Delegates.glBindBufferBaseNV((int)target, (UInt32)index, (UInt32)buffer);
		}

		public static void BindBufferBaseNV(GL target, Int32 index, Int32 buffer)
		{
			Delegates.glBindBufferBaseNV((int)target, (UInt32)index, (UInt32)buffer);
		}

		public static void TransformFeedbackVaryingsNV(UInt32 program, Int32 count, IntPtr locations, int bufferMode)
		{
			unsafe
			{
				Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (int)bufferMode);
			}
		}

		public static void TransformFeedbackVaryingsNV(Int32 program, Int32 count, IntPtr locations, int bufferMode)
		{
			unsafe
			{
				Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (int)bufferMode);
			}
		}

		public static void TransformFeedbackVaryingsNV(UInt32 program, Int32 count, Int32[] locations, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* locations_ptr = locations)
				{
					Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackVaryingsNV(Int32 program, Int32 count, Int32[] locations, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* locations_ptr = locations)
				{
					Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackVaryingsNV(UInt32 program, Int32 count, ref Int32 locations, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* locations_ptr = &locations)
				{
					Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
				}
			}
		}

		public static void TransformFeedbackVaryingsNV(Int32 program, Int32 count, ref Int32 locations, int bufferMode)
		{
			unsafe
			{
				fixed (Int32* locations_ptr = &locations)
				{
					Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (int)bufferMode);
				}
			}
		}

		public static void ActiveVaryingNV(UInt32 program, System.String name)
		{
			Delegates.glActiveVaryingNV((UInt32)program, (System.String)name);
		}

		public static void ActiveVaryingNV(Int32 program, System.String name)
		{
			Delegates.glActiveVaryingNV((UInt32)program, (System.String)name);
		}

		public static Int32 GetVaryingLocationNV(UInt32 program, System.String name)
		{
			return Delegates.glGetVaryingLocationNV((UInt32)program, (System.String)name);
		}

		public static Int32 GetVaryingLocationNV(Int32 program, System.String name)
		{
			return Delegates.glGetVaryingLocationNV((UInt32)program, (System.String)name);
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] IntPtr length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] IntPtr size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] Int32[] size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] IntPtr type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] int[] type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetActiveVaryingNV(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out int type, [Out] System.Text.StringBuilder name)
		{
			unsafe
			{
				fixed (Int32* length_ptr = &length)
				fixed (Int32* size_ptr = &size)
				fixed (int* type_ptr = &type)
				{
					Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (int*)type_ptr, (System.Text.StringBuilder)name);
					length = *length_ptr;
					size = *size_ptr;
					type = *type_ptr;
				}
			}
		}

		public static void GetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] IntPtr location)
		{
			unsafe
			{
				Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
			}
		}

		public static void GetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] IntPtr location)
		{
			unsafe
			{
				Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
			}
		}

		public static void GetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] Int32[] location)
		{
			unsafe
			{
				fixed (Int32* location_ptr = location)
				{
					Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
				}
			}
		}

		public static void GetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] Int32[] location)
		{
			unsafe
			{
				fixed (Int32* location_ptr = location)
				{
					Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
				}
			}
		}

		public static void GetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, [Out] out Int32 location)
		{
			unsafe
			{
				fixed (Int32* location_ptr = &location)
				{
					Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
					location = *location_ptr;
				}
			}
		}

		public static void GetTransformFeedbackVaryingNV(Int32 program, Int32 index, [Out] out Int32 location)
		{
			unsafe
			{
				fixed (Int32* location_ptr = &location)
				{
					Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
					location = *location_ptr;
				}
			}
		}

		public static void ResizeBuffersMESA()
		{
			Delegates.glResizeBuffersMESA();
		}

		public static void WindowPos2dMESA(Double x, Double y)
		{
			Delegates.glWindowPos2dMESA((Double)x, (Double)y);
		}

		public static void WindowPos2dvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2dvMESA((Double*)v);
			}
		}

		public static void WindowPos2dvMESA(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos2dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2dvMESA(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos2dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos2fMESA(Single x, Single y)
		{
			Delegates.glWindowPos2fMESA((Single)x, (Single)y);
		}

		public static void WindowPos2fvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2fvMESA((Single*)v);
			}
		}

		public static void WindowPos2fvMESA(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos2fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2fvMESA(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos2fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos2iMESA(Int32 x, Int32 y)
		{
			Delegates.glWindowPos2iMESA((Int32)x, (Int32)y);
		}

		public static void WindowPos2ivMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2ivMESA((Int32*)v);
			}
		}

		public static void WindowPos2ivMESA(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2ivMESA(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos2sMESA(Int16 x, Int16 y)
		{
			Delegates.glWindowPos2sMESA((Int16)x, (Int16)y);
		}

		public static void WindowPos2svMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos2svMESA((Int16*)v);
			}
		}

		public static void WindowPos2svMESA(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos2svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos2svMESA(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos2svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3dMESA(Double x, Double y, Double z)
		{
			Delegates.glWindowPos3dMESA((Double)x, (Double)y, (Double)z);
		}

		public static void WindowPos3dvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3dvMESA((Double*)v);
			}
		}

		public static void WindowPos3dvMESA(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos3dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3dvMESA(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos3dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos3fMESA(Single x, Single y, Single z)
		{
			Delegates.glWindowPos3fMESA((Single)x, (Single)y, (Single)z);
		}

		public static void WindowPos3fvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3fvMESA((Single*)v);
			}
		}

		public static void WindowPos3fvMESA(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos3fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3fvMESA(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos3fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos3iMESA(Int32 x, Int32 y, Int32 z)
		{
			Delegates.glWindowPos3iMESA((Int32)x, (Int32)y, (Int32)z);
		}

		public static void WindowPos3ivMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3ivMESA((Int32*)v);
			}
		}

		public static void WindowPos3ivMESA(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3ivMESA(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos3sMESA(Int16 x, Int16 y, Int16 z)
		{
			Delegates.glWindowPos3sMESA((Int16)x, (Int16)y, (Int16)z);
		}

		public static void WindowPos3svMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos3svMESA((Int16*)v);
			}
		}

		public static void WindowPos3svMESA(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos3svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos3svMESA(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos3svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos4dMESA(Double x, Double y, Double z, Double w)
		{
			Delegates.glWindowPos4dMESA((Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void WindowPos4dvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos4dvMESA((Double*)v);
			}
		}

		public static void WindowPos4dvMESA(Double[] v)
		{
			unsafe
			{
				fixed (Double* v_ptr = v)
				{
					Delegates.glWindowPos4dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos4dvMESA(ref Double v)
		{
			unsafe
			{
				fixed (Double* v_ptr = &v)
				{
					Delegates.glWindowPos4dvMESA((Double*)v_ptr);
				}
			}
		}

		public static void WindowPos4fMESA(Single x, Single y, Single z, Single w)
		{
			Delegates.glWindowPos4fMESA((Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void WindowPos4fvMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos4fvMESA((Single*)v);
			}
		}

		public static void WindowPos4fvMESA(Single[] v)
		{
			unsafe
			{
				fixed (Single* v_ptr = v)
				{
					Delegates.glWindowPos4fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos4fvMESA(ref Single v)
		{
			unsafe
			{
				fixed (Single* v_ptr = &v)
				{
					Delegates.glWindowPos4fvMESA((Single*)v_ptr);
				}
			}
		}

		public static void WindowPos4iMESA(Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glWindowPos4iMESA((Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void WindowPos4ivMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos4ivMESA((Int32*)v);
			}
		}

		public static void WindowPos4ivMESA(Int32[] v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = v)
				{
					Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos4ivMESA(ref Int32 v)
		{
			unsafe
			{
				fixed (Int32* v_ptr = &v)
				{
					Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
				}
			}
		}

		public static void WindowPos4sMESA(Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glWindowPos4sMESA((Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void WindowPos4svMESA(IntPtr v)
		{
			unsafe
			{
				Delegates.glWindowPos4svMESA((Int16*)v);
			}
		}

		public static void WindowPos4svMESA(Int16[] v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = v)
				{
					Delegates.glWindowPos4svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void WindowPos4svMESA(ref Int16 v)
		{
			unsafe
			{
				fixed (Int16* v_ptr = &v)
				{
					Delegates.glWindowPos4svMESA((Int16*)v_ptr);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, Int32[] first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, Int32[] first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, ref Int32 first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, ref Int32 first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(IntPtr mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, IntPtr first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, IntPtr first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, IntPtr first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, Int32[] first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, Int32[] first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, ref Int32 first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, ref Int32 first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(int[] mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, IntPtr first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, IntPtr first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, IntPtr first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, Int32[] first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, Int32[] first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, ref Int32 first, IntPtr count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, ref Int32 first, Int32[] count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawArraysIBM(ref int mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawArraysIBM((int*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
				try
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
				}
				finally
				{
					indices_ptr.Free();
				}
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, Int32[] count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, Int32[] count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, ref Int32 count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(IntPtr mode, ref Int32 count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, IntPtr count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, IntPtr count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, Int32[] count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, Int32[] count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, ref Int32 count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(int[] mode, ref Int32 count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = mode)
				fixed (Int32* count_ptr = &count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, IntPtr count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, IntPtr count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, Int32[] count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, Int32[] count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, ref Int32 count, GL type, IntPtr indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
				}
			}
		}

		public static void MultiModeDrawElementsIBM(ref int mode, ref Int32 count, GL type, [In, Out] object indices, Int32 primcount, Int32 modestride)
		{
			unsafe
			{
				fixed (int* mode_ptr = &mode)
				fixed (Int32* count_ptr = &count)
				{
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try
					{
						Delegates.glMultiModeDrawElementsIBM((int*)mode_ptr, (Int32*)count_ptr, (int)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
					}
					finally
					{
						indices_ptr.Free();
					}
				}
			}
		}

		public static void ColorPointerListIBM(Int32 size, GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void ColorPointerListIBM(Int32 size, GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void SecondaryColorPointerListIBM(Int32 size, GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glSecondaryColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void SecondaryColorPointerListIBM(Int32 size, GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glSecondaryColorPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void EdgeFlagPointerListIBM(Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glEdgeFlagPointerListIBM((Int32)stride, (Int32*)pointer, (Int32)ptrstride);
			}
		}

		public static void EdgeFlagPointerListIBM(Int32 stride, Int32[] pointer, Int32 ptrstride)
		{
			unsafe
			{
				fixed (Int32* pointer_ptr = pointer)
				{
					Delegates.glEdgeFlagPointerListIBM((Int32)stride, (Int32*)pointer_ptr, (Int32)ptrstride);
				}
			}
		}

		public static void EdgeFlagPointerListIBM(Int32 stride, ref Int32 pointer, Int32 ptrstride)
		{
			unsafe
			{
				fixed (Int32* pointer_ptr = &pointer)
				{
					Delegates.glEdgeFlagPointerListIBM((Int32)stride, (Int32*)pointer_ptr, (Int32)ptrstride);
				}
			}
		}

		public static void FogCoordPointerListIBM(GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glFogCoordPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void FogCoordPointerListIBM(GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glFogCoordPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void IndexPointerListIBM(GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glIndexPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void IndexPointerListIBM(GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glIndexPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void NormalPointerListIBM(GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glNormalPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void NormalPointerListIBM(GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glNormalPointerListIBM((int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TexCoordPointerListIBM(Int32 size, GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glTexCoordPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void TexCoordPointerListIBM(Int32 size, GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glTexCoordPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexPointerListIBM(Int32 size, GL type, Int32 stride, IntPtr pointer, Int32 ptrstride)
		{
			unsafe
			{
				Delegates.glVertexPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
			}
		}

		public static void VertexPointerListIBM(Int32 size, GL type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexPointerListIBM((Int32)size, (int)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void TbufferMask3DFX(UInt32 mask)
		{
			Delegates.glTbufferMask3DFX((UInt32)mask);
		}

		public static void TbufferMask3DFX(Int32 mask)
		{
			Delegates.glTbufferMask3DFX((UInt32)mask);
		}

		public static void TexBumpParameterivATI(GL pname, IntPtr param)
		{
			unsafe
			{
				Delegates.glTexBumpParameterivATI((int)pname, (Int32*)param);
			}
		}

		public static void TexBumpParameterivATI(GL pname, Int32[] param)
		{
			unsafe
			{
				fixed (Int32* param_ptr = param)
				{
					Delegates.glTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
				}
			}
		}

		public static void TexBumpParameterivATI(GL pname, ref Int32 param)
		{
			unsafe
			{
				fixed (Int32* param_ptr = &param)
				{
					Delegates.glTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
				}
			}
		}

		public static void TexBumpParameterfvATI(GL pname, IntPtr param)
		{
			unsafe
			{
				Delegates.glTexBumpParameterfvATI((int)pname, (Single*)param);
			}
		}

		public static void TexBumpParameterfvATI(GL pname, Single[] param)
		{
			unsafe
			{
				fixed (Single* param_ptr = param)
				{
					Delegates.glTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
				}
			}
		}

		public static void TexBumpParameterfvATI(GL pname, ref Single param)
		{
			unsafe
			{
				fixed (Single* param_ptr = &param)
				{
					Delegates.glTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
				}
			}
		}

		public static void GetTexBumpParameterivATI(GL pname, [Out] IntPtr param)
		{
			unsafe
			{
				Delegates.glGetTexBumpParameterivATI((int)pname, (Int32*)param);
			}
		}

		public static void GetTexBumpParameterivATI(GL pname, [Out] Int32[] param)
		{
			unsafe
			{
				fixed (Int32* param_ptr = param)
				{
					Delegates.glGetTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
				}
			}
		}

		public static void GetTexBumpParameterivATI(GL pname, [Out] out Int32 param)
		{
			unsafe
			{
				fixed (Int32* param_ptr = &param)
				{
					Delegates.glGetTexBumpParameterivATI((int)pname, (Int32*)param_ptr);
					param = *param_ptr;
				}
			}
		}

		public static void GetTexBumpParameterfvATI(GL pname, [Out] IntPtr param)
		{
			unsafe
			{
				Delegates.glGetTexBumpParameterfvATI((int)pname, (Single*)param);
			}
		}

		public static void GetTexBumpParameterfvATI(GL pname, [Out] Single[] param)
		{
			unsafe
			{
				fixed (Single* param_ptr = param)
				{
					Delegates.glGetTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
				}
			}
		}

		public static void GetTexBumpParameterfvATI(GL pname, [Out] out Single param)
		{
			unsafe
			{
				fixed (Single* param_ptr = &param)
				{
					Delegates.glGetTexBumpParameterfvATI((int)pname, (Single*)param_ptr);
					param = *param_ptr;
				}
			}
		}

		public static Int32 GenFragmentShadersATI(UInt32 range)
		{
			return Delegates.glGenFragmentShadersATI((UInt32)range);
		}

		public static Int32 GenFragmentShadersATI(Int32 range)
		{
			return Delegates.glGenFragmentShadersATI((UInt32)range);
		}

		public static void BindFragmentShaderATI(UInt32 id)
		{
			Delegates.glBindFragmentShaderATI((UInt32)id);
		}

		public static void BindFragmentShaderATI(Int32 id)
		{
			Delegates.glBindFragmentShaderATI((UInt32)id);
		}

		public static void DeleteFragmentShaderATI(UInt32 id)
		{
			Delegates.glDeleteFragmentShaderATI((UInt32)id);
		}

		public static void DeleteFragmentShaderATI(Int32 id)
		{
			Delegates.glDeleteFragmentShaderATI((UInt32)id);
		}

		public static void BeginFragmentShaderATI()
		{
			Delegates.glBeginFragmentShaderATI();
		}

		public static void EndFragmentShaderATI()
		{
			Delegates.glEndFragmentShaderATI();
		}

		public static void PassTexCoordATI(UInt32 dst, UInt32 coord, int swizzle)
		{
			Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (int)swizzle);
		}

		public static void PassTexCoordATI(Int32 dst, Int32 coord, int swizzle)
		{
			Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (int)swizzle);
		}

		public static void SampleMapATI(UInt32 dst, UInt32 interp, int swizzle)
		{
			Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (int)swizzle);
		}

		public static void SampleMapATI(Int32 dst, Int32 interp, int swizzle)
		{
			Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (int)swizzle);
		}

		public static void ColorFragmentOp1ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
		{
			Delegates.glColorFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
		}

		public static void ColorFragmentOp1ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
		{
			Delegates.glColorFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
		}

		public static void ColorFragmentOp2ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
		{
			Delegates.glColorFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
		}

		public static void ColorFragmentOp2ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
		{
			Delegates.glColorFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
		}

		public static void ColorFragmentOp3ATI(int op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
		{
			Delegates.glColorFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
		}

		public static void ColorFragmentOp3ATI(int op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
		{
			Delegates.glColorFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
		}

		public static void AlphaFragmentOp1ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
		{
			Delegates.glAlphaFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
		}

		public static void AlphaFragmentOp1ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
		{
			Delegates.glAlphaFragmentOp1ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
		}

		public static void AlphaFragmentOp2ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
		{
			Delegates.glAlphaFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
		}

		public static void AlphaFragmentOp2ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
		{
			Delegates.glAlphaFragmentOp2ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
		}

		public static void AlphaFragmentOp3ATI(int op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
		{
			Delegates.glAlphaFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
		}

		public static void AlphaFragmentOp3ATI(int op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
		{
			Delegates.glAlphaFragmentOp3ATI((int)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
		}

		public static void SetFragmentShaderConstantATI(UInt32 dst, IntPtr value)
		{
			unsafe
			{
				Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
			}
		}

		public static void SetFragmentShaderConstantATI(Int32 dst, IntPtr value)
		{
			unsafe
			{
				Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
			}
		}

		public static void SetFragmentShaderConstantATI(UInt32 dst, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
				}
			}
		}

		public static void SetFragmentShaderConstantATI(Int32 dst, Single[] value)
		{
			unsafe
			{
				fixed (Single* value_ptr = value)
				{
					Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
				}
			}
		}

		public static void SetFragmentShaderConstantATI(UInt32 dst, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
				}
			}
		}

		public static void SetFragmentShaderConstantATI(Int32 dst, ref Single value)
		{
			unsafe
			{
				fixed (Single* value_ptr = &value)
				{
					Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
				}
			}
		}

		public static void PNTrianglesiATI(GL pname, Int32 param)
		{
			Delegates.glPNTrianglesiATI((int)pname, (Int32)param);
		}

		public static void PNTrianglesfATI(GL pname, Single param)
		{
			Delegates.glPNTrianglesfATI((int)pname, (Single)param);
		}

		public static Int32 NewObjectBufferATI(Int32 size, IntPtr pointer, int usage)
		{
			unsafe
			{
				return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer, (int)usage);
			}
		}

		public static Int32 NewObjectBufferATI(Int32 size, [In, Out] object pointer, int usage)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)usage);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static Int32 IsObjectBufferATI(UInt32 buffer)
		{
			return Delegates.glIsObjectBufferATI((UInt32)buffer);
		}

		public static Int32 IsObjectBufferATI(Int32 buffer)
		{
			return Delegates.glIsObjectBufferATI((UInt32)buffer);
		}

		public static void UpdateObjectBufferATI(UInt32 buffer, UInt32 offset, Int32 size, IntPtr pointer, int preserve)
		{
			unsafe
			{
				Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (int)preserve);
			}
		}

		public static void UpdateObjectBufferATI(Int32 buffer, Int32 offset, Int32 size, IntPtr pointer, int preserve)
		{
			unsafe
			{
				Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (int)preserve);
			}
		}

		public static void UpdateObjectBufferATI(UInt32 buffer, UInt32 offset, Int32 size, [In, Out] object pointer, int preserve)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)preserve);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void UpdateObjectBufferATI(Int32 buffer, Int32 offset, Int32 size, [In, Out] object pointer, int preserve)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (int)preserve);
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void GetObjectBufferfvATI(UInt32 buffer, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params);
			}
		}

		public static void GetObjectBufferfvATI(Int32 buffer, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params);
			}
		}

		public static void GetObjectBufferfvATI(UInt32 buffer, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetObjectBufferfvATI(Int32 buffer, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetObjectBufferfvATI(UInt32 buffer, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectBufferfvATI(Int32 buffer, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetObjectBufferfvATI((UInt32)buffer, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectBufferivATI(UInt32 buffer, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params);
			}
		}

		public static void GetObjectBufferivATI(Int32 buffer, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params);
			}
		}

		public static void GetObjectBufferivATI(UInt32 buffer, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetObjectBufferivATI(Int32 buffer, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetObjectBufferivATI(UInt32 buffer, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetObjectBufferivATI(Int32 buffer, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetObjectBufferivATI((UInt32)buffer, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void FreeObjectBufferATI(UInt32 buffer)
		{
			Delegates.glFreeObjectBufferATI((UInt32)buffer);
		}

		public static void FreeObjectBufferATI(Int32 buffer)
		{
			Delegates.glFreeObjectBufferATI((UInt32)buffer);
		}

		public static void ArrayObjectATI(int array, Int32 size, GL type, Int32 stride, UInt32 buffer, UInt32 offset)
		{
			Delegates.glArrayObjectATI((int)array, (Int32)size, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void ArrayObjectATI(int array, Int32 size, GL type, Int32 stride, Int32 buffer, Int32 offset)
		{
			Delegates.glArrayObjectATI((int)array, (Int32)size, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void GetArrayObjectfvATI(int array, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params);
			}
		}

		public static void GetArrayObjectfvATI(int array, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetArrayObjectfvATI(int array, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetArrayObjectfvATI((int)array, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetArrayObjectivATI(int array, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params);
			}
		}

		public static void GetArrayObjectivATI(int array, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetArrayObjectivATI(int array, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetArrayObjectivATI((int)array, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void VariantArrayObjectATI(UInt32 id, GL type, Int32 stride, UInt32 buffer, UInt32 offset)
		{
			Delegates.glVariantArrayObjectATI((UInt32)id, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void VariantArrayObjectATI(Int32 id, GL type, Int32 stride, Int32 buffer, Int32 offset)
		{
			Delegates.glVariantArrayObjectATI((UInt32)id, (int)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void GetVariantArrayObjectfvATI(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params);
			}
		}

		public static void GetVariantArrayObjectfvATI(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params);
			}
		}

		public static void GetVariantArrayObjectfvATI(UInt32 id, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVariantArrayObjectfvATI(Int32 id, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVariantArrayObjectfvATI(UInt32 id, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVariantArrayObjectfvATI(Int32 id, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVariantArrayObjectivATI(UInt32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVariantArrayObjectivATI(Int32 id, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVariantArrayObjectivATI(UInt32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVariantArrayObjectivATI(Int32 id, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVariantArrayObjectivATI(UInt32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVariantArrayObjectivATI(Int32 id, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVariantArrayObjectivATI((UInt32)id, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void VertexStream1sATI(int stream, Int16 x)
		{
			Delegates.glVertexStream1sATI((int)stream, (Int16)x);
		}

		public static void VertexStream1svATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream1svATI((int)stream, (Int16*)coords);
			}
		}

		public static void VertexStream1svATI(int stream, Int16[] coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = coords)
				{
					Delegates.glVertexStream1svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream1svATI(int stream, ref Int16 coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = &coords)
				{
					Delegates.glVertexStream1svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream1iATI(int stream, Int32 x)
		{
			Delegates.glVertexStream1iATI((int)stream, (Int32)x);
		}

		public static void VertexStream1ivATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream1ivATI((int)stream, (Int32*)coords);
			}
		}

		public static void VertexStream1ivATI(int stream, Int32[] coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = coords)
				{
					Delegates.glVertexStream1ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream1ivATI(int stream, ref Int32 coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = &coords)
				{
					Delegates.glVertexStream1ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream1fATI(int stream, Single x)
		{
			Delegates.glVertexStream1fATI((int)stream, (Single)x);
		}

		public static void VertexStream1fvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream1fvATI((int)stream, (Single*)coords);
			}
		}

		public static void VertexStream1fvATI(int stream, Single[] coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = coords)
				{
					Delegates.glVertexStream1fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream1fvATI(int stream, ref Single coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = &coords)
				{
					Delegates.glVertexStream1fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream1dATI(int stream, Double x)
		{
			Delegates.glVertexStream1dATI((int)stream, (Double)x);
		}

		public static void VertexStream1dvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream1dvATI((int)stream, (Double*)coords);
			}
		}

		public static void VertexStream1dvATI(int stream, Double[] coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = coords)
				{
					Delegates.glVertexStream1dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream1dvATI(int stream, ref Double coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = &coords)
				{
					Delegates.glVertexStream1dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream2sATI(int stream, Int16 x, Int16 y)
		{
			Delegates.glVertexStream2sATI((int)stream, (Int16)x, (Int16)y);
		}

		public static void VertexStream2svATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream2svATI((int)stream, (Int16*)coords);
			}
		}

		public static void VertexStream2svATI(int stream, Int16[] coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = coords)
				{
					Delegates.glVertexStream2svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream2svATI(int stream, ref Int16 coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = &coords)
				{
					Delegates.glVertexStream2svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream2iATI(int stream, Int32 x, Int32 y)
		{
			Delegates.glVertexStream2iATI((int)stream, (Int32)x, (Int32)y);
		}

		public static void VertexStream2ivATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream2ivATI((int)stream, (Int32*)coords);
			}
		}

		public static void VertexStream2ivATI(int stream, Int32[] coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = coords)
				{
					Delegates.glVertexStream2ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream2ivATI(int stream, ref Int32 coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = &coords)
				{
					Delegates.glVertexStream2ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream2fATI(int stream, Single x, Single y)
		{
			Delegates.glVertexStream2fATI((int)stream, (Single)x, (Single)y);
		}

		public static void VertexStream2fvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream2fvATI((int)stream, (Single*)coords);
			}
		}

		public static void VertexStream2fvATI(int stream, Single[] coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = coords)
				{
					Delegates.glVertexStream2fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream2fvATI(int stream, ref Single coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = &coords)
				{
					Delegates.glVertexStream2fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream2dATI(int stream, Double x, Double y)
		{
			Delegates.glVertexStream2dATI((int)stream, (Double)x, (Double)y);
		}

		public static void VertexStream2dvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream2dvATI((int)stream, (Double*)coords);
			}
		}

		public static void VertexStream2dvATI(int stream, Double[] coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = coords)
				{
					Delegates.glVertexStream2dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream2dvATI(int stream, ref Double coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = &coords)
				{
					Delegates.glVertexStream2dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream3sATI(int stream, Int16 x, Int16 y, Int16 z)
		{
			Delegates.glVertexStream3sATI((int)stream, (Int16)x, (Int16)y, (Int16)z);
		}

		public static void VertexStream3svATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream3svATI((int)stream, (Int16*)coords);
			}
		}

		public static void VertexStream3svATI(int stream, Int16[] coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = coords)
				{
					Delegates.glVertexStream3svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream3svATI(int stream, ref Int16 coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = &coords)
				{
					Delegates.glVertexStream3svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream3iATI(int stream, Int32 x, Int32 y, Int32 z)
		{
			Delegates.glVertexStream3iATI((int)stream, (Int32)x, (Int32)y, (Int32)z);
		}

		public static void VertexStream3ivATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream3ivATI((int)stream, (Int32*)coords);
			}
		}

		public static void VertexStream3ivATI(int stream, Int32[] coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = coords)
				{
					Delegates.glVertexStream3ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream3ivATI(int stream, ref Int32 coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = &coords)
				{
					Delegates.glVertexStream3ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream3fATI(int stream, Single x, Single y, Single z)
		{
			Delegates.glVertexStream3fATI((int)stream, (Single)x, (Single)y, (Single)z);
		}

		public static void VertexStream3fvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream3fvATI((int)stream, (Single*)coords);
			}
		}

		public static void VertexStream3fvATI(int stream, Single[] coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = coords)
				{
					Delegates.glVertexStream3fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream3fvATI(int stream, ref Single coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = &coords)
				{
					Delegates.glVertexStream3fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream3dATI(int stream, Double x, Double y, Double z)
		{
			Delegates.glVertexStream3dATI((int)stream, (Double)x, (Double)y, (Double)z);
		}

		public static void VertexStream3dvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream3dvATI((int)stream, (Double*)coords);
			}
		}

		public static void VertexStream3dvATI(int stream, Double[] coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = coords)
				{
					Delegates.glVertexStream3dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream3dvATI(int stream, ref Double coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = &coords)
				{
					Delegates.glVertexStream3dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream4sATI(int stream, Int16 x, Int16 y, Int16 z, Int16 w)
		{
			Delegates.glVertexStream4sATI((int)stream, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		public static void VertexStream4svATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream4svATI((int)stream, (Int16*)coords);
			}
		}

		public static void VertexStream4svATI(int stream, Int16[] coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = coords)
				{
					Delegates.glVertexStream4svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream4svATI(int stream, ref Int16 coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = &coords)
				{
					Delegates.glVertexStream4svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void VertexStream4iATI(int stream, Int32 x, Int32 y, Int32 z, Int32 w)
		{
			Delegates.glVertexStream4iATI((int)stream, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		public static void VertexStream4ivATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream4ivATI((int)stream, (Int32*)coords);
			}
		}

		public static void VertexStream4ivATI(int stream, Int32[] coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = coords)
				{
					Delegates.glVertexStream4ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream4ivATI(int stream, ref Int32 coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = &coords)
				{
					Delegates.glVertexStream4ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void VertexStream4fATI(int stream, Single x, Single y, Single z, Single w)
		{
			Delegates.glVertexStream4fATI((int)stream, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		public static void VertexStream4fvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream4fvATI((int)stream, (Single*)coords);
			}
		}

		public static void VertexStream4fvATI(int stream, Single[] coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = coords)
				{
					Delegates.glVertexStream4fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream4fvATI(int stream, ref Single coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = &coords)
				{
					Delegates.glVertexStream4fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void VertexStream4dATI(int stream, Double x, Double y, Double z, Double w)
		{
			Delegates.glVertexStream4dATI((int)stream, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		public static void VertexStream4dvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glVertexStream4dvATI((int)stream, (Double*)coords);
			}
		}

		public static void VertexStream4dvATI(int stream, Double[] coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = coords)
				{
					Delegates.glVertexStream4dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void VertexStream4dvATI(int stream, ref Double coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = &coords)
				{
					Delegates.glVertexStream4dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void NormalStream3bATI(int stream, SByte nx, SByte ny, SByte nz)
		{
			Delegates.glNormalStream3bATI((int)stream, (SByte)nx, (SByte)ny, (SByte)nz);
		}

		public static void NormalStream3bATI(int stream, Byte nx, Byte ny, Byte nz)
		{
			Delegates.glNormalStream3bATI((int)stream, (SByte)nx, (SByte)ny, (SByte)nz);
		}

		public static void NormalStream3bvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glNormalStream3bvATI((int)stream, (SByte*)coords);
			}
		}

		public static void NormalStream3bvATI(int stream, SByte[] coords)
		{
			unsafe
			{
				fixed (SByte* coords_ptr = coords)
				{
					Delegates.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
				}
			}
		}

		public static void NormalStream3bvATI(int stream, Byte[] coords)
		{
			unsafe
			{
				fixed (Byte* coords_ptr = coords)
				{
					Delegates.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
				}
			}
		}

		public static void NormalStream3bvATI(int stream, ref SByte coords)
		{
			unsafe
			{
				fixed (SByte* coords_ptr = &coords)
				{
					Delegates.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
				}
			}
		}

		public static void NormalStream3bvATI(int stream, ref Byte coords)
		{
			unsafe
			{
				fixed (Byte* coords_ptr = &coords)
				{
					Delegates.glNormalStream3bvATI((int)stream, (SByte*)coords_ptr);
				}
			}
		}

		public static void NormalStream3sATI(int stream, Int16 nx, Int16 ny, Int16 nz)
		{
			Delegates.glNormalStream3sATI((int)stream, (Int16)nx, (Int16)ny, (Int16)nz);
		}

		public static void NormalStream3svATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glNormalStream3svATI((int)stream, (Int16*)coords);
			}
		}

		public static void NormalStream3svATI(int stream, Int16[] coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = coords)
				{
					Delegates.glNormalStream3svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void NormalStream3svATI(int stream, ref Int16 coords)
		{
			unsafe
			{
				fixed (Int16* coords_ptr = &coords)
				{
					Delegates.glNormalStream3svATI((int)stream, (Int16*)coords_ptr);
				}
			}
		}

		public static void NormalStream3iATI(int stream, Int32 nx, Int32 ny, Int32 nz)
		{
			Delegates.glNormalStream3iATI((int)stream, (Int32)nx, (Int32)ny, (Int32)nz);
		}

		public static void NormalStream3ivATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glNormalStream3ivATI((int)stream, (Int32*)coords);
			}
		}

		public static void NormalStream3ivATI(int stream, Int32[] coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = coords)
				{
					Delegates.glNormalStream3ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void NormalStream3ivATI(int stream, ref Int32 coords)
		{
			unsafe
			{
				fixed (Int32* coords_ptr = &coords)
				{
					Delegates.glNormalStream3ivATI((int)stream, (Int32*)coords_ptr);
				}
			}
		}

		public static void NormalStream3fATI(int stream, Single nx, Single ny, Single nz)
		{
			Delegates.glNormalStream3fATI((int)stream, (Single)nx, (Single)ny, (Single)nz);
		}

		public static void NormalStream3fvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glNormalStream3fvATI((int)stream, (Single*)coords);
			}
		}

		public static void NormalStream3fvATI(int stream, Single[] coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = coords)
				{
					Delegates.glNormalStream3fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void NormalStream3fvATI(int stream, ref Single coords)
		{
			unsafe
			{
				fixed (Single* coords_ptr = &coords)
				{
					Delegates.glNormalStream3fvATI((int)stream, (Single*)coords_ptr);
				}
			}
		}

		public static void NormalStream3dATI(int stream, Double nx, Double ny, Double nz)
		{
			Delegates.glNormalStream3dATI((int)stream, (Double)nx, (Double)ny, (Double)nz);
		}

		public static void NormalStream3dvATI(int stream, IntPtr coords)
		{
			unsafe
			{
				Delegates.glNormalStream3dvATI((int)stream, (Double*)coords);
			}
		}

		public static void NormalStream3dvATI(int stream, Double[] coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = coords)
				{
					Delegates.glNormalStream3dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void NormalStream3dvATI(int stream, ref Double coords)
		{
			unsafe
			{
				fixed (Double* coords_ptr = &coords)
				{
					Delegates.glNormalStream3dvATI((int)stream, (Double*)coords_ptr);
				}
			}
		}

		public static void ClientActiveVertexStreamATI(int stream)
		{
			Delegates.glClientActiveVertexStreamATI((int)stream);
		}

		public static void VertexBlendEnviATI(GL pname, Int32 param)
		{
			Delegates.glVertexBlendEnviATI((int)pname, (Int32)param);
		}

		public static void VertexBlendEnvfATI(GL pname, Single param)
		{
			Delegates.glVertexBlendEnvfATI((int)pname, (Single)param);
		}

		public static void ElementPointerATI(GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glElementPointerATI((int)type, (IntPtr)pointer);
			}
		}

		public static void ElementPointerATI(GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glElementPointerATI((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void DrawElementArrayATI(GL mode, Int32 count)
		{
			Delegates.glDrawElementArrayATI((int)mode, (Int32)count);
		}

		public static void DrawRangeElementArrayATI(GL mode, UInt32 start, UInt32 end, Int32 count)
		{
			Delegates.glDrawRangeElementArrayATI((int)mode, (UInt32)start, (UInt32)end, (Int32)count);
		}

		public static void DrawRangeElementArrayATI(GL mode, Int32 start, Int32 end, Int32 count)
		{
			Delegates.glDrawRangeElementArrayATI((int)mode, (UInt32)start, (UInt32)end, (Int32)count);
		}

		public static void DrawBuffersATI(Int32 n, IntPtr bufs)
		{
			unsafe
			{
				Delegates.glDrawBuffersATI((Int32)n, (int*)bufs);
			}
		}

		public static void DrawBuffersATI(Int32 n, int[] bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = bufs)
				{
					Delegates.glDrawBuffersATI((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static void DrawBuffersATI(Int32 n, ref int bufs)
		{
			unsafe
			{
				fixed (int* bufs_ptr = &bufs)
				{
					Delegates.glDrawBuffersATI((Int32)n, (int*)bufs_ptr);
				}
			}
		}

		public static IntPtr MapObjectBufferATI(UInt32 buffer)
		{
			return Delegates.glMapObjectBufferATI((UInt32)buffer);
		}

		public static IntPtr MapObjectBufferATI(Int32 buffer)
		{
			return Delegates.glMapObjectBufferATI((UInt32)buffer);
		}

		public static void UnmapObjectBufferATI(UInt32 buffer)
		{
			Delegates.glUnmapObjectBufferATI((UInt32)buffer);
		}

		public static void UnmapObjectBufferATI(Int32 buffer)
		{
			Delegates.glUnmapObjectBufferATI((UInt32)buffer);
		}

		public static void StencilOpSeparateATI(int face, int sfail, int dpfail, int dppass)
		{
			Delegates.glStencilOpSeparateATI((int)face, (int)sfail, (int)dpfail, (int)dppass);
		}

		public static void StencilFuncSeparateATI(int frontfunc, int backfunc, Int32 @ref, UInt32 mask)
		{
			Delegates.glStencilFuncSeparateATI((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
		}

		public static void StencilFuncSeparateATI(int frontfunc, int backfunc, Int32 @ref, Int32 mask)
		{
			Delegates.glStencilFuncSeparateATI((int)frontfunc, (int)backfunc, (Int32)@ref, (UInt32)mask);
		}

		public static void VertexAttribArrayObjectATI(UInt32 index, Int32 size, GL type, Int32 normalized, Int32 stride, UInt32 buffer, UInt32 offset)
		{
			Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void VertexAttribArrayObjectATI(Int32 index, Int32 size, GL type, Int32 normalized, Int32 stride, Int32 buffer, Int32 offset)
		{
			Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (int)type, (Int32)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
		}

		public static void GetVertexAttribArrayObjectfvATI(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribArrayObjectfvATI(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params);
			}
		}

		public static void GetVertexAttribArrayObjectfvATI(UInt32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribArrayObjectfvATI(Int32 index, GL pname, [Out] Single[] @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribArrayObjectfvATI(UInt32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribArrayObjectfvATI(Int32 index, GL pname, [Out] out Single @params)
		{
			unsafe
			{
				fixed (Single* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (int)pname, (Single*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribArrayObjectivATI(UInt32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribArrayObjectivATI(Int32 index, GL pname, [Out] IntPtr @params)
		{
			unsafe
			{
				Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params);
			}
		}

		public static void GetVertexAttribArrayObjectivATI(UInt32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribArrayObjectivATI(Int32 index, GL pname, [Out] Int32[] @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = @params)
				{
					Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
				}
			}
		}

		public static void GetVertexAttribArrayObjectivATI(UInt32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void GetVertexAttribArrayObjectivATI(Int32 index, GL pname, [Out] out Int32 @params)
		{
			unsafe
			{
				fixed (Int32* @params_ptr = &@params)
				{
					Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (int)pname, (Int32*)@params_ptr);
					@params = *@params_ptr;
				}
			}
		}

		public static void ElementPointerAPPLE(GL type, IntPtr pointer)
		{
			unsafe
			{
				Delegates.glElementPointerAPPLE((int)type, (IntPtr)pointer);
			}
		}

		public static void ElementPointerAPPLE(GL type, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glElementPointerAPPLE((int)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void DrawElementArrayAPPLE(GL mode, Int32 first, Int32 count)
		{
			Delegates.glDrawElementArrayAPPLE((int)mode, (Int32)first, (Int32)count);
		}

		public static void DrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, Int32 first, Int32 count)
		{
			Delegates.glDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
		}

		public static void DrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, Int32 first, Int32 count)
		{
			Delegates.glDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, IntPtr first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, IntPtr first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, IntPtr first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, Int32[] first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, Int32[] first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, Int32[] first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, ref Int32 first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, ref Int32 first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GL mode, ref Int32 first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawElementArrayAPPLE((int)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, IntPtr first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, IntPtr first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, IntPtr first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, IntPtr first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, IntPtr first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, IntPtr first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, Int32[] first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, Int32[] first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, Int32[] first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, Int32[] first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, Int32[] first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, ref Int32 first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, ref Int32 first, IntPtr count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, ref Int32 first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, ref Int32 first, Int32[] count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, UInt32 start, UInt32 end, ref Int32 first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GL mode, Int32 start, Int32 end, ref Int32 first, ref Int32 count, Int32 primcount)
		{
			unsafe
			{
				fixed (Int32* first_ptr = &first)
				fixed (Int32* count_ptr = &count)
				{
					Delegates.glMultiDrawRangeElementArrayAPPLE((int)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
				}
			}
		}

		public static void GenFencesAPPLE(Int32 n, [Out] IntPtr fences)
		{
			unsafe
			{
				Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
			}
		}

		public static void GenFencesAPPLE(Int32 n, [Out] UInt32[] fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = fences)
				{
					Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void GenFencesAPPLE(Int32 n, [Out] Int32[] fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = fences)
				{
					Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void GenFencesAPPLE(Int32 n, [Out] out UInt32 fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = &fences)
				{
					Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
					fences = *fences_ptr;
				}
			}
		}

		public static void GenFencesAPPLE(Int32 n, [Out] out Int32 fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = &fences)
				{
					Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
					fences = *fences_ptr;
				}
			}
		}

		public static void DeleteFencesAPPLE(Int32 n, IntPtr fences)
		{
			unsafe
			{
				Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
			}
		}

		public static void DeleteFencesAPPLE(Int32 n, UInt32[] fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = fences)
				{
					Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesAPPLE(Int32 n, Int32[] fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = fences)
				{
					Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesAPPLE(Int32 n, ref UInt32 fences)
		{
			unsafe
			{
				fixed (UInt32* fences_ptr = &fences)
				{
					Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void DeleteFencesAPPLE(Int32 n, ref Int32 fences)
		{
			unsafe
			{
				fixed (Int32* fences_ptr = &fences)
				{
					Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
				}
			}
		}

		public static void SetFenceAPPLE(UInt32 fence)
		{
			Delegates.glSetFenceAPPLE((UInt32)fence);
		}

		public static void SetFenceAPPLE(Int32 fence)
		{
			Delegates.glSetFenceAPPLE((UInt32)fence);
		}

		public static Int32 IsFenceAPPLE(UInt32 fence)
		{
			return Delegates.glIsFenceAPPLE((UInt32)fence);
		}

		public static Int32 IsFenceAPPLE(Int32 fence)
		{
			return Delegates.glIsFenceAPPLE((UInt32)fence);
		}

		public static Int32 TestFenceAPPLE(UInt32 fence)
		{
			return Delegates.glTestFenceAPPLE((UInt32)fence);
		}

		public static Int32 TestFenceAPPLE(Int32 fence)
		{
			return Delegates.glTestFenceAPPLE((UInt32)fence);
		}

		public static void FinishFenceAPPLE(UInt32 fence)
		{
			Delegates.glFinishFenceAPPLE((UInt32)fence);
		}

		public static void FinishFenceAPPLE(Int32 fence)
		{
			Delegates.glFinishFenceAPPLE((UInt32)fence);
		}

		public static Int32 TestObjectAPPLE(int @object, UInt32 name)
		{
			return Delegates.glTestObjectAPPLE((int)@object, (UInt32)name);
		}

		public static Int32 TestObjectAPPLE(int @object, Int32 name)
		{
			return Delegates.glTestObjectAPPLE((int)@object, (UInt32)name);
		}

		public static void FinishObjectAPPLE(int @object, Int32 name)
		{
			Delegates.glFinishObjectAPPLE((int)@object, (Int32)name);
		}

		public static void BindVertexArrayAPPLE(UInt32 array)
		{
			Delegates.glBindVertexArrayAPPLE((UInt32)array);
		}

		public static void BindVertexArrayAPPLE(Int32 array)
		{
			Delegates.glBindVertexArrayAPPLE((UInt32)array);
		}

		public static void DeleteVertexArraysAPPLE(Int32 n, IntPtr arrays)
		{
			unsafe
			{
				Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
			}
		}

		public static void DeleteVertexArraysAPPLE(Int32 n, UInt32[] arrays)
		{
			unsafe
			{
				fixed (UInt32* arrays_ptr = arrays)
				{
					Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void DeleteVertexArraysAPPLE(Int32 n, Int32[] arrays)
		{
			unsafe
			{
				fixed (Int32* arrays_ptr = arrays)
				{
					Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void DeleteVertexArraysAPPLE(Int32 n, ref UInt32 arrays)
		{
			unsafe
			{
				fixed (UInt32* arrays_ptr = &arrays)
				{
					Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void DeleteVertexArraysAPPLE(Int32 n, ref Int32 arrays)
		{
			unsafe
			{
				fixed (Int32* arrays_ptr = &arrays)
				{
					Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void GenVertexArraysAPPLE(Int32 n, [Out] IntPtr arrays)
		{
			unsafe
			{
				Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
			}
		}

		public static void GenVertexArraysAPPLE(Int32 n, [Out] UInt32[] arrays)
		{
			unsafe
			{
				fixed (UInt32* arrays_ptr = arrays)
				{
					Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void GenVertexArraysAPPLE(Int32 n, [Out] Int32[] arrays)
		{
			unsafe
			{
				fixed (Int32* arrays_ptr = arrays)
				{
					Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		public static void GenVertexArraysAPPLE(Int32 n, [Out] out UInt32 arrays)
		{
			unsafe
			{
				fixed (UInt32* arrays_ptr = &arrays)
				{
					Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
					arrays = *arrays_ptr;
				}
			}
		}

		public static void GenVertexArraysAPPLE(Int32 n, [Out] out Int32 arrays)
		{
			unsafe
			{
				fixed (Int32* arrays_ptr = &arrays)
				{
					Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
					arrays = *arrays_ptr;
				}
			}
		}

		public static Int32 IsVertexArrayAPPLE(UInt32 array)
		{
			return Delegates.glIsVertexArrayAPPLE((UInt32)array);
		}

		public static Int32 IsVertexArrayAPPLE(Int32 array)
		{
			return Delegates.glIsVertexArrayAPPLE((UInt32)array);
		}

		public static void VertexArrayRangeAPPLE(Int32 length, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
			}
		}

		public static void VertexArrayRangeAPPLE(Int32 length, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void FlushVertexArrayRangeAPPLE(Int32 length, [Out] IntPtr pointer)
		{
			unsafe
			{
				Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
			}
		}

		public static void FlushVertexArrayRangeAPPLE(Int32 length, [In, Out] object pointer)
		{
			unsafe
			{
				GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
				try
				{
					Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				}
				finally
				{
					pointer_ptr.Free();
				}
			}
		}

		public static void VertexArrayParameteriAPPLE(GL pname, Int32 param)
		{
			Delegates.glVertexArrayParameteriAPPLE((int)pname, (Int32)param);
		}

		public static void BufferParameteriAPPLE(GL target, GL pname, Int32 param)
		{
			Delegates.glBufferParameteriAPPLE((int)target, (int)pname, (Int32)param);
		}

		public static void FlushMappedBufferRangeAPPLE(GL target, IntPtr offset, IntPtr size)
		{
			Delegates.glFlushMappedBufferRangeAPPLE((int)target, (IntPtr)offset, (IntPtr)size);
		}

		public static void StringMarkerGREMEDY(Int32 len, IntPtr @string)
		{
			unsafe
			{
				Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string);
			}
		}

		public static void StringMarkerGREMEDY(Int32 len, [In, Out] object @string)
		{
			unsafe
			{
				GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
				try
				{
					Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
				}
				finally
				{
					@string_ptr.Free();
				}
			}
		}

	}
}

#pragma warning restore 1591