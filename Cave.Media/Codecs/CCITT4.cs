using Cave.IO;

namespace Cave.Media.Codecs
{
    /// <summary>
    /// Provides CCITT4 tables.
    /// </summary>
    public class CCITT4
    {
        /// <summary>
        /// Provides white pixel termination codes.
        /// </summary>
        public readonly ushort[,] WhiteTerminatingCodes = new ushort[,]
        {
            { Bits.ToUInt16(00110101),  8 },   // 00110101         8       0
            { Bits.ToUInt16(000111),    6 },   // 000111           6       1
            { Bits.ToUInt16(0111),      4 },   // 0111             4       2
            { Bits.ToUInt16(1000),      4 },   // 1000             4       3
            { Bits.ToUInt16(1011),      4 },   // 1011             4       4
            { Bits.ToUInt16(1100),      4 },   // 1100             4       5
            { Bits.ToUInt16(1110),      4 },   // 1110             4       6
            { Bits.ToUInt16(1111),      4 },   // 1111             4       7
            { Bits.ToUInt16(10011),     5 },   // 10011            5       8
            { Bits.ToUInt16(10100),     5 },   // 10100            5       9
            { Bits.ToUInt16(00111),     5 },   // 00111            5      10
            { Bits.ToUInt16(01000),     5 },   // 01000            5      11
            { Bits.ToUInt16(001000),    6 },   // 001000           6      12
            { Bits.ToUInt16(000011),    6 },   // 000011           6      13
            { Bits.ToUInt16(110100),    6 },   // 110100           6      14
            { Bits.ToUInt16(110101),    6 },   // 110101           6      15

            { Bits.ToUInt16(101010),    6 },   // 101010           6      16
            { Bits.ToUInt16(101011),    6 },   // 101011           6      17
            { Bits.ToUInt16(0100111),   7 },   // 0100111          7      18
            { Bits.ToUInt16(0001100),   7 },   // 0001100          7      19
            { Bits.ToUInt16(0001000),   7 },   // 0001000          7      20
            { Bits.ToUInt16(0010111),   7 },   // 0010111          7      21
            { Bits.ToUInt16(0000011),   7 },   // 0000011          7      22
            { Bits.ToUInt16(0000100),   7 },   // 0000100          7      23
            { Bits.ToUInt16(0101000),   7 },   // 0101000          7      24
            { Bits.ToUInt16(0101011),   7 },   // 0101011          7      25
            { Bits.ToUInt16(0010011),   7 },   // 0010011          7      26
            { Bits.ToUInt16(0100100),   7 },   // 0100100          7      27
            { Bits.ToUInt16(0011000),   7 },   // 0011000          7      28
            { Bits.ToUInt16(00000010),  8 },   // 00000010         8      29
            { Bits.ToUInt16(00000011),  8 },   // 00000011         8      30
            { Bits.ToUInt16(00011010),  8 },   // 00011010         8      31

            { Bits.ToUInt16(00011011),  8 },   // 00011011         8      32
            { Bits.ToUInt16(00010010),  8 },   // 00010010         8      33
            { Bits.ToUInt16(00010011),  8 },   // 00010011         8      34
            { Bits.ToUInt16(00010100),  8 },   // 00010100         8      35
            { Bits.ToUInt16(00010101),  8 },   // 00010101         8      36
            { Bits.ToUInt16(00010110),  8 },   // 00010110         8      37
            { Bits.ToUInt16(00010111),  8 },   // 00010111         8      38
            { Bits.ToUInt16(00101000),  8 },   // 00101000         8      39
            { Bits.ToUInt16(00101001),  8 },   // 00101001         8      40
            { Bits.ToUInt16(00101010),  8 },   // 00101010         8      41
            { Bits.ToUInt16(00101011),  8 },   // 00101011         8      42
            { Bits.ToUInt16(00101100),  8 },   // 00101100         8      43
            { Bits.ToUInt16(00101101),  8 },   // 00101101         8      44
            { Bits.ToUInt16(00000100),  8 },   // 00000100         8      45
            { Bits.ToUInt16(00000101),  8 },   // 00000101         8      46
            { Bits.ToUInt16(00001010),  8 },   // 00001010         8      47

            { Bits.ToUInt16(00001011),  8 },   // 00001011         8      48
            { Bits.ToUInt16(01010010),  8 },   // 01010010         8      49
            { Bits.ToUInt16(01010011),  8 },   // 01010011         8      50
            { Bits.ToUInt16(01010100),  8 },   // 01010100         8      51
            { Bits.ToUInt16(01010101),  8 },   // 01010101         8      52
            { Bits.ToUInt16(00100100),  8 },   // 00100100         8      53
            { Bits.ToUInt16(00100101),  8 },   // 00100101         8      54
            { Bits.ToUInt16(01011000),  8 },   // 01011000         8      55
            { Bits.ToUInt16(01011001),  8 },   // 01011001         8      56
            { Bits.ToUInt16(01011010),  8 },   // 01011010         8      57
            { Bits.ToUInt16(01011011),  8 },   // 01011011         8      58
            { Bits.ToUInt16(01001010),  8 },   // 01001010         8      59
            { Bits.ToUInt16(01001011),  8 },   // 01001011         8      60
            { Bits.ToUInt16(00110010),  8 },   // 00110010         8      61
            { Bits.ToUInt16(00110011),  8 },   // 00110011         8      62
            { Bits.ToUInt16(00110100),  8 },   // 00110100         8      63
        };

        /// <summary>
        /// Provides black pixel termination codes.
        /// </summary>
        public readonly ushort[,] BlackTerminatingCodes = new ushort[,]
        {
            { Bits.ToUInt16(0000110111), 10 },     // 0000110111      10       0
            { Bits.ToUInt16(010), 3 },             // 010              3       1
            { Bits.ToUInt16(11), 2 },              // 11               2       2
            { Bits.ToUInt16(10), 2 },              // 10               2       3
            { Bits.ToUInt16(011), 3 },             // 011              3       4
            { Bits.ToUInt16(0011), 4 },            // 0011             4       5
            { Bits.ToUInt16(0010), 4 },            // 0010             4       6
            { Bits.ToUInt16(00011), 5 },           // 00011            5       7
            { Bits.ToUInt16(000101), 6 },          // 000101           6       8
            { Bits.ToUInt16(000100), 6 },          // 000100           6       9
            { Bits.ToUInt16(0000100), 7 },         // 0000100          7      10
            { Bits.ToUInt16(0000101), 7 },         // 0000101          7      11
            { Bits.ToUInt16(0000111), 7 },         // 0000111          7      12
            { Bits.ToUInt16(00000100), 8 },        // 00000100         8      13
            { Bits.ToUInt16(00000111), 8 },        // 00000111         8      14
            { Bits.ToUInt16(000011000), 9 },       // 000011000        9      15

            { Bits.ToUInt16(0000010111), 10 },     // 0000010111      10      16
            { Bits.ToUInt16(0000011000), 10 },     // 0000011000      10      17
            { Bits.ToUInt16(0000001000), 10 },     // 0000001000      10      18
            { Bits.ToUInt16(00001100111), 11 },    // 00001100111     11      19
            { Bits.ToUInt16(00001101000), 11 },    // 00001101000     11      20
            { Bits.ToUInt16(00001101100), 11 },    // 00001101100     11      21
            { Bits.ToUInt16(00000110111), 11 },    // 00000110111     11      22
            { Bits.ToUInt16(00000101000), 11 },    // 00000101000     11      23
            { Bits.ToUInt16(00000010111), 11 },    // 00000010111     11      24
            { Bits.ToUInt16(00000011000), 11 },    // 00000011000     11      25
            { Bits.ToUInt16(000011001010), 12 },   // 000011001010    12      26
            { Bits.ToUInt16(000011001011), 12 },   // 000011001011    12      27
            { Bits.ToUInt16(000011001100), 12 },   // 000011001100    12      28
            { Bits.ToUInt16(000011001101), 12 },   // 000011001101    12      29
            { Bits.ToUInt16(000001101000), 12 },   // 000001101000    12      30
            { Bits.ToUInt16(000001101001), 12 },   // 000001101001    12      31

            { Bits.ToUInt16(000001101010), 12 },   // 000001101010    12      32
            { Bits.ToUInt16(000001101011), 12 },   // 000001101011    12      33
            { Bits.ToUInt16(000011010010), 12 },   // 000011010010    12      34
            { Bits.ToUInt16(000011010011), 12 },   // 000011010011    12      35
            { Bits.ToUInt16(000011010100), 12 },   // 000011010100    12      36
            { Bits.ToUInt16(000011010101), 12 },   // 000011010101    12      37
            { Bits.ToUInt16(000011010110), 12 },   // 000011010110    12      38
            { Bits.ToUInt16(000011010111), 12 },   // 000011010111    12      39
            { Bits.ToUInt16(000001101100), 12 },   // 000001101100    12      40
            { Bits.ToUInt16(000001101101), 12 },   // 000001101101    12      41
            { Bits.ToUInt16(000011011010), 12 },   // 000011011010    12      42
            { Bits.ToUInt16(000011011011), 12 },   // 000011011011    12      43
            { Bits.ToUInt16(000001010100), 12 },   // 000001010100    12      44
            { Bits.ToUInt16(000001010101), 12 },   // 000001010101    12      45
            { Bits.ToUInt16(000001010110), 12 },   // 000001010110    12      46
            { Bits.ToUInt16(000001010111), 12 },   // 000001010111    12      47

            { Bits.ToUInt16(000001100100), 12 },   // 000001100100    12      48
            { Bits.ToUInt16(000001100101), 12 },   // 000001100101    12      49
            { Bits.ToUInt16(000001010010), 12 },   // 000001010010    12      50
            { Bits.ToUInt16(000001010011), 12 },   // 000001010011    12      51
            { Bits.ToUInt16(000000100100), 12 },   // 000000100100    12      52
            { Bits.ToUInt16(000000110111), 12 },   // 000000110111    12      53
            { Bits.ToUInt16(000000111000), 12 },   // 000000111000    12      54
            { Bits.ToUInt16(000000100111), 12 },   // 000000100111    12      55
            { Bits.ToUInt16(000000101000), 12 },   // 000000101000    12      56
            { Bits.ToUInt16(000001011000), 12 },   // 000001011000    12      57
            { Bits.ToUInt16(000001011001), 12 },   // 000001011001    12      58
            { Bits.ToUInt16(000000101011), 12 },   // 000000101011    12      59
            { Bits.ToUInt16(000000101100), 12 },   // 000000101100    12      60
            { Bits.ToUInt16(000001011010), 12 },   // 000001011010    12      61
            { Bits.ToUInt16(000001100110), 12 },   // 000001100110    12      62
            { Bits.ToUInt16(000001100111), 12 },   // 000001100111    12      63
        };

        /// <summary>
        /// Provides white makeup codes.
        /// </summary>
        public readonly ushort[,] WhiteMakeUpCodes = new ushort[,]
        {
            { Bits.ToUInt16(11011),     5,   64 },   // 11011            5      64
            { Bits.ToUInt16(10010),     5,  128 },   // 10010            5     128
            { Bits.ToUInt16(010111),    6,  192 },   // 010111           6     192
            { Bits.ToUInt16(0110111),   7,  256 },   // 0110111          7     256
            { Bits.ToUInt16(00110110),  8,  320 },   // 00110110         8     320
            { Bits.ToUInt16(00110111),  8,  384 },   // 00110111         8     384
            { Bits.ToUInt16(01100100),  8,  448 },   // 01100100         8     448
            { Bits.ToUInt16(01100101),  8,  512 },   // 01100101         8     512
            { Bits.ToUInt16(01101000),  8,  576 },   // 01101000         8     576
            { Bits.ToUInt16(01100111),  8,  640 },   // 01100111         8     640
            { Bits.ToUInt16(011001100), 9,  704 },   // 011001100        9     704
            { Bits.ToUInt16(011001101), 9,  768 },   // 011001101        9     768
            { Bits.ToUInt16(011010010), 9,  832 },   // 011010010        9     832
            { Bits.ToUInt16(011010011), 9,  896 },   // 011010011        9     896
            { Bits.ToUInt16(011010100), 9,  960 },   // 011010100        9     960
            { Bits.ToUInt16(011010101), 9, 1024 },   // 011010101        9    1024
            { Bits.ToUInt16(011010110), 9, 1088 },   // 011010110        9    1088
            { Bits.ToUInt16(011010111), 9, 1152 },   // 011010111        9    1152
            { Bits.ToUInt16(011011000), 9, 1216 },   // 011011000        9    1216
            { Bits.ToUInt16(011011001), 9, 1280 },   // 011011001        9    1280
            { Bits.ToUInt16(011011010), 9, 1344 },   // 011011010        9    1344
            { Bits.ToUInt16(011011011), 9, 1408 },   // 011011011        9    1408
            { Bits.ToUInt16(010011000), 9, 1472 },   // 010011000        9    1472
            { Bits.ToUInt16(010011001), 9, 1536 },   // 010011001        9    1536
            { Bits.ToUInt16(010011010), 9, 1600 },   // 010011010        9    1600
            { Bits.ToUInt16(011000),    6, 1664 },   // 011000           6    1664
            { Bits.ToUInt16(010011011), 9, 1727 },   // 010011011        9    1728
        };

        /// <summary>
        /// Provides black makeup codes.
        /// </summary>
        public readonly ushort[,] BlackMakeUpCodes = new ushort[,]
        {
            { Bits.ToUInt16(0000001111),    10,   64 },   // 0000001111      10      64
            { Bits.ToUInt16(000011001000),  12,  128 },   // 000011001000    12     128
            { Bits.ToUInt16(000011001001),  12,  192 },   // 000011001001    12     192
            { Bits.ToUInt16(000001011011),  12,  256 },   // 000001011011    12     256
            { Bits.ToUInt16(000000110011),  12,  320 },   // 000000110011    12     320
            { Bits.ToUInt16(000000110100),  12,  384 },   // 000000110100    12     384
            { Bits.ToUInt16(000000110101),  12,  448 },   // 000000110101    12     448
            { Bits.ToUInt16(0000001101100), 13,  512 },   // 0000001101100   13     512
            { Bits.ToUInt16(0000001101101), 13,  576 },   // 0000001101101   13     576
            { Bits.ToUInt16(0000001001010), 13,  640 },   // 0000001001010   13     640
            { Bits.ToUInt16(0000001001011), 13,  704 },   // 0000001001011   13     704
            { Bits.ToUInt16(0000001001100), 13,  768 },   // 0000001001100   13     768
            { Bits.ToUInt16(0000001001101), 13,  832 },   // 0000001001101   13     832
            { Bits.ToUInt16(0000001110010), 13,  896 },   // 0000001110010   13     896
            { Bits.ToUInt16(0000001110011), 13,  960 },   // 0000001110011   13     960
            { Bits.ToUInt16(0000001110100), 13, 1024 },   // 0000001110100   13    1024
            { Bits.ToUInt16(0000001110101), 13, 1088 },   // 0000001110101   13    1088
            { Bits.ToUInt16(0000001110110), 13, 1152 },   // 0000001110110   13    1152
            { Bits.ToUInt16(0000001110111), 13, 1216 },   // 0000001110111   13    1216
            { Bits.ToUInt16(0000001010010), 13, 1280 },   // 0000001010010   13    1280
            { Bits.ToUInt16(0000001010011), 13, 1344 },   // 0000001010011   13    1344
            { Bits.ToUInt16(0000001010100), 13, 1408 },   // 0000001010100   13    1408
            { Bits.ToUInt16(0000001010101), 13, 1472 },   // 0000001010101   13    1472
            { Bits.ToUInt16(0000001011010), 13, 1536 },   // 0000001011010   13    1536
            { Bits.ToUInt16(0000001011011), 13, 1600 },   // 0000001011011   13    1600
            { Bits.ToUInt16(0000001100100), 13, 1664 },   // 0000001100100   13    1664
            { Bits.ToUInt16(0000001100101), 13, 1728 },   // 0000001100101   13    1728
        };

        /// <summary>
        /// Provides additional make up codes only used by adobe tiff encoders.
        /// </summary>
        public readonly ushort[,] AdditionalMakeUpCodes = new ushort[,]
        {
            { Bits.ToUInt16(00000001000),  11, 1792 },   // 00000001000     11    1792
            { Bits.ToUInt16(00000001100),  11, 1856 },   // 00000001100     11    1856
            { Bits.ToUInt16(00000001101),  11, 1920 },   // 00000001101     11    1920
            { Bits.ToUInt16(000000010010), 12, 1984 },   // 000000010010    12    1984
            { Bits.ToUInt16(000000010011), 12, 2048 },   // 000000010011    12    2048
            { Bits.ToUInt16(000000010100), 12, 2112 },   // 000000010100    12    2112
            { Bits.ToUInt16(000000010101), 12, 2176 },   // 000000010101    12    2176
            { Bits.ToUInt16(000000010110), 12, 2240 },   // 000000010110    12    2240
            { Bits.ToUInt16(000000010111), 12, 2304 },   // 000000010111    12    2304
            { Bits.ToUInt16(000000011100), 12, 2368 },   // 000000011100    12    2368
            { Bits.ToUInt16(000000011101), 12, 2432 },   // 000000011101    12    2432
            { Bits.ToUInt16(000000011110), 12, 2496 },   // 000000011110    12    2496
            { Bits.ToUInt16(000000011111), 12, 2560 },   // 000000011111    12    2560
        };

        /// <summary>
        /// Provides the end of line code.
        /// </summary>
        public readonly ushort[] EOL = new ushort[] { Bits.ToUInt16(000000000001), 12 };       // 000000000001     12    EOL
    }
}
